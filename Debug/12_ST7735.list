
12_ST7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009344  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d54  080094e8  080094e8  000194e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c23c  0800c23c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c244  0800c244  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c244  0800c244  0001c244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c248  0800c248  0001c248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c24c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001f8  0800c440  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800c440  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002402f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e8f  00000000  00000000  00044253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  000480e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  000495e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b274  00000000  00000000  0004a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd38  00000000  00000000  00065bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000952ae  00000000  00000000  0008290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00117bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006930  00000000  00000000  00117c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094cc 	.word	0x080094cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080094cc 	.word	0x080094cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000ece:	88f8      	ldrh	r0, [r7, #6]
 8000ed0:	88b9      	ldrh	r1, [r7, #4]
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	883c      	ldrh	r4, [r7, #0]
 8000ed6:	8b3b      	ldrh	r3, [r7, #24]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4623      	mov	r3, r4
 8000edc:	f000 fa88 	bl	80013f0 <ST7735_FillRectangle>
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <fillScreen+0x2c>)
 8000ef4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <fillScreen+0x30>)
 8000efa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	2100      	movs	r1, #0
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ffd2 	bl	8000eb0 <fillRect>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000024c 	.word	0x2000024c
 8000f18:	20000250 	.word	0x20000250

08000f1c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <ST7735_Select+0x14>)
 8000f26:	f002 fc95 	bl	8003854 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000

08000f34 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <ST7735_Unselect+0x14>)
 8000f3e:	f002 fc89 	bl	8003854 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000

08000f4c <ST7735_Reset>:

void ST7735_Reset()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <ST7735_Reset+0x24>)
 8000f56:	f002 fc7d 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 f92e 	bl	80031bc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <ST7735_Reset+0x24>)
 8000f66:	f002 fc75 	bl	8003854 <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000

08000f74 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <ST7735_WriteCommand+0x2c>)
 8000f84:	f002 fc66 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f88:	1df9      	adds	r1, r7, #7
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <ST7735_WriteCommand+0x30>)
 8000f92:	f004 f936 	bl	8005202 <HAL_SPI_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	2000030c 	.word	0x2000030c

08000fa8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <ST7735_WriteData+0x2c>)
 8000fb8:	f002 fc4c 	bl	8003854 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <ST7735_WriteData+0x30>)
 8000fc8:	f004 f91b 	bl	8005202 <HAL_SPI_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	2000030c 	.word	0x2000030c

08000fdc <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000fee:	e034      	b.n	800105a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffb9 	bl	8000f74 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800100c:	7abb      	ldrb	r3, [r7, #10]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800101c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffbd 	bl	8000fa8 <ST7735_WriteData>
            addr += numArgs;
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <DisplayInit+0x7e>
            ms = *addr++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	2bff      	cmp	r3, #255	; 0xff
 800104a:	d102      	bne.n	8001052 <DisplayInit+0x76>
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f8b1 	bl	80031bc <HAL_Delay>
    while(numCommands--) {
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	73fa      	strb	r2, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <DisplayInit+0x14>
        }
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4623      	mov	r3, r4
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	460b      	mov	r3, r1
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	4613      	mov	r3, r2
 800108c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800108e:	202a      	movs	r0, #42	; 0x2a
 8001090:	f7ff ff70 	bl	8000f74 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001094:	2300      	movs	r3, #0
 8001096:	733b      	strb	r3, [r7, #12]
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <ST7735_SetAddressWindow+0x88>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4413      	add	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	737b      	strb	r3, [r7, #13]
 80010a4:	2300      	movs	r3, #0
 80010a6:	73bb      	strb	r3, [r7, #14]
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <ST7735_SetAddressWindow+0x88>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff74 	bl	8000fa8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80010c0:	202b      	movs	r0, #43	; 0x2b
 80010c2:	f7ff ff57 	bl	8000f74 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <ST7735_SetAddressWindow+0x8c>)
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	4413      	add	r3, r2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <ST7735_SetAddressWindow+0x8c>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	793b      	ldrb	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80010ea:	202c      	movs	r0, #44	; 0x2c
 80010ec:	f7ff ff42 	bl	8000f74 <ST7735_WriteCommand>
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	20000244 	.word	0x20000244
 80010fc:	20000248 	.word	0x20000248

08001100 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800110a:	f7ff ff07 	bl	8000f1c <ST7735_Select>
    ST7735_Reset();
 800110e:	f7ff ff1d 	bl	8000f4c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <ST7735_Init+0x44>)
 8001114:	f7ff ff62 	bl	8000fdc <DisplayInit>
    DisplayInit(init_cmds2);
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <ST7735_Init+0x48>)
 800111a:	f7ff ff5f 	bl	8000fdc <DisplayInit>
    DisplayInit(init_cmds3);
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <ST7735_Init+0x4c>)
 8001120:	f7ff ff5c 	bl	8000fdc <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <ST7735_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <ST7735_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f810 	bl	8001158 <ST7735_SetRotation>
    ST7735_Unselect();
 8001138:	f7ff fefc 	bl	8000f34 <ST7735_Unselect>

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	080095b8 	.word	0x080095b8
 8001148:	080095f0 	.word	0x080095f0
 800114c:	08009600 	.word	0x08009600
 8001150:	20000245 	.word	0x20000245
 8001154:	20000249 	.word	0x20000249

08001158 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <ST7735_SetRotation+0xe4>)
 8001170:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <ST7735_SetRotation+0xe4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d84e      	bhi.n	8001218 <ST7735_SetRotation+0xc0>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <ST7735_SetRotation+0x28>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001191 	.word	0x08001191
 8001184:	080011b3 	.word	0x080011b3
 8001188:	080011d5 	.word	0x080011d5
 800118c:	080011f7 	.word	0x080011f7
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <ST7735_SetRotation+0xe8>)
 8001196:	22a0      	movs	r2, #160	; 0xa0
 8001198:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <ST7735_SetRotation+0xec>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <ST7735_SetRotation+0xf4>)
 80011a6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011b0:	e032      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <ST7735_SetRotation+0xec>)
 80011b8:	22a0      	movs	r2, #160	; 0xa0
 80011ba:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <ST7735_SetRotation+0xe8>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011c8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <ST7735_SetRotation+0xf4>)
 80011d0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011d2:	e021      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <ST7735_SetRotation+0xe8>)
 80011da:	22a0      	movs	r2, #160	; 0xa0
 80011dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <ST7735_SetRotation+0xec>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <ST7735_SetRotation+0xf4>)
 80011ea:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011f4:	e010      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <ST7735_SetRotation+0xec>)
 80011fc:	22a0      	movs	r2, #160	; 0xa0
 80011fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <ST7735_SetRotation+0xe8>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <ST7735_SetRotation+0xf0>)
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <ST7735_SetRotation+0xfc>)
 800120c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <ST7735_SetRotation+0xf8>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <ST7735_SetRotation+0xf4>)
 8001214:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001216:	bf00      	nop
  }
  ST7735_Select();
 8001218:	f7ff fe80 	bl	8000f1c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800121c:	2036      	movs	r0, #54	; 0x36
 800121e:	f7ff fea9 	bl	8000f74 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001222:	f107 030f 	add.w	r3, r7, #15
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff febd 	bl	8000fa8 <ST7735_WriteData>
  ST7735_Unselect();
 800122e:	f7ff fe81 	bl	8000f34 <ST7735_Unselect>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000024a 	.word	0x2000024a
 8001240:	20000250 	.word	0x20000250
 8001244:	2000024c 	.word	0x2000024c
 8001248:	20000245 	.word	0x20000245
 800124c:	20000244 	.word	0x20000244
 8001250:	20000249 	.word	0x20000249
 8001254:	20000248 	.word	0x20000248

08001258 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001258:	b082      	sub	sp, #8
 800125a:	b590      	push	{r4, r7, lr}
 800125c:	b089      	sub	sp, #36	; 0x24
 800125e:	af00      	add	r7, sp, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	460b      	mov	r3, r1
 8001268:	80bb      	strh	r3, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2d8      	uxtb	r0, r3
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b2dc      	uxtb	r4, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4622      	mov	r2, r4
 8001298:	f7ff feea 	bl	8001070 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e043      	b.n	800132a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	3b20      	subs	r3, #32
 80012a8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	440b      	add	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	e029      	b.n	8001318 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00e      	beq.n	80012f2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	743b      	strb	r3, [r7, #16]
 80012de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fe5c 	bl	8000fa8 <ST7735_WriteData>
 80012f0:	e00f      	b.n	8001312 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	733b      	strb	r3, [r7, #12]
 80012fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001302:	b2db      	uxtb	r3, r3
 8001304:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2102      	movs	r1, #2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe4b 	bl	8000fa8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	3301      	adds	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800131c:	461a      	mov	r2, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4293      	cmp	r3, r2
 8001322:	d3cf      	bcc.n	80012c4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3301      	adds	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800132e:	461a      	mov	r2, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4293      	cmp	r3, r2
 8001334:	d3b5      	bcc.n	80012a2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001342:	b002      	add	sp, #8
 8001344:	4770      	bx	lr
	...

08001348 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001348:	b082      	sub	sp, #8
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af04      	add	r7, sp, #16
 8001350:	603a      	str	r2, [r7, #0]
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	460b      	mov	r3, r1
 800135a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800135c:	f7ff fdde 	bl	8000f1c <ST7735_Select>

    while(*str) {
 8001360:	e033      	b.n	80013ca <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	7d3a      	ldrb	r2, [r7, #20]
 8001366:	4413      	add	r3, r2
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <ST7735_WriteString+0xa0>)
 800136a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800136e:	4293      	cmp	r3, r2
 8001370:	db16      	blt.n	80013a0 <ST7735_WriteString+0x58>
            x = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001376:	7d7b      	ldrb	r3, [r7, #21]
 8001378:	b29a      	uxth	r2, r3
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	7d7a      	ldrb	r2, [r7, #21]
 8001384:	4413      	add	r3, r2
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <ST7735_WriteString+0xa4>)
 8001388:	f9b2 2000 	ldrsh.w	r2, [r2]
 800138c:	4293      	cmp	r3, r2
 800138e:	da21      	bge.n	80013d4 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b20      	cmp	r3, #32
 8001396:	d103      	bne.n	80013a0 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	603b      	str	r3, [r7, #0]
                continue;
 800139e:	e014      	b.n	80013ca <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	88b9      	ldrh	r1, [r7, #4]
 80013a6:	88f8      	ldrh	r0, [r7, #6]
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	8bbb      	ldrh	r3, [r7, #28]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f7ff ff4f 	bl	8001258 <ST7735_WriteChar>
        x += font.width;
 80013ba:	7d3b      	ldrb	r3, [r7, #20]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4413      	add	r3, r2
 80013c2:	80fb      	strh	r3, [r7, #6]
        str++;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1c7      	bne.n	8001362 <ST7735_WriteString+0x1a>
 80013d2:	e000      	b.n	80013d6 <ST7735_WriteString+0x8e>
                break;
 80013d4:	bf00      	nop
    }

    ST7735_Unselect();
 80013d6:	f7ff fdad 	bl	8000f34 <ST7735_Unselect>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e4:	b002      	add	sp, #8
 80013e6:	4770      	bx	lr
 80013e8:	2000024c 	.word	0x2000024c
 80013ec:	20000250 	.word	0x20000250

080013f0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	4603      	mov	r3, r0
 8001404:	80bb      	strh	r3, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
 800140a:	4613      	mov	r3, r2
 800140c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4a37      	ldr	r2, [pc, #220]	; (80014f0 <ST7735_FillRectangle+0x100>)
 8001412:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001416:	4293      	cmp	r3, r2
 8001418:	da66      	bge.n	80014e8 <ST7735_FillRectangle+0xf8>
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	4a35      	ldr	r2, [pc, #212]	; (80014f4 <ST7735_FillRectangle+0x104>)
 800141e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001422:	4293      	cmp	r3, r2
 8001424:	da60      	bge.n	80014e8 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	4413      	add	r3, r2
 800142c:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <ST7735_FillRectangle+0x100>)
 800142e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001432:	4293      	cmp	r3, r2
 8001434:	dd06      	ble.n	8001444 <ST7735_FillRectangle+0x54>
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <ST7735_FillRectangle+0x100>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	b29a      	uxth	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001444:	88ba      	ldrh	r2, [r7, #4]
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	4a2a      	ldr	r2, [pc, #168]	; (80014f4 <ST7735_FillRectangle+0x104>)
 800144c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001450:	4293      	cmp	r3, r2
 8001452:	dd06      	ble.n	8001462 <ST7735_FillRectangle+0x72>
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <ST7735_FillRectangle+0x104>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	b29a      	uxth	r2, r3
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001462:	f7ff fd5b 	bl	8000f1c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2d8      	uxtb	r0, r3
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b2dc      	uxtb	r4, r3
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4622      	mov	r2, r4
 8001490:	f7ff fdee 	bl	8001070 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001494:	8c3b      	ldrh	r3, [r7, #32]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	733b      	strb	r3, [r7, #12]
 800149e:	8c3b      	ldrh	r3, [r7, #32]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <ST7735_FillRectangle+0x108>)
 80014aa:	f002 f9d3 	bl	8003854 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	e013      	b.n	80014dc <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	e00a      	b.n	80014d0 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	2202      	movs	r2, #2
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <ST7735_FillRectangle+0x10c>)
 80014c6:	f003 fe9c 	bl	8005202 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f1      	bne.n	80014ba <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	80bb      	strh	r3, [r7, #4]
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e8      	bne.n	80014b4 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80014e2:	f7ff fd27 	bl	8000f34 <ST7735_Unselect>
 80014e6:	e000      	b.n	80014ea <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80014e8:	bf00      	nop
}
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	2000024c 	.word	0x2000024c
 80014f4:	20000250 	.word	0x20000250
 80014f8:	40020400 	.word	0x40020400
 80014fc:	2000030c 	.word	0x2000030c

08001500 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	4613      	mov	r3, r2
 8001510:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fc90 	bl	8001e38 <null_ptr_check>
 8001518:	4603      	mov	r3, r0
 800151a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 800151c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11c      	bne.n	800155e <bmp280_get_regs+0x5e>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d019      	beq.n	800155e <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	789b      	ldrb	r3, [r3, #2]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001538:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685c      	ldr	r4, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7858      	ldrb	r0, [r3, #1]
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	b29b      	uxth	r3, r3
 8001546:	7bf9      	ldrb	r1, [r7, #15]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	47a0      	blx	r4
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8001558:	23fc      	movs	r3, #252	; 0xfc
 800155a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800155c:	e001      	b.n	8001562 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800155e:	23ff      	movs	r3, #255	; 0xff
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}

0800156e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b089      	sub	sp, #36	; 0x24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b04      	cmp	r3, #4
 8001582:	d901      	bls.n	8001588 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f000 fc55 	bl	8001e38 <null_ptr_check>
 800158e:	4603      	mov	r3, r0
 8001590:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d14d      	bne.n	8001636 <bmp280_set_regs+0xc8>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04a      	beq.n	8001636 <bmp280_set_regs+0xc8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d047      	beq.n	8001636 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d041      	beq.n	8001630 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	76fb      	strb	r3, [r7, #27]
 80015be:	e00d      	b.n	80015dc <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	7efb      	ldrb	r3, [r7, #27]
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	440b      	add	r3, r1
 80015ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015d6:	7efb      	ldrb	r3, [r7, #27]
 80015d8:	3301      	adds	r3, #1
 80015da:	76fb      	strb	r3, [r7, #27]
 80015dc:	7efa      	ldrb	r2, [r7, #27]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3ed      	bcc.n	80015c0 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d90d      	bls.n	8001606 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f107 0110 	add.w	r1, r7, #16
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fc40 	bl	8001e78 <interleave_data>
                temp_len = ((len * 2) - 1);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	83bb      	strh	r3, [r7, #28]
 8001604:	e001      	b.n	800160a <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689c      	ldr	r4, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	7858      	ldrb	r0, [r3, #1]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	8bbb      	ldrh	r3, [r7, #28]
 8001618:	f107 0210 	add.w	r2, r7, #16
 800161c:	47a0      	blx	r4
 800161e:	4603      	mov	r3, r0
 8001620:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001622:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800162a:	23fc      	movs	r3, #252	; 0xfc
 800162c:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800162e:	e005      	b.n	800163c <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001630:	23fd      	movs	r3, #253	; 0xfd
 8001632:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001634:	e002      	b.n	800163c <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001636:	23ff      	movs	r3, #255	; 0xff
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	e000      	b.n	800163e <bmp280_set_regs+0xd0>
        if (len != 0)
 800163c:	bf00      	nop
    }

    return rslt;
 800163e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}

0800164a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001652:	23e0      	movs	r3, #224	; 0xe0
 8001654:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001656:	23b6      	movs	r3, #182	; 0xb6
 8001658:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fbec 	bl	8001e38 <null_ptr_check>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800166c:	f107 010d 	add.w	r1, r7, #13
 8001670:	f107 000e 	add.w	r0, r7, #14
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f7ff ff79 	bl	800156e <bmp280_set_regs>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2002      	movs	r0, #2
 8001686:	4798      	blx	r3
    }

    return rslt;
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 800169c:	2305      	movs	r3, #5
 800169e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fbc9 	bl	8001e38 <null_ptr_check>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d150      	bne.n	8001754 <bmp280_init+0xc0>
    {
        while (try_count)
 80016b2:	e02d      	b.n	8001710 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	20d0      	movs	r0, #208	; 0xd0
 80016bc:	f7ff ff20 	bl	8001500 <bmp280_get_regs>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d11a      	bne.n	8001702 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80016d0:	2b56      	cmp	r3, #86	; 0x56
 80016d2:	d007      	beq.n	80016e4 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b57      	cmp	r3, #87	; 0x57
 80016da:	d003      	beq.n	80016e4 <bmp280_init+0x50>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b58      	cmp	r3, #88	; 0x58
 80016e2:	d10e      	bne.n	8001702 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffb0 	bl	800164a <bmp280_soft_reset>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d110      	bne.n	8001718 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fbea 	bl	8001ed0 <get_calib_param>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001700:	e00a      	b.n	8001718 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	200a      	movs	r0, #10
 8001708:	4798      	blx	r3
            --try_count;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3b01      	subs	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ce      	bne.n	80016b4 <bmp280_init+0x20>
 8001716:	e000      	b.n	800171a <bmp280_init+0x86>
                break;
 8001718:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001720:	23fe      	movs	r3, #254	; 0xfe
 8001722:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d113      	bne.n	8001754 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800176a:	2300      	movs	r3, #0
 800176c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f000 fb62 	bl	8001e38 <null_ptr_check>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d137      	bne.n	80017f0 <bmp280_get_config+0x90>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d034      	beq.n	80017f0 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	20f4      	movs	r0, #244	; 0xf4
 8001790:	f7ff feb6 	bl	8001500 <bmp280_get_regs>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d129      	bne.n	80017f4 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	109b      	asrs	r3, r3, #2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80017ba:	7b7b      	ldrb	r3, [r7, #13]
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	109b      	asrs	r3, r3, #2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80017d4:	7b7b      	ldrb	r3, [r7, #13]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	332c      	adds	r3, #44	; 0x2c
 80017e6:	6810      	ldr	r0, [r2, #0]
 80017e8:	6018      	str	r0, [r3, #0]
 80017ea:	7912      	ldrb	r2, [r2, #4]
 80017ec:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80017ee:	e001      	b.n	80017f4 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	2000      	movs	r0, #0
 8001810:	f000 fbfc 	bl	800200c <conf_sensor>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	6039      	str	r1, [r7, #0]
 8001828:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f000 fb04 	bl	8001e38 <null_ptr_check>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fbe0 	bl	800200c <conf_sensor>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	2300      	movs	r3, #0
 800186c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f000 fae2 	bl	8001e38 <null_ptr_check>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d133      	bne.n	80018e8 <bmp280_get_uncomp_data+0x8c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d030      	beq.n	80018e8 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001886:	f107 0108 	add.w	r1, r7, #8
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2206      	movs	r2, #6
 800188e:	20f7      	movs	r0, #247	; 0xf7
 8001890:	f7ff fe36 	bl	8001500 <bmp280_get_regs>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d120      	bne.n	80018e2 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80018a0:	7a3b      	ldrb	r3, [r7, #8]
 80018a2:	031a      	lsls	r2, r3, #12
 80018a4:	7a7b      	ldrb	r3, [r7, #9]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4313      	orrs	r3, r2
 80018aa:	7aba      	ldrb	r2, [r7, #10]
 80018ac:	0912      	lsrs	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	031a      	lsls	r2, r3, #12
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4313      	orrs	r3, r2
 80018c0:	7b7a      	ldrb	r2, [r7, #13]
 80018c2:	0912      	lsrs	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f000 fc4e 	bl	8002178 <st_check_boundaries>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018e0:	e004      	b.n	80018ec <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80018e2:	23f3      	movs	r3, #243	; 0xf3
 80018e4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018e6:	e001      	b.n	80018ec <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b08a      	sub	sp, #40	; 0x28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fa96 	bl	8001e38 <null_ptr_check>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80ac 	bne.w	8001a74 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7fe fe09 	bl	8000534 <__aeabi_i2d>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <bmp280_get_comp_temp_double+0x1a0>)
 8001928:	f7fe ff98 	bl	800085c <__aeabi_ddiv>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	8a1b      	ldrh	r3, [r3, #16]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdeb 	bl	8000514 <__aeabi_ui2d>
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <bmp280_get_comp_temp_double+0x1a4>)
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fca2 	bl	8000298 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
               ((double) dev->calib_param.dig_t2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_i2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fe4a 	bl	8000608 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800197c:	68b8      	ldr	r0, [r7, #8]
 800197e:	f7fe fdd9 	bl	8000534 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800198a:	f7fe ff67 	bl	800085c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8a1b      	ldrh	r3, [r3, #16]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdba 	bl	8000514 <__aeabi_ui2d>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <bmp280_get_comp_temp_double+0x1a8>)
 80019a6:	f7fe ff59 	bl	800085c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc71 	bl	8000298 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f7fe fdb8 	bl	8000534 <__aeabi_i2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019cc:	f7fe ff46 	bl	800085c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4690      	mov	r8, r2
 80019d6:	4699      	mov	r9, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	8a1b      	ldrh	r3, [r3, #16]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd99 	bl	8000514 <__aeabi_ui2d>
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <bmp280_get_comp_temp_double+0x1a8>)
 80019e8:	f7fe ff38 	bl	800085c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4640      	mov	r0, r8
 80019f2:	4649      	mov	r1, r9
 80019f4:	f7fe fc50 	bl	8000298 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fe02 	bl	8000608 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
            ((double) dev->calib_param.dig_t3);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd8e 	bl	8000534 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
        var2 =
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fdf2 	bl	8000608 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a34:	f7fe fc32 	bl	800029c <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f892 	bl	8000b68 <__aeabi_d2iz>
 8001a44:	4602      	mov	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001a4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a52:	f7fe fc23 	bl	800029c <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <bmp280_get_comp_temp_double+0x1ac>)
 8001a64:	f7fe fefa 	bl	800085c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	e9c1 2300 	strd	r2, r3, [r1]
 8001a72:	e009      	b.n	8001a88 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001a82:	23ef      	movs	r3, #239	; 0xef
 8001a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a96:	bf00      	nop
 8001a98:	40d00000 	.word	0x40d00000
 8001a9c:	40900000 	.word	0x40900000
 8001aa0:	40c00000 	.word	0x40c00000
 8001aa4:	40b40000 	.word	0x40b40000

08001aa8 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8001aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aac:	b08a      	sub	sp, #40	; 0x28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9be 	bl	8001e38 <null_ptr_check>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 8197 	bne.w	8001dfa <bmp280_get_comp_pres_double+0x352>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd2f 	bl	8000534 <__aeabi_i2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ade:	f7fe febd 	bl	800085c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4bc8      	ldr	r3, [pc, #800]	; (8001e10 <bmp280_get_comp_pres_double+0x368>)
 8001af0:	f7fe fbd2 	bl	8000298 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd0c 	bl	8000534 <__aeabi_i2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fd70 	bl	8000608 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4bb7      	ldr	r3, [pc, #732]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001b36:	f7fe fe91 	bl	800085c <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcf3 	bl	8000534 <__aeabi_i2d>
 8001b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b52:	f7fe fd59 	bl	8000608 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	f7fe fb9b 	bl	800029c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fb95 	bl	800029c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4ba6      	ldr	r3, [pc, #664]	; (8001e18 <bmp280_get_comp_pres_double+0x370>)
 8001b80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b84:	f7fe fe6a 	bl	800085c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fccc 	bl	8000534 <__aeabi_i2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b9e      	ldr	r3, [pc, #632]	; (8001e1c <bmp280_get_comp_pres_double+0x374>)
 8001ba2:	f7fe fd31 	bl	8000608 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fb75 	bl	800029c <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcb7 	bl	8000534 <__aeabi_i2d>
 8001bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bca:	f7fe fd1d 	bl	8000608 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	f7fe fd15 	bl	8000608 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <bmp280_get_comp_pres_double+0x378>)
 8001bec:	f7fe fe36 	bl	800085c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc98 	bl	8000534 <__aeabi_i2d>
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	f7fe fcfe 	bl	8000608 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fb42 	bl	800029c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <bmp280_get_comp_pres_double+0x378>)
 8001c26:	f7fe fe19 	bl	800085c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001c38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c3c:	f7fe fe0e 	bl	800085c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <bmp280_get_comp_pres_double+0x37c>)
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8adb      	ldrh	r3, [r3, #22]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc58 	bl	8000514 <__aeabi_ui2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fccc 	bl	8000608 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	f7fe fc4b 	bl	8000514 <__aeabi_ui2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	4968      	ldr	r1, [pc, #416]	; (8001e28 <bmp280_get_comp_pres_double+0x380>)
 8001c88:	f7fe fb06 	bl	8000298 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	e9c1 2300 	strd	r2, r3, [r1]
        if (var1 < 0 || var1 > 0)
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca2:	f7fe ff23 	bl	8000aec <__aeabi_dcmplt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <bmp280_get_comp_pres_double+0x21c>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb8:	f7fe ff36 	bl	8000b28 <__aeabi_dcmpgt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8091 	beq.w	8001de6 <bmp280_get_comp_pres_double+0x33e>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <bmp280_get_comp_pres_double+0x384>)
 8001cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd4:	f7fe fdc2 	bl	800085c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fada 	bl	8000298 <__aeabi_dsub>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	a346      	add	r3, pc, #280	; (adr r3, 8001e08 <bmp280_get_comp_pres_double+0x360>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fc89 	bl	8000608 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc0c 	bl	8000534 <__aeabi_i2d>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <bmp280_get_comp_pres_double+0x388>)
 8001d46:	f7fe fd89 	bl	800085c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbe8 	bl	8000534 <__aeabi_i2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fc4c 	bl	8000608 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001d7e:	f7fe fd6d 	bl	800085c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 2304 	strd	r2, r3, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe fa80 	bl	800029c <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4690      	mov	r8, r2
 8001da2:	4699      	mov	r9, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbc2 	bl	8000534 <__aeabi_i2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4640      	mov	r0, r8
 8001db6:	4649      	mov	r1, r9
 8001db8:	f7fe fa70 	bl	800029c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <bmp280_get_comp_pres_double+0x38c>)
 8001dca:	f7fe fd47 	bl	800085c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa61 	bl	800029c <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
 8001de4:	e009      	b.n	8001dfa <bmp280_get_comp_pres_double+0x352>
        }
        else
        {
            *pressure = 0;
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9c1 2300 	strd	r2, r3, [r1]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8001df4:	23ee      	movs	r3, #238	; 0xee
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8001dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40b86a00 	.word	0x40b86a00
 8001e10:	40ef4000 	.word	0x40ef4000
 8001e14:	40e00000 	.word	0x40e00000
 8001e18:	40100000 	.word	0x40100000
 8001e1c:	40f00000 	.word	0x40f00000
 8001e20:	41200000 	.word	0x41200000
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	41300000 	.word	0x41300000
 8001e2c:	40b00000 	.word	0x40b00000
 8001e30:	41e00000 	.word	0x41e00000
 8001e34:	40300000 	.word	0x40300000

08001e38 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8001e5e:	23ff      	movs	r3, #255	; 0xff
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e001      	b.n	8001e68 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	e016      	b.n	8001eba <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	441a      	add	r2, r3
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	440b      	add	r3, r1
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
 8001eba:	7dfa      	ldrb	r2, [r7, #23]
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3e4      	bcc.n	8001e8c <interleave_data+0x14>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffa3 	bl	8001e38 <null_ptr_check>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d17f      	bne.n	8002000 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2218      	movs	r2, #24
 8001f08:	2088      	movs	r0, #136	; 0x88
 8001f0a:	f7ff faf9 	bl	8001500 <bmp280_get_regs>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d171      	bne.n	8002000 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001f1c:	7b7b      	ldrb	r3, [r7, #13]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001f42:	7c7b      	ldrb	r3, [r7, #17]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	7c3b      	ldrb	r3, [r7, #16]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	7cbb      	ldrb	r3, [r7, #18]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001f68:	7d7b      	ldrb	r3, [r7, #21]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	7d3b      	ldrb	r3, [r7, #20]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001f8c:	7e7b      	ldrb	r3, [r7, #25]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	7e3b      	ldrb	r3, [r7, #24]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001f9e:	7efb      	ldrb	r3, [r7, #27]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	7ebb      	ldrb	r3, [r7, #26]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001fb0:	7f7b      	ldrb	r3, [r7, #29]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7f3b      	ldrb	r3, [r7, #28]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	7fbb      	ldrb	r3, [r7, #30]
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001fd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8002000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800201a:	2300      	movs	r3, #0
 800201c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 800201e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8002022:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff07 	bl	8001e38 <null_ptr_check>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800202e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8095 	bne.w	8002162 <conf_sensor+0x156>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8091 	beq.w	8002162 <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8002040:	f107 0114 	add.w	r1, r7, #20
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	20f4      	movs	r0, #244	; 0xf4
 800204a:	f7ff fa59 	bl	8001500 <bmp280_get_regs>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8086 	bne.w	8002168 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff faf4 	bl	800164a <bmp280_soft_reset>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8002066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17c      	bne.n	8002168 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 800206e:	7d3b      	ldrb	r3, [r7, #20]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	b25a      	sxtb	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b25b      	sxtb	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8002088:	7d3b      	ldrb	r3, [r7, #20]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	f023 031c 	bic.w	r3, r3, #28
 8002090:	b25a      	sxtb	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	b25b      	sxtb	r3, r3
 800209a:	f003 031c 	and.w	r3, r3, #28
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 80020a8:	7d7b      	ldrb	r3, [r7, #21]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	b25a      	sxtb	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 80020c2:	7d7b      	ldrb	r3, [r7, #21]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	f023 031c 	bic.w	r3, r3, #28
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	f003 031c 	and.w	r3, r3, #28
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 80020e2:	7d7b      	ldrb	r3, [r7, #21]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	b25a      	sxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8002100:	f107 0114 	add.w	r1, r7, #20
 8002104:	f107 0010 	add.w	r0, r7, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f7ff fa2f 	bl	800156e <bmp280_set_regs>
 8002110:	4603      	mov	r3, r0
 8002112:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8002114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d125      	bne.n	8002168 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	332c      	adds	r3, #44	; 0x2c
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	6018      	str	r0, [r3, #0]
 8002126:	7912      	ldrb	r2, [r2, #4]
 8002128:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8002130:	7d3b      	ldrb	r3, [r7, #20]
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f023 0303 	bic.w	r3, r3, #3
 8002138:	b25a      	sxtb	r2, r3
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	b25b      	sxtb	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b25b      	sxtb	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 800214c:	f107 0114 	add.w	r1, r7, #20
 8002150:	f107 0010 	add.w	r0, r7, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f7ff fa09 	bl	800156e <bmp280_set_regs>
 800215c:	4603      	mov	r3, r0
 800215e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002160:	e002      	b.n	8002168 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8002162:	23ff      	movs	r3, #255	; 0xff
 8002164:	75fb      	strb	r3, [r7, #23]
 8002166:	e000      	b.n	800216a <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8002168:	bf00      	nop
    }

    return rslt;
 800216a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dd03      	ble.n	8002194 <st_check_boundaries+0x1c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <st_check_boundaries+0x6c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	dd09      	ble.n	80021a8 <st_check_boundaries+0x30>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	dd03      	ble.n	80021a2 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <st_check_boundaries+0x6c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	dd02      	ble.n	80021a8 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80021a2:	23f4      	movs	r3, #244	; 0xf4
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e015      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dd03      	ble.n	80021b6 <st_check_boundaries+0x3e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <st_check_boundaries+0x6c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	dd02      	ble.n	80021bc <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 80021b6:	23f6      	movs	r3, #246	; 0xf6
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e00b      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd03      	ble.n	80021ca <st_check_boundaries+0x52>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <st_check_boundaries+0x6c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	dd02      	ble.n	80021d0 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 80021ca:	23f5      	movs	r3, #245	; 0xf5
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e001      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	000fffef 	.word	0x000fffef

080021e8 <BMP280_init>:

/*
 * Funkcja inicjalizująca czujnik bmp280
 * Zwracana wartość rslt to kod błędu w przypadku błędu inicjalizacji
 */
int8_t BMP280_init(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
	int8_t rslt;
    struct bmp280_config conf;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <BMP280_init+0x74>)
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <BMP280_init+0x78>)
 80021f2:	60da      	str	r2, [r3, #12]

    /* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
    bmp.dev_id = (BMP280_I2C_ADDR_PRIM<<1);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <BMP280_init+0x74>)
 80021f6:	22ec      	movs	r2, #236	; 0xec
 80021f8:	705a      	strb	r2, [r3, #1]

    /* Select the interface mode as I2C */
    bmp.intf = BMP280_I2C_INTF;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <BMP280_init+0x74>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	709a      	strb	r2, [r3, #2]

    /* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
    bmp.read = i2c_reg_read;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <BMP280_init+0x74>)
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <BMP280_init+0x7c>)
 8002204:	605a      	str	r2, [r3, #4]
    bmp.write = i2c_reg_write;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <BMP280_init+0x74>)
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <BMP280_init+0x80>)
 800220a:	609a      	str	r2, [r3, #8]

    rslt = bmp280_init(&bmp);
 800220c:	4813      	ldr	r0, [pc, #76]	; (800225c <BMP280_init+0x74>)
 800220e:	f7ff fa41 	bl	8001694 <bmp280_init>
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]


    /* Always read the current settings before writing, especially when
     * all the configuration is not modified
     */
    rslt = bmp280_get_config(&conf, &bmp);
 8002216:	463b      	mov	r3, r7
 8002218:	4910      	ldr	r1, [pc, #64]	; (800225c <BMP280_init+0x74>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff faa0 	bl	8001760 <bmp280_get_config>
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]


    /* configuring the temperature oversampling, filter coefficient and output data rate */
    /* Overwrite the desired settings */
    conf.filter = BMP280_FILTER_COEFF_2;
 8002224:	2301      	movs	r3, #1
 8002226:	70fb      	strb	r3, [r7, #3]

    /* Pressure oversampling set at 4x */
    conf.os_pres = BMP280_OS_4X;
 8002228:	2303      	movs	r3, #3
 800222a:	707b      	strb	r3, [r7, #1]

    /* Temperature oversampling set at 4x */
    conf.os_temp = BMP280_OS_4X;
 800222c:	2303      	movs	r3, #3
 800222e:	703b      	strb	r3, [r7, #0]

    /* Setting the output data rate as 1HZ(1000ms) */
    conf.odr = BMP280_ODR_1000_MS;
 8002230:	2305      	movs	r3, #5
 8002232:	70bb      	strb	r3, [r7, #2]
    rslt = bmp280_set_config(&conf, &bmp);
 8002234:	463b      	mov	r3, r7
 8002236:	4909      	ldr	r1, [pc, #36]	; (800225c <BMP280_init+0x74>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fae1 	bl	8001800 <bmp280_set_config>
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]


    /* Always set the power mode after setting the configuration */
    rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8002242:	4906      	ldr	r1, [pc, #24]	; (800225c <BMP280_init+0x74>)
 8002244:	2003      	movs	r0, #3
 8002246:	f7ff faea 	bl	800181e <bmp280_set_power_mode>
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]


    return rslt;
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000254 	.word	0x20000254
 8002260:	0800232d 	.word	0x0800232d
 8002264:	08002385 	.word	0x08002385
 8002268:	08002345 	.word	0x08002345

0800226c <BMP280_TempRead>:
/*
 * Funkcja odczytuje temperature z czujnika i przypisuje je do zmiennej globalnej
 * Zwracana wartość rslt to kod błędu przy złym odczycie
 */
int8_t BMP280_TempRead(double *temperature) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	 int8_t errGet = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	77fb      	strb	r3, [r7, #31]
	 int8_t errComp = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	77bb      	strb	r3, [r7, #30]
     struct bmp280_uncomp_data ucomp_data;
     double temp;
	 /* Pobranie danych z czujnika */
     if(errGet = bmp280_get_uncomp_data(&ucomp_data, &bmp) != BMP280_OK) {
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <BMP280_TempRead+0x78>)
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff faea 	bl	800185c <bmp280_get_uncomp_data>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	77fb      	strb	r3, [r7, #31]
 8002296:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <BMP280_TempRead+0x38>
    	 return errGet;
 800229e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a2:	e01b      	b.n	80022dc <BMP280_TempRead+0x70>
     }

     /* Konwersja na liczby zmiennoprzecinkowe */
      if(errComp = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp) != BMP280_OK){
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <BMP280_TempRead+0x78>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb23 	bl	80018f8 <bmp280_get_comp_temp_double>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	77bb      	strb	r3, [r7, #30]
 80022c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <BMP280_TempRead+0x62>
    	  return errComp;
 80022c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022cc:	e006      	b.n	80022dc <BMP280_TempRead+0x70>
      }
     /*przypisanie wartości temperatury do zmiennej globalnej*/
     *temperature = temp;
 80022ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	e9c1 2300 	strd	r2, r3, [r1]
     return errComp;
 80022d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000254 	.word	0x20000254

080022e8 <BMP280_PressRead>:

/*
 * Funkcja odczytuje cisnienie z czujnika i przypisuje je do zmiennej globalnej
 * Zwracana wartość rslt to kod błędu przy złym odczycie
 */
int8_t BMP280_PressRead(double *pressure) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
     struct bmp280_uncomp_data ucomp_data;

     double pres;

	 /* Pobranie danych z czujnika */
     rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <BMP280_PressRead+0x40>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fab0 	bl	800185c <bmp280_get_uncomp_data>
 80022fc:	4603      	mov	r3, r0
 80022fe:	77fb      	strb	r3, [r7, #31]

     /* Konwersja na liczby zmiennoprzecinkowe */
     rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
 8002300:	69b9      	ldr	r1, [r7, #24]
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <BMP280_PressRead+0x40>)
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fbcd 	bl	8001aa8 <bmp280_get_comp_pres_double>
 800230e:	4603      	mov	r3, r0
 8002310:	77fb      	strb	r3, [r7, #31]

     /*przypisanie wartości ciśnienia do zmiennej globalnej*/
     *pressure = pres;
 8002312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	e9c1 2300 	strd	r2, r3, [r1]

     return rslt;
 800231c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000254 	.word	0x20000254

0800232c <delay_ms>:
 *  @param[in] period_ms  : the required wait time in milliseconds.
 *  @return void.
 *
 */
void delay_ms(uint32_t period_ms)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    /* Implement the delay routine according to the target machine */
	HAL_Delay(period_ms);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 ff41 	bl	80031bc <HAL_Delay>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af04      	add	r7, sp, #16
 800234a:	603a      	str	r2, [r7, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	460b      	mov	r3, r1
 8002354:	71bb      	strb	r3, [r7, #6]
 8002356:	4613      	mov	r3, r2
 8002358:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C write routine according to the target machine. */
	HAL_I2C_Mem_Write(&hi2c1, i2c_addr, reg_addr, 1, reg_data, length, 100);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	b299      	uxth	r1, r3
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	b29a      	uxth	r2, r3
 8002362:	2364      	movs	r3, #100	; 0x64
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <i2c_reg_write+0x3c>)
 8002372:	f001 fbcd 	bl	8003b10 <HAL_I2C_Mem_Write>
    return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000288 	.word	0x20000288

08002384 <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af04      	add	r7, sp, #16
 800238a:	603a      	str	r2, [r7, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	460b      	mov	r3, r1
 8002394:	71bb      	strb	r3, [r7, #6]
 8002396:	4613      	mov	r3, r2
 8002398:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C read routine according to the target machine. */
	HAL_I2C_Mem_Read(&hi2c1, i2c_addr, reg_addr, 1, reg_data, length, 100);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	b299      	uxth	r1, r3
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	2364      	movs	r3, #100	; 0x64
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <i2c_reg_read+0x3c>)
 80023b2:	f001 fca7 	bl	8003d04 <HAL_I2C_Mem_Read>
    return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000288 	.word	0x20000288

080023c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <MX_GPIO_Init+0xf4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a35      	ldr	r2, [pc, #212]	; (80024b8 <MX_GPIO_Init+0xf4>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <MX_GPIO_Init+0xf4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <MX_GPIO_Init+0xf4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <MX_GPIO_Init+0xf4>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <MX_GPIO_Init+0xf4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	21e0      	movs	r1, #224	; 0xe0
 800244e:	481b      	ldr	r0, [pc, #108]	; (80024bc <MX_GPIO_Init+0xf8>)
 8002450:	f001 fa00 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	4819      	ldr	r0, [pc, #100]	; (80024c0 <MX_GPIO_Init+0xfc>)
 800245a:	f001 f9fb 	bl	8003854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800245e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_GPIO_Init+0x100>)
 8002466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4815      	ldr	r0, [pc, #84]	; (80024c8 <MX_GPIO_Init+0x104>)
 8002474:	f001 f86a 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002478:	23e0      	movs	r3, #224	; 0xe0
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	480b      	ldr	r0, [pc, #44]	; (80024bc <MX_GPIO_Init+0xf8>)
 8002490:	f001 f85c 	bl	800354c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002494:	2340      	movs	r3, #64	; 0x40
 8002496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	2301      	movs	r3, #1
 800249a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_GPIO_Init+0xfc>)
 80024ac:	f001 f84e 	bl	800354c <HAL_GPIO_Init>

}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	10210000 	.word	0x10210000
 80024c8:	40020800 	.word	0x40020800

080024cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <MX_I2C1_Init+0x50>)
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <MX_I2C1_Init+0x54>)
 80024d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_I2C1_Init+0x50>)
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <MX_I2C1_Init+0x58>)
 80024da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_I2C1_Init+0x50>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_I2C1_Init+0x50>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_I2C1_Init+0x50>)
 80024ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <MX_I2C1_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_I2C1_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <MX_I2C1_Init+0x50>)
 800250a:	f001 f9bd 	bl	8003888 <HAL_I2C_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002514:	f000 f9ba 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000288 	.word	0x20000288
 8002520:	40005400 	.word	0x40005400
 8002524:	000186a0 	.word	0x000186a0

08002528 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_I2C_MspInit+0x84>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d12c      	bne.n	80025a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_I2C_MspInit+0x88>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_I2C_MspInit+0x88>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <HAL_I2C_MspInit+0x88>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002566:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256c:	2312      	movs	r3, #18
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002570:	2301      	movs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002578:	2304      	movs	r3, #4
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	480c      	ldr	r0, [pc, #48]	; (80025b4 <HAL_I2C_MspInit+0x8c>)
 8002584:	f000 ffe2 	bl	800354c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_I2C_MspInit+0x88>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_I2C_MspInit+0x88>)
 8002592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002596:	6413      	str	r3, [r2, #64]	; 0x40
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_I2C_MspInit+0x88>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40005400 	.word	0x40005400
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020400 	.word	0x40020400

080025b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025bc:	f000 fd8c 	bl	80030d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025c0:	f000 f8fa 	bl	80027b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025c4:	f7ff fefe 	bl	80023c4 <MX_GPIO_Init>
	MX_SPI2_Init();
 80025c8:	f000 faa6 	bl	8002b18 <MX_SPI2_Init>
	MX_I2C1_Init();
 80025cc:	f7ff ff7e 	bl	80024cc <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80025d0:	f000 fcde 	bl	8002f90 <MX_USART2_UART_Init>
	MX_TIM10_Init();
 80025d4:	f000 fc7c 	bl	8002ed0 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize TIMER10 */
	HAL_TIM_Base_Start_IT(&htim10);
 80025d8:	486c      	ldr	r0, [pc, #432]	; (800278c <main+0x1d4>)
 80025da:	f003 f869 	bl	80056b0 <HAL_TIM_Base_Start_IT>
	/*Initialize BMP280 sensor*/

	BMP280_init();
 80025de:	f7ff fe03 	bl	80021e8 <BMP280_init>
	/*Initialize and test TFT display ST7735*/
	ST7735_Init(0);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fd8c 	bl	8001100 <ST7735_Init>
	fillScreen(BLACK);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fc7d 	bl	8000ee8 <fillScreen>
	ST7735_SetRotation(3);
 80025ee:	2003      	movs	r0, #3
 80025f0:	f7fe fdb2 	bl	8001158 <ST7735_SetRotation>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 80025f4:	4866      	ldr	r0, [pc, #408]	; (8002790 <main+0x1d8>)
 80025f6:	f7ff fe39 	bl	800226c <BMP280_TempRead>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <main+0x1dc>)
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	4b64      	ldr	r3, [pc, #400]	; (8002794 <main+0x1dc>)
 8002604:	f993 3000 	ldrsb.w	r3, [r3]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 809f 	bne.w	800274c <main+0x194>
				BMP280_PressRead(&pres)) == BMP280_OK) {
 800260e:	4862      	ldr	r0, [pc, #392]	; (8002798 <main+0x1e0>)
 8002610:	f7ff fe6a 	bl	80022e8 <BMP280_PressRead>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 8002618:	4b60      	ldr	r3, [pc, #384]	; (800279c <main+0x1e4>)
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	4b5f      	ldr	r3, [pc, #380]	; (800279c <main+0x1e4>)
 800261e:	f993 3000 	ldrsb.w	r3, [r3]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8092 	bne.w	800274c <main+0x194>

			//jeśli funkcje nie zwróciły błędów zostanie wykonana ta część funkcji- BMP280_OK = 0;
			if (temp > TEMP_MAX) {
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <main+0x1d8>)
 800262a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <main+0x1e8>)
 8002634:	f7fe fa78 	bl	8000b28 <__aeabi_dcmpgt>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d01d      	beq.n	800267a <main+0xc2>
				if (refreshScreen1 == 0) {
 800263e:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <main+0x1ec>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <main+0xae>
					refreshScreen1 = 1;
 8002646:	4b57      	ldr	r3, [pc, #348]	; (80027a4 <main+0x1ec>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 0;
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <main+0x1f0>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 0;
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <main+0x1f4>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <main+0x1f8>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
					fillScreen(RED);
 800265e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002662:	f7fe fc41 	bl	8000ee8 <fillScreen>
				}
				writeTempHighWarn(temp);
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <main+0x1d8>)
 8002668:	ed93 7b00 	vldr	d7, [r3]
 800266c:	eeb0 0a47 	vmov.f32	s0, s14
 8002670:	eef0 0a67 	vmov.f32	s1, s15
 8002674:	f000 f9ea 	bl	8002a4c <writeTempHighWarn>
			if (temp > TEMP_MAX) {
 8002678:	e086      	b.n	8002788 <main+0x1d0>
			} else if (temp < TEMP_MIN) {
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <main+0x1d8>)
 800267c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <main+0x1fc>)
 8002686:	f7fe fa31 	bl	8000aec <__aeabi_dcmplt>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01d      	beq.n	80026cc <main+0x114>
				if (refreshScreen2 == 0) {
 8002690:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <main+0x1f0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10f      	bne.n	80026b8 <main+0x100>
					refreshScreen1 = 0;
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <main+0x1ec>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 1;
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <main+0x1f0>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 0;
 80026a4:	4b41      	ldr	r3, [pc, #260]	; (80027ac <main+0x1f4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <main+0x1f8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
					fillScreen(RED);
 80026b0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026b4:	f7fe fc18 	bl	8000ee8 <fillScreen>
				}
				writeTempLowWarn(temp);
 80026b8:	4b35      	ldr	r3, [pc, #212]	; (8002790 <main+0x1d8>)
 80026ba:	ed93 7b00 	vldr	d7, [r3]
 80026be:	eeb0 0a47 	vmov.f32	s0, s14
 80026c2:	eef0 0a67 	vmov.f32	s1, s15
 80026c6:	f000 fa09 	bl	8002adc <writeTempLowWarn>
			if (temp > TEMP_MAX) {
 80026ca:	e05d      	b.n	8002788 <main+0x1d0>
			} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
 80026cc:	4b30      	ldr	r3, [pc, #192]	; (8002790 <main+0x1d8>)
 80026ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <main+0x1fc>)
 80026d8:	f7fe fa26 	bl	8000b28 <__aeabi_dcmpgt>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d100      	bne.n	80026e4 <main+0x12c>
			if (temp > TEMP_MAX) {
 80026e2:	e051      	b.n	8002788 <main+0x1d0>
			} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <main+0x1d8>)
 80026e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <main+0x1e8>)
 80026f0:	f7fe f9fc 	bl	8000aec <__aeabi_dcmplt>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d100      	bne.n	80026fc <main+0x144>
			if (temp > TEMP_MAX) {
 80026fa:	e045      	b.n	8002788 <main+0x1d0>
				if (refreshScreen3 == 0) {
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <main+0x1f4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10e      	bne.n	8002722 <main+0x16a>
					refreshScreen1 = 0;
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <main+0x1ec>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 0;
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <main+0x1f0>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 1;
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <main+0x1f4>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <main+0x1f8>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
					fillScreen(BLACK);
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe fbe3 	bl	8000ee8 <fillScreen>
					//jednokrotne odświeżenie wyświetlacza
				}
				writeMenu();
 8002722:	f000 f901 	bl	8002928 <writeMenu>
				writeTemp(temp);
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <main+0x1d8>)
 8002728:	ed93 7b00 	vldr	d7, [r3]
 800272c:	eeb0 0a47 	vmov.f32	s0, s14
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	f000 f8b0 	bl	8002898 <writeTemp>
				writePress(pres);
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <main+0x1e0>)
 800273a:	ed93 7b00 	vldr	d7, [r3]
 800273e:	eeb0 0a47 	vmov.f32	s0, s14
 8002742:	eef0 0a67 	vmov.f32	s1, s15
 8002746:	f000 f8cb 	bl	80028e0 <writePress>
			if (temp > TEMP_MAX) {
 800274a:	e01d      	b.n	8002788 <main+0x1d0>
			//	printf("Temperatura %f\r\n", temp);

			}
		} else {
			if (refreshScreen4 == 0) {
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <main+0x1f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10e      	bne.n	8002772 <main+0x1ba>
				refreshScreen1 = 0;
 8002754:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <main+0x1ec>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
				refreshScreen2 = 0;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <main+0x1f0>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
				refreshScreen3 = 0;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <main+0x1f4>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
				refreshScreen4 = 1;
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <main+0x1f8>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
				fillScreen(BLACK);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe fbbb 	bl	8000ee8 <fillScreen>
				//jednokrotne odświeżenie wyświetlacza
			}
			errMenu(errTemp, errPres);
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <main+0x1dc>)
 8002774:	f993 3000 	ldrsb.w	r3, [r3]
 8002778:	461a      	mov	r2, r3
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <main+0x1e4>)
 800277c:	f993 3000 	ldrsb.w	r3, [r3]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 f908 	bl	8002998 <errMenu>
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 8002788:	e734      	b.n	80025f4 <main+0x3c>
 800278a:	bf00      	nop
 800278c:	20000364 	.word	0x20000364
 8002790:	20000218 	.word	0x20000218
 8002794:	20000214 	.word	0x20000214
 8002798:	20000220 	.word	0x20000220
 800279c:	20000215 	.word	0x20000215
 80027a0:	403e0000 	.word	0x403e0000
 80027a4:	20000228 	.word	0x20000228
 80027a8:	2000022c 	.word	0x2000022c
 80027ac:	20000230 	.word	0x20000230
 80027b0:	20000234 	.word	0x20000234
 80027b4:	402e0000 	.word	0x402e0000

080027b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b094      	sub	sp, #80	; 0x50
 80027bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	2230      	movs	r2, #48	; 0x30
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 ffca 	bl	8006760 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <SystemClock_Config+0xcc>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <SystemClock_Config+0xcc>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b25      	ldr	r3, [pc, #148]	; (8002884 <SystemClock_Config+0xcc>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <SystemClock_Config+0xd0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002804:	4a20      	ldr	r2, [pc, #128]	; (8002888 <SystemClock_Config+0xd0>)
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <SystemClock_Config+0xd0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002820:	2310      	movs	r3, #16
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002824:	2302      	movs	r3, #2
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002828:	2300      	movs	r3, #0
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800282c:	2308      	movs	r3, #8
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002830:	2354      	movs	r3, #84	; 0x54
 8002832:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002834:	2302      	movs	r3, #2
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002838:	2307      	movs	r3, #7
 800283a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800283c:	f107 0320 	add.w	r3, r7, #32
 8002840:	4618      	mov	r0, r3
 8002842:	f001 ffe1 	bl	8004808 <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x98>
		Error_Handler();
 800284c:	f000 f81e 	bl	800288c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800285c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002860:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fa43 	bl	8004cf8 <HAL_RCC_ClockConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0xc4>
		Error_Handler();
 8002878:	f000 f808 	bl	800288c <Error_Handler>
	}
}
 800287c:	bf00      	nop
 800287e:	3750      	adds	r7, #80	; 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000

0800288c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002890:	b672      	cpsid	i
}
 8002892:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002894:	e7fe      	b.n	8002894 <Error_Handler+0x8>
	...

08002898 <writeTemp>:
char TEMP_BUF[MAX_BUF_SIZE];
char PRES_BUF[MAX_BUF_SIZE];
char ERR_TEMP_BUF[MAX_BUF_SIZE];
char ERR_PRES_BUF[MAX_BUF_SIZE];

void writeTemp(double temperature){
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af04      	add	r7, sp, #16
 800289e:	ed87 0b00 	vstr	d0, [r7]
	sprintf(TEMP_BUF, "%.2f", temperature);
 80028a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a6:	490b      	ldr	r1, [pc, #44]	; (80028d4 <writeTemp+0x3c>)
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <writeTemp+0x40>)
 80028aa:	f004 fbe3 	bl	8007074 <siprintf>
	ST7735_WriteString(50, 16, TEMP_BUF, Font_11x18, GREEN, BLACK);
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <writeTemp+0x44>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	9202      	str	r2, [sp, #8]
 80028b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028b8:	9201      	str	r2, [sp, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	9200      	str	r2, [sp, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <writeTemp+0x40>)
 80028c2:	2110      	movs	r1, #16
 80028c4:	2032      	movs	r0, #50	; 0x32
 80028c6:	f7fe fd3f 	bl	8001348 <ST7735_WriteString>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	080094e8 	.word	0x080094e8
 80028d8:	200002f4 	.word	0x200002f4
 80028dc:	20000008 	.word	0x20000008

080028e0 <writePress>:

void writePress(double pressure){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af04      	add	r7, sp, #16
 80028e6:	ed87 0b00 	vstr	d0, [r7]
    sprintf(PRES_BUF, "%.2f", pressure);
 80028ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ee:	490b      	ldr	r1, [pc, #44]	; (800291c <writePress+0x3c>)
 80028f0:	480b      	ldr	r0, [pc, #44]	; (8002920 <writePress+0x40>)
 80028f2:	f004 fbbf 	bl	8007074 <siprintf>
    ST7735_WriteString(25, 46, PRES_BUF, Font_11x18, GREEN, BLACK);
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <writePress+0x44>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002900:	9201      	str	r2, [sp, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a05      	ldr	r2, [pc, #20]	; (8002920 <writePress+0x40>)
 800290a:	212e      	movs	r1, #46	; 0x2e
 800290c:	2019      	movs	r0, #25
 800290e:	f7fe fd1b 	bl	8001348 <ST7735_WriteString>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	080094e8 	.word	0x080094e8
 8002920:	200002e8 	.word	0x200002e8
 8002924:	20000008 	.word	0x20000008

08002928 <writeMenu>:

void writeMenu(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af04      	add	r7, sp, #16
	ST7735_WriteString(5, 5, "Temperatura [st. C]", Font_7x10, YELLOW,BLACK);
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <writeMenu+0x60>)
 8002930:	2200      	movs	r2, #0
 8002932:	9202      	str	r2, [sp, #8]
 8002934:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002938:	9201      	str	r2, [sp, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	9200      	str	r2, [sp, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a12      	ldr	r2, [pc, #72]	; (800298c <writeMenu+0x64>)
 8002942:	2105      	movs	r1, #5
 8002944:	2005      	movs	r0, #5
 8002946:	f7fe fcff 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Cisnienie [Pa]", Font_7x10, YELLOW,BLACK);
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <writeMenu+0x60>)
 800294c:	2200      	movs	r2, #0
 800294e:	9202      	str	r2, [sp, #8]
 8002950:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002954:	9201      	str	r2, [sp, #4]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	9200      	str	r2, [sp, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <writeMenu+0x68>)
 800295e:	2123      	movs	r1, #35	; 0x23
 8002960:	2005      	movs	r0, #5
 8002962:	f7fe fcf1 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 65, "Stezenie PM10", Font_7x10, YELLOW,BLACK);
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <writeMenu+0x60>)
 8002968:	2200      	movs	r2, #0
 800296a:	9202      	str	r2, [sp, #8]
 800296c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002970:	9201      	str	r2, [sp, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	9200      	str	r2, [sp, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <writeMenu+0x6c>)
 800297a:	2141      	movs	r1, #65	; 0x41
 800297c:	2005      	movs	r0, #5
 800297e:	f7fe fce3 	bl	8001348 <ST7735_WriteString>
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000000 	.word	0x20000000
 800298c:	080094f0 	.word	0x080094f0
 8002990:	08009504 	.word	0x08009504
 8002994:	08009514 	.word	0x08009514

08002998 <errMenu>:

void errMenu(int errTemp, int errPres){
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af04      	add	r7, sp, #16
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	sprintf(ERR_TEMP_BUF, "%d", errTemp);
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4922      	ldr	r1, [pc, #136]	; (8002a30 <errMenu+0x98>)
 80029a6:	4823      	ldr	r0, [pc, #140]	; (8002a34 <errMenu+0x9c>)
 80029a8:	f004 fb64 	bl	8007074 <siprintf>
	sprintf(ERR_PRES_BUF, "%d", errPres);
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4920      	ldr	r1, [pc, #128]	; (8002a30 <errMenu+0x98>)
 80029b0:	4821      	ldr	r0, [pc, #132]	; (8002a38 <errMenu+0xa0>)
 80029b2:	f004 fb5f 	bl	8007074 <siprintf>
	ST7735_WriteString(0, 10, "Blad odczytu czujnika BMP280 - kody bledow:", Font_7x10, YELLOW,BLACK);
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <errMenu+0xa4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	9202      	str	r2, [sp, #8]
 80029bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80029c0:	9201      	str	r2, [sp, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	9200      	str	r2, [sp, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <errMenu+0xa8>)
 80029ca:	210a      	movs	r1, #10
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fcbb 	bl	8001348 <ST7735_WriteString>

	ST7735_WriteString(65, 30, ERR_TEMP_BUF, Font_16x26, RED, BLACK);
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <errMenu+0xac>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	9202      	str	r2, [sp, #8]
 80029d8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029dc:	9201      	str	r2, [sp, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	9200      	str	r2, [sp, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <errMenu+0x9c>)
 80029e6:	211e      	movs	r1, #30
 80029e8:	2041      	movs	r0, #65	; 0x41
 80029ea:	f7fe fcad 	bl	8001348 <ST7735_WriteString>
    ST7735_WriteString(65, 56, ERR_PRES_BUF, Font_16x26, RED, BLACK);
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <errMenu+0xac>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	9202      	str	r2, [sp, #8]
 80029f4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029f8:	9201      	str	r2, [sp, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <errMenu+0xa0>)
 8002a02:	2138      	movs	r1, #56	; 0x38
 8002a04:	2041      	movs	r0, #65	; 0x41
 8002a06:	f7fe fc9f 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(0, 80, "Sprawdz czujnik oraz  zresetuj urzadzenie", Font_7x10, YELLOW,BLACK);
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <errMenu+0xa4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	9202      	str	r2, [sp, #8]
 8002a10:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a14:	9201      	str	r2, [sp, #4]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	9200      	str	r2, [sp, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <errMenu+0xb0>)
 8002a1e:	2150      	movs	r1, #80	; 0x50
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe fc91 	bl	8001348 <ST7735_WriteString>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	08009524 	.word	0x08009524
 8002a34:	200002dc 	.word	0x200002dc
 8002a38:	20000300 	.word	0x20000300
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	08009528 	.word	0x08009528
 8002a44:	20000010 	.word	0x20000010
 8002a48:	08009554 	.word	0x08009554

08002a4c <writeTempHighWarn>:


void writeTempHighWarn(double temperature){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af04      	add	r7, sp, #16
 8002a52:	ed87 0b00 	vstr	d0, [r7]
	ST7735_WriteString(2, 5, "Wywietrz miejsce pracy", Font_7x10, BLACK,RED);
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <writeTempHighWarn+0x78>)
 8002a58:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a5c:	9202      	str	r2, [sp, #8]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	9200      	str	r2, [sp, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <writeTempHighWarn+0x7c>)
 8002a6a:	2105      	movs	r1, #5
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f7fe fc6b 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Aktualna temperatura:", Font_7x10, YELLOW ,RED);
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <writeTempHighWarn+0x78>)
 8002a74:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a78:	9202      	str	r2, [sp, #8]
 8002a7a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a7e:	9201      	str	r2, [sp, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	9200      	str	r2, [sp, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a11      	ldr	r2, [pc, #68]	; (8002acc <writeTempHighWarn+0x80>)
 8002a88:	2114      	movs	r1, #20
 8002a8a:	2005      	movs	r0, #5
 8002a8c:	f7fe fc5c 	bl	8001348 <ST7735_WriteString>
	sprintf(TEMP_BUF, "%.2f", temperature);
 8002a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <writeTempHighWarn+0x84>)
 8002a96:	480f      	ldr	r0, [pc, #60]	; (8002ad4 <writeTempHighWarn+0x88>)
 8002a98:	f004 faec 	bl	8007074 <siprintf>
	ST7735_WriteString(35, 35, TEMP_BUF, Font_16x26, GREEN, RED);
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <writeTempHighWarn+0x8c>)
 8002a9e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002aa2:	9202      	str	r2, [sp, #8]
 8002aa4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002aa8:	9201      	str	r2, [sp, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	9200      	str	r2, [sp, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <writeTempHighWarn+0x88>)
 8002ab2:	2123      	movs	r1, #35	; 0x23
 8002ab4:	2023      	movs	r0, #35	; 0x23
 8002ab6:	f7fe fc47 	bl	8001348 <ST7735_WriteString>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	08009580 	.word	0x08009580
 8002acc:	08009598 	.word	0x08009598
 8002ad0:	080094e8 	.word	0x080094e8
 8002ad4:	200002f4 	.word	0x200002f4
 8002ad8:	20000010 	.word	0x20000010

08002adc <writeTempLowWarn>:
void writeTempLowWarn(double temperatures){
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	ed87 0b00 	vstr	d0, [r7]

}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <__io_putchar>:
 *      Author: KUBA
 */
#include "usart.h"

int __io_putchar(int ch)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002afc:	1d39      	adds	r1, r7, #4
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	2201      	movs	r2, #1
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <__io_putchar+0x20>)
 8002b06:	f003 f846 	bl	8005b96 <HAL_UART_Transmit>
    return 1;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200003ac 	.word	0x200003ac

08002b18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <MX_SPI2_Init+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b64:	220a      	movs	r2, #10
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <MX_SPI2_Init+0x64>)
 8002b6a:	f002 fac1 	bl	80050f0 <HAL_SPI_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b74:	f7ff fe8a 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000030c 	.word	0x2000030c
 8002b80:	40003800 	.word	0x40003800

08002b84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_SPI_MspInit+0xc0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d14a      	bne.n	8002c3c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_SPI_MspInit+0xc4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <HAL_SPI_MspInit+0xc8>)
 8002c16:	f000 fc99 	bl	800354c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <HAL_SPI_MspInit+0xcc>)
 8002c38:	f000 fc88 	bl	800354c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40003800 	.word	0x40003800
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40020400 	.word	0x40020400

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c92:	2007      	movs	r0, #7
 8002c94:	f000 fb86 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <NMI_Handler+0x4>

08002caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <HardFault_Handler+0x4>

08002cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <MemManage_Handler+0x4>

08002cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <BusFault_Handler+0x4>

08002cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <UsageFault_Handler+0x4>

08002cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf0:	f000 fa44 	bl	800317c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002cfe:	f002 fd39 	bl	8005774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000364 	.word	0x20000364

08002d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <USART2_IRQHandler+0x10>)
 8002d12:	f002 ffd3 	bl	8005cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200003ac 	.word	0x200003ac

08002d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
	return 1;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_kill>:

int _kill(int pid, int sig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d3a:	f003 fce7 	bl	800670c <__errno>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2216      	movs	r2, #22
 8002d42:	601a      	str	r2, [r3, #0]
	return -1;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_exit>:

void _exit (int status)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ffe7 	bl	8002d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d62:	e7fe      	b.n	8002d62 <_exit+0x12>

08002d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e00a      	b.n	8002d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d76:	f3af 8000 	nop.w
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	60ba      	str	r2, [r7, #8]
 8002d82:	b2ca      	uxtb	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbf0      	blt.n	8002d76 <_read+0x12>
	}

return len;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e009      	b.n	8002dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	60ba      	str	r2, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fe9b 	bl	8002af4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	dbf1      	blt.n	8002db0 <_write+0x12>
	}
	return len;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_close>:

int _close(int file)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_isatty>:

int _isatty(int file)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	return 1;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <_sbrk+0x5c>)
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <_sbrk+0x60>)
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <_sbrk+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <_sbrk+0x64>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <_sbrk+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d207      	bcs.n	8002e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e70:	f003 fc4c 	bl	800670c <__errno>
 8002e74:	4603      	mov	r3, r0
 8002e76:	220c      	movs	r2, #12
 8002e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	e009      	b.n	8002e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <_sbrk+0x64>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e86:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <_sbrk+0x64>)
 8002e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20018000 	.word	0x20018000
 8002ea0:	00000400 	.word	0x00000400
 8002ea4:	20000238 	.word	0x20000238
 8002ea8:	20000408 	.word	0x20000408

08002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <MX_TIM10_Init+0x44>)
 8002ed8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002edc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ee0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002eea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002eee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <MX_TIM10_Init+0x40>)
 8002efe:	f002 fb87 	bl	8005610 <HAL_TIM_Base_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002f08:	f7ff fcc0 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000364 	.word	0x20000364
 8002f14:	40014400 	.word	0x40014400

08002f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_TIM_Base_MspInit+0x48>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d115      	bne.n	8002f56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_TIM_Base_MspInit+0x4c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <HAL_TIM_Base_MspInit+0x4c>)
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_TIM_Base_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2019      	movs	r0, #25
 8002f4c:	f000 fa35 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f50:	2019      	movs	r0, #25
 8002f52:	f000 fa4e 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40023800 	.word	0x40023800

08002f68 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM10_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // Jeżeli przerwanie pochodzi od timera 10
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d102      	bne.n	8002f80 <HAL_TIM_PeriodElapsedCallback+0x18>
			printf("siema");
 8002f7a:	4804      	ldr	r0, [pc, #16]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002f7c:	f004 f862 	bl	8007044 <iprintf>
		}
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40014400 	.word	0x40014400
 8002f8c:	080095b0 	.word	0x080095b0

08002f90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <MX_USART2_UART_Init+0x50>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <MX_USART2_UART_Init+0x4c>)
 8002fc8:	f002 fd98 	bl	8005afc <HAL_UART_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fd2:	f7ff fc5b 	bl	800288c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200003ac 	.word	0x200003ac
 8002fe0:	40004400 	.word	0x40004400

08002fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_UART_MspInit+0x94>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d133      	bne.n	800306e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_UART_MspInit+0x98>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_UART_MspInit+0x98>)
 8003010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_UART_MspInit+0x98>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_UART_MspInit+0x98>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a14      	ldr	r2, [pc, #80]	; (800307c <HAL_UART_MspInit+0x98>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_UART_MspInit+0x98>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800303e:	230c      	movs	r3, #12
 8003040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800304e:	2307      	movs	r3, #7
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <HAL_UART_MspInit+0x9c>)
 800305a:	f000 fa77 	bl	800354c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	2026      	movs	r0, #38	; 0x26
 8003064:	f000 f9a9 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003068:	2026      	movs	r0, #38	; 0x26
 800306a:	f000 f9c2 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40004400 	.word	0x40004400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020000 	.word	0x40020000

08003084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003088:	480d      	ldr	r0, [pc, #52]	; (80030c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800308a:	490e      	ldr	r1, [pc, #56]	; (80030c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003090:	e002      	b.n	8003098 <LoopCopyDataInit>

08003092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003096:	3304      	adds	r3, #4

08003098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800309c:	d3f9      	bcc.n	8003092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030a0:	4c0b      	ldr	r4, [pc, #44]	; (80030d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a4:	e001      	b.n	80030aa <LoopFillZerobss>

080030a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030a8:	3204      	adds	r2, #4

080030aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ac:	d3fb      	bcc.n	80030a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030ae:	f7ff fefd 	bl	8002eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030b2:	f003 fb31 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030b6:	f7ff fa7f 	bl	80025b8 <main>
  bx  lr    
 80030ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80030c8:	0800c24c 	.word	0x0800c24c
  ldr r2, =_sbss
 80030cc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80030d0:	20000404 	.word	0x20000404

080030d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d4:	e7fe      	b.n	80030d4 <ADC_IRQHandler>
	...

080030d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_Init+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_Init+0x40>)
 80030e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_Init+0x40>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_Init+0x40>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f94f 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	2000      	movs	r0, #0
 8003108:	f000 f808 	bl	800311c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7ff fda2 	bl	8002c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_InitTick+0x54>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_InitTick+0x58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003132:	fbb3 f3f1 	udiv	r3, r3, r1
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f967 	bl	800340e <HAL_SYSTICK_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00e      	b.n	8003168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d80a      	bhi.n	8003166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003150:	2200      	movs	r2, #0
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f000 f92f 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800315c:	4a06      	ldr	r2, [pc, #24]	; (8003178 <HAL_InitTick+0x5c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000018 	.word	0x20000018
 8003174:	20000020 	.word	0x20000020
 8003178:	2000001c 	.word	0x2000001c

0800317c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_IncTick+0x20>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_IncTick+0x24>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_IncTick+0x24>)
 800318e:	6013      	str	r3, [r2, #0]
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000020 	.word	0x20000020
 80031a0:	200003f0 	.word	0x200003f0

080031a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return uwTick;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_GetTick+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	200003f0 	.word	0x200003f0

080031bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c4:	f7ff ffee 	bl	80031a4 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d005      	beq.n	80031e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_Delay+0x44>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031e2:	bf00      	nop
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d8f7      	bhi.n	80031e4 <HAL_Delay+0x28>
  {
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000020 	.word	0x20000020

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff feb6 	bl	80031a4 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d008      	beq.n	8003458 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e052      	b.n	80034fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0216 	bic.w	r2, r2, #22
 8003466:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003476:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d103      	bne.n	8003488 <HAL_DMA_Abort+0x62>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0208 	bic.w	r2, r2, #8
 8003496:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a8:	e013      	b.n	80034d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034aa:	f7ff fe7b 	bl	80031a4 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d90c      	bls.n	80034d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e015      	b.n	80034fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e4      	bne.n	80034aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	223f      	movs	r2, #63	; 0x3f
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d004      	beq.n	8003524 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e00c      	b.n	800353e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2205      	movs	r2, #5
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	e159      	b.n	800381c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003568:	2201      	movs	r2, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	429a      	cmp	r2, r3
 8003582:	f040 8148 	bne.w	8003816 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d005      	beq.n	800359e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359a:	2b02      	cmp	r3, #2
 800359c:	d130      	bne.n	8003600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035d4:	2201      	movs	r2, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 0201 	and.w	r2, r3, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b03      	cmp	r3, #3
 800360a:	d017      	beq.n	800363c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d123      	bne.n	8003690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	08da      	lsrs	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3208      	adds	r2, #8
 8003650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	220f      	movs	r2, #15
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	08da      	lsrs	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3208      	adds	r2, #8
 800368a:	69b9      	ldr	r1, [r7, #24]
 800368c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	2203      	movs	r2, #3
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0203 	and.w	r2, r3, #3
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a2 	beq.w	8003816 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b57      	ldr	r3, [pc, #348]	; (8003834 <HAL_GPIO_Init+0x2e8>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_GPIO_Init+0x2e8>)
 80036dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e0:	6453      	str	r3, [r2, #68]	; 0x44
 80036e2:	4b54      	ldr	r3, [pc, #336]	; (8003834 <HAL_GPIO_Init+0x2e8>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ee:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_GPIO_Init+0x2ec>)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a49      	ldr	r2, [pc, #292]	; (800383c <HAL_GPIO_Init+0x2f0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d019      	beq.n	800374e <HAL_GPIO_Init+0x202>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a48      	ldr	r2, [pc, #288]	; (8003840 <HAL_GPIO_Init+0x2f4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_GPIO_Init+0x1fe>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_GPIO_Init+0x2f8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00d      	beq.n	8003746 <HAL_GPIO_Init+0x1fa>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a46      	ldr	r2, [pc, #280]	; (8003848 <HAL_GPIO_Init+0x2fc>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <HAL_GPIO_Init+0x1f6>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a45      	ldr	r2, [pc, #276]	; (800384c <HAL_GPIO_Init+0x300>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_GPIO_Init+0x1f2>
 800373a:	2304      	movs	r3, #4
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x204>
 800373e:	2307      	movs	r3, #7
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x204>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x204>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x204>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x204>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	; (8003838 <HAL_GPIO_Init+0x2ec>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800376e:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_GPIO_Init+0x304>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003792:	4a2f      	ldr	r2, [pc, #188]	; (8003850 <HAL_GPIO_Init+0x304>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003798:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_GPIO_Init+0x304>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_GPIO_Init+0x304>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c2:	4b23      	ldr	r3, [pc, #140]	; (8003850 <HAL_GPIO_Init+0x304>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037e6:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <HAL_GPIO_Init+0x304>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_GPIO_Init+0x304>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003810:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <HAL_GPIO_Init+0x304>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f aea2 	bls.w	8003568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40013c00 	.word	0x40013c00

08003854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
 8003860:	4613      	mov	r3, r2
 8003862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003864:	787b      	ldrb	r3, [r7, #1]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003870:	e003      	b.n	800387a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	619a      	str	r2, [r3, #24]
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e12b      	b.n	8003af2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe fe3a 	bl	8002528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038ec:	f001 fbd8 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 80038f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a81      	ldr	r2, [pc, #516]	; (8003afc <HAL_I2C_Init+0x274>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d807      	bhi.n	800390c <HAL_I2C_Init+0x84>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a80      	ldr	r2, [pc, #512]	; (8003b00 <HAL_I2C_Init+0x278>)
 8003900:	4293      	cmp	r3, r2
 8003902:	bf94      	ite	ls
 8003904:	2301      	movls	r3, #1
 8003906:	2300      	movhi	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e006      	b.n	800391a <HAL_I2C_Init+0x92>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4a7d      	ldr	r2, [pc, #500]	; (8003b04 <HAL_I2C_Init+0x27c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	bf94      	ite	ls
 8003914:	2301      	movls	r3, #1
 8003916:	2300      	movhi	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0e7      	b.n	8003af2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a78      	ldr	r2, [pc, #480]	; (8003b08 <HAL_I2C_Init+0x280>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	0c9b      	lsrs	r3, r3, #18
 800392c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a6a      	ldr	r2, [pc, #424]	; (8003afc <HAL_I2C_Init+0x274>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d802      	bhi.n	800395c <HAL_I2C_Init+0xd4>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3301      	adds	r3, #1
 800395a:	e009      	b.n	8003970 <HAL_I2C_Init+0xe8>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	4a69      	ldr	r2, [pc, #420]	; (8003b0c <HAL_I2C_Init+0x284>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	099b      	lsrs	r3, r3, #6
 800396e:	3301      	adds	r3, #1
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003982:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	495c      	ldr	r1, [pc, #368]	; (8003afc <HAL_I2C_Init+0x274>)
 800398c:	428b      	cmp	r3, r1
 800398e:	d819      	bhi.n	80039c4 <HAL_I2C_Init+0x13c>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e59      	subs	r1, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fbb1 f3f3 	udiv	r3, r1, r3
 800399e:	1c59      	adds	r1, r3, #1
 80039a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039a4:	400b      	ands	r3, r1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <HAL_I2C_Init+0x138>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e59      	subs	r1, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b8:	3301      	adds	r3, #1
 80039ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039be:	e051      	b.n	8003a64 <HAL_I2C_Init+0x1dc>
 80039c0:	2304      	movs	r3, #4
 80039c2:	e04f      	b.n	8003a64 <HAL_I2C_Init+0x1dc>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d111      	bne.n	80039f0 <HAL_I2C_Init+0x168>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e58      	subs	r0, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e012      	b.n	8003a16 <HAL_I2C_Init+0x18e>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	0099      	lsls	r1, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Init+0x196>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e022      	b.n	8003a64 <HAL_I2C_Init+0x1dc>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10e      	bne.n	8003a44 <HAL_I2C_Init+0x1bc>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1e58      	subs	r0, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	440b      	add	r3, r1
 8003a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a42:	e00f      	b.n	8003a64 <HAL_I2C_Init+0x1dc>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	0099      	lsls	r1, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	6809      	ldr	r1, [r1, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6911      	ldr	r1, [r2, #16]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68d2      	ldr	r2, [r2, #12]
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	000186a0 	.word	0x000186a0
 8003b00:	001e847f 	.word	0x001e847f
 8003b04:	003d08ff 	.word	0x003d08ff
 8003b08:	431bde83 	.word	0x431bde83
 8003b0c:	10624dd3 	.word	0x10624dd3

08003b10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	460b      	mov	r3, r1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2a:	f7ff fb3b 	bl	80031a4 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	f040 80d9 	bne.w	8003cf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2319      	movs	r3, #25
 8003b44:	2201      	movs	r2, #1
 8003b46:	496d      	ldr	r1, [pc, #436]	; (8003cfc <HAL_I2C_Mem_Write+0x1ec>)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fc7f 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0cc      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_I2C_Mem_Write+0x56>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0c5      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1e2>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d007      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2221      	movs	r2, #33	; 0x21
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_I2C_Mem_Write+0x1f0>)
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bce:	88f8      	ldrh	r0, [r7, #6]
 8003bd0:	893a      	ldrh	r2, [r7, #8]
 8003bd2:	8979      	ldrh	r1, [r7, #10]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4603      	mov	r3, r0
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fab6 	bl	8004150 <I2C_RequestMemoryWrite>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d052      	beq.n	8003c90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e081      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fd00 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d11b      	bne.n	8003c90 <HAL_I2C_Mem_Write+0x180>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1aa      	bne.n	8003bee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 fcec 	bl	800467a <I2C_WaitOnBTFFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d107      	bne.n	8003cc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e016      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cf0:	2302      	movs	r3, #2
  }
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	00100002 	.word	0x00100002
 8003d00:	ffff0000 	.word	0xffff0000

08003d04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	817b      	strh	r3, [r7, #10]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d1e:	f7ff fa41 	bl	80031a4 <HAL_GetTick>
 8003d22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	f040 8208 	bne.w	8004142 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2319      	movs	r3, #25
 8003d38:	2201      	movs	r2, #1
 8003d3a:	497b      	ldr	r1, [pc, #492]	; (8003f28 <HAL_I2C_Mem_Read+0x224>)
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fb85 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e1fb      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Mem_Read+0x56>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e1f4      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d007      	beq.n	8003d80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2222      	movs	r2, #34	; 0x22
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2240      	movs	r2, #64	; 0x40
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_I2C_Mem_Read+0x228>)
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc2:	88f8      	ldrh	r0, [r7, #6]
 8003dc4:	893a      	ldrh	r2, [r7, #8]
 8003dc6:	8979      	ldrh	r1, [r7, #10]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fa52 	bl	800427c <I2C_RequestMemoryRead>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1b0      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	623b      	str	r3, [r7, #32]
 8003dfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e184      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11b      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e164      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d11b      	bne.n	8003e92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	e144      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ea8:	e138      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	f200 80f1 	bhi.w	8004096 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d123      	bne.n	8003f04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fc1b 	bl	80046fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e139      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f02:	e10b      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d14e      	bne.n	8003faa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	2200      	movs	r2, #0
 8003f14:	4906      	ldr	r1, [pc, #24]	; (8003f30 <HAL_I2C_Mem_Read+0x22c>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fa98 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e10e      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
 8003f26:	bf00      	nop
 8003f28:	00100002 	.word	0x00100002
 8003f2c:	ffff0000 	.word	0xffff0000
 8003f30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fa8:	e0b8      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4966      	ldr	r1, [pc, #408]	; (800414c <HAL_I2C_Mem_Read+0x448>)
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fa49 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0bf      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	2200      	movs	r2, #0
 800400e:	494f      	ldr	r1, [pc, #316]	; (800414c <HAL_I2C_Mem_Read+0x448>)
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fa1b 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e091      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004094:	e042      	b.n	800411c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fb2e 	bl	80046fc <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e04c      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d118      	bne.n	800411c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f aec2 	bne.w	8003eaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3728      	adds	r7, #40	; 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	00010004 	.word	0x00010004

08004150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4603      	mov	r3, r0
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	460b      	mov	r3, r1
 8004164:	813b      	strh	r3, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2200      	movs	r2, #0
 8004182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f960 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a0:	d103      	bne.n	80041aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e05f      	b.n	800426e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	6a3a      	ldr	r2, [r7, #32]
 80041c2:	492d      	ldr	r1, [pc, #180]	; (8004278 <I2C_RequestMemoryWrite+0x128>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f998 	bl	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e04c      	b.n	800426e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	6a39      	ldr	r1, [r7, #32]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fa02 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d107      	bne.n	8004212 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e02b      	b.n	800426e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]
 8004226:	e021      	b.n	800426c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004228:	893b      	ldrh	r3, [r7, #8]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b29b      	uxth	r3, r3
 800422e:	b2da      	uxtb	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	6a39      	ldr	r1, [r7, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f9dc 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b04      	cmp	r3, #4
 800424c:	d107      	bne.n	800425e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e005      	b.n	800426e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004262:	893b      	ldrh	r3, [r7, #8]
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	00010002 	.word	0x00010002

0800427c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4603      	mov	r3, r0
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	460b      	mov	r3, r1
 8004290:	813b      	strh	r3, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	2200      	movs	r2, #0
 80042be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8c2 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042dc:	d103      	bne.n	80042e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0aa      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ea:	897b      	ldrh	r3, [r7, #10]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	4952      	ldr	r1, [pc, #328]	; (8004448 <I2C_RequestMemoryRead+0x1cc>)
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f8fa 	bl	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e097      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	6a39      	ldr	r1, [r7, #32]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f964 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b04      	cmp	r3, #4
 800433c:	d107      	bne.n	800434e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e076      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e021      	b.n	80043a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	6a39      	ldr	r1, [r7, #32]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f93e 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b04      	cmp	r3, #4
 8004388:	d107      	bne.n	800439a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e050      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800439e:	893b      	ldrh	r3, [r7, #8]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	6a39      	ldr	r1, [r7, #32]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f923 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d107      	bne.n	80043d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e035      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f82b 	bl	800444c <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440a:	d103      	bne.n	8004414 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e013      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004418:	897b      	ldrh	r3, [r7, #10]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	6a3a      	ldr	r2, [r7, #32]
 800442c:	4906      	ldr	r1, [pc, #24]	; (8004448 <I2C_RequestMemoryRead+0x1cc>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f863 	bl	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	00010002 	.word	0x00010002

0800444c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800445c:	e025      	b.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d021      	beq.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fe fe9d 	bl	80031a4 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e023      	b.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d10d      	bne.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	43da      	mvns	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	e00c      	b.n	80044ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	43da      	mvns	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d0b6      	beq.n	800445e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004508:	e051      	b.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004518:	d123      	bne.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004528:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004532:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e046      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d021      	beq.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fe fe1b 	bl	80031a4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d116      	bne.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f043 0220 	orr.w	r2, r3, #32
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e020      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10c      	bne.n	80045d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e00b      	b.n	80045ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	43da      	mvns	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4013      	ands	r3, r2
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d18d      	bne.n	800450a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004604:	e02d      	b.n	8004662 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8ce 	bl	80047a8 <I2C_IsAcknowledgeFailed>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e02d      	b.n	8004672 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d021      	beq.n	8004662 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fe fdc1 	bl	80031a4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d116      	bne.n	8004662 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0220 	orr.w	r2, r3, #32
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e007      	b.n	8004672 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	2b80      	cmp	r3, #128	; 0x80
 800466e:	d1ca      	bne.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004686:	e02d      	b.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f88d 	bl	80047a8 <I2C_IsAcknowledgeFailed>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e02d      	b.n	80046f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d021      	beq.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fe fd80 	bl	80031a4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d1ca      	bne.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004708:	e042      	b.n	8004790 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b10      	cmp	r3, #16
 8004716:	d119      	bne.n	800474c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0210 	mvn.w	r2, #16
 8004720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e029      	b.n	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474c:	f7fe fd2a 	bl	80031a4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d116      	bne.n	8004790 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e007      	b.n	80047a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d1b5      	bne.n	800470a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047be:	d11b      	bne.n	80047f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f043 0204 	orr.w	r2, r3, #4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
	...

08004808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e264      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d075      	beq.n	8004912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	4ba3      	ldr	r3, [pc, #652]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d00c      	beq.n	800484c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004832:	4ba0      	ldr	r3, [pc, #640]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483a:	2b08      	cmp	r3, #8
 800483c:	d112      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483e:	4b9d      	ldr	r3, [pc, #628]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484a:	d10b      	bne.n	8004864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	4b99      	ldr	r3, [pc, #612]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05b      	beq.n	8004910 <HAL_RCC_OscConfig+0x108>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d157      	bne.n	8004910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e23f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d106      	bne.n	800487c <HAL_RCC_OscConfig+0x74>
 800486e:	4b91      	ldr	r3, [pc, #580]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a90      	ldr	r2, [pc, #576]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e01d      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x98>
 8004886:	4b8b      	ldr	r3, [pc, #556]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a8a      	ldr	r2, [pc, #552]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	4b88      	ldr	r3, [pc, #544]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a87      	ldr	r2, [pc, #540]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e00b      	b.n	80048b8 <HAL_RCC_OscConfig+0xb0>
 80048a0:	4b84      	ldr	r3, [pc, #528]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a83      	ldr	r2, [pc, #524]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b81      	ldr	r3, [pc, #516]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a80      	ldr	r2, [pc, #512]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80048b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d013      	beq.n	80048e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fe fc70 	bl	80031a4 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fe fc6c 	bl	80031a4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e204      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b76      	ldr	r3, [pc, #472]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0xc0>
 80048e6:	e014      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe fc5c 	bl	80031a4 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fe fc58 	bl	80031a4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1f0      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004902:	4b6c      	ldr	r3, [pc, #432]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0xe8>
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d063      	beq.n	80049e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	4b65      	ldr	r3, [pc, #404]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492a:	4b62      	ldr	r3, [pc, #392]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004932:	2b08      	cmp	r3, #8
 8004934:	d11c      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004936:	4b5f      	ldr	r3, [pc, #380]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004942:	4b5c      	ldr	r3, [pc, #368]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e1c4      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b56      	ldr	r3, [pc, #344]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4952      	ldr	r1, [pc, #328]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496e:	e03a      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004978:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <HAL_RCC_OscConfig+0x2b0>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7fe fc11 	bl	80031a4 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004986:	f7fe fc0d 	bl	80031a4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1a5      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004998:	4b46      	ldr	r3, [pc, #280]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a4:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4940      	ldr	r1, [pc, #256]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
 80049b8:	e015      	b.n	80049e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ba:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <HAL_RCC_OscConfig+0x2b0>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fe fbf0 	bl	80031a4 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c8:	f7fe fbec 	bl	80031a4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e184      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d030      	beq.n	8004a54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fa:	4b30      	ldr	r3, [pc, #192]	; (8004abc <HAL_RCC_OscConfig+0x2b4>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fe fbd0 	bl	80031a4 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fe fbcc 	bl	80031a4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e164      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1a:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x200>
 8004a26:	e015      	b.n	8004a54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a28:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_RCC_OscConfig+0x2b4>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2e:	f7fe fbb9 	bl	80031a4 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a36:	f7fe fbb5 	bl	80031a4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e14d      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a0 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6413      	str	r3, [r2, #64]	; 0x40
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_OscConfig+0x2b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_RCC_OscConfig+0x2b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <HAL_RCC_OscConfig+0x2b8>)
 8004aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aaa:	f7fe fb7b 	bl	80031a4 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab0:	e011      	b.n	8004ad6 <HAL_RCC_OscConfig+0x2ce>
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	42470000 	.word	0x42470000
 8004abc:	42470e80 	.word	0x42470e80
 8004ac0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac4:	f7fe fb6e 	bl	80031a4 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e106      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad6:	4b85      	ldr	r3, [pc, #532]	; (8004cec <HAL_RCC_OscConfig+0x4e4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x2f0>
 8004aea:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a80      	ldr	r2, [pc, #512]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70
 8004af6:	e01c      	b.n	8004b32 <HAL_RCC_OscConfig+0x32a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCC_OscConfig+0x312>
 8004b00:	4b7b      	ldr	r3, [pc, #492]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a7a      	ldr	r2, [pc, #488]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	4b78      	ldr	r3, [pc, #480]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a77      	ldr	r2, [pc, #476]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
 8004b18:	e00b      	b.n	8004b32 <HAL_RCC_OscConfig+0x32a>
 8004b1a:	4b75      	ldr	r3, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a74      	ldr	r2, [pc, #464]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	4b72      	ldr	r3, [pc, #456]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	4a71      	ldr	r2, [pc, #452]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d015      	beq.n	8004b66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fb33 	bl	80031a4 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fe fb2f 	bl	80031a4 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e0c5      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b58:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ee      	beq.n	8004b42 <HAL_RCC_OscConfig+0x33a>
 8004b64:	e014      	b.n	8004b90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b66:	f7fe fb1d 	bl	80031a4 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6c:	e00a      	b.n	8004b84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6e:	f7fe fb19 	bl	80031a4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0af      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b84:	4b5a      	ldr	r3, [pc, #360]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ee      	bne.n	8004b6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d105      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b96:	4b56      	ldr	r3, [pc, #344]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a55      	ldr	r2, [pc, #340]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 809b 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bac:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 030c 	and.w	r3, r3, #12
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d05c      	beq.n	8004c72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d141      	bne.n	8004c44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc0:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <HAL_RCC_OscConfig+0x4ec>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc6:	f7fe faed 	bl	80031a4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fe fae9 	bl	80031a4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e081      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be0:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	019b      	lsls	r3, r3, #6
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	3b01      	subs	r3, #1
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	4937      	ldr	r1, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <HAL_RCC_OscConfig+0x4ec>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fe fac2 	bl	80031a4 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7fe fabe 	bl	80031a4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e056      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b2e      	ldr	r3, [pc, #184]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x41c>
 8004c42:	e04e      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_OscConfig+0x4ec>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fe faab 	bl	80031a4 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fe faa7 	bl	80031a4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e03f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c64:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x44a>
 8004c70:	e037      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e032      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <HAL_RCC_OscConfig+0x4e8>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d028      	beq.n	8004cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d121      	bne.n	8004cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d11a      	bne.n	8004cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d111      	bne.n	8004cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	42470060 	.word	0x42470060

08004cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cc      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b68      	ldr	r3, [pc, #416]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90c      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b63      	ldr	r3, [pc, #396]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0b8      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d4c:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a58      	ldr	r2, [pc, #352]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a52      	ldr	r2, [pc, #328]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b50      	ldr	r3, [pc, #320]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	494d      	ldr	r1, [pc, #308]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d044      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b47      	ldr	r3, [pc, #284]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e06f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e067      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4934      	ldr	r1, [pc, #208]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de8:	f7fe f9dc 	bl	80031a4 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df0:	f7fe f9d8 	bl	80031a4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e04f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 020c 	and.w	r2, r3, #12
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1eb      	bne.n	8004df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20c      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	; (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e032      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4916      	ldr	r1, [pc, #88]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7e:	f000 f821 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	490a      	ldr	r1, [pc, #40]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	5ccb      	ldrb	r3, [r1, r3]
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x1c4>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe f93c 	bl	800311c <HAL_InitTick>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023c00 	.word	0x40023c00
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800be40 	.word	0x0800be40
 8004ebc:	20000018 	.word	0x20000018
 8004ec0:	2000001c 	.word	0x2000001c

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004edc:	4b67      	ldr	r3, [pc, #412]	; (800507c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d00d      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	f200 80bd 	bhi.w	8005068 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef6:	e0b7      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004efa:	60bb      	str	r3, [r7, #8]
       break;
 8004efc:	e0b7      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efe:	4b61      	ldr	r3, [pc, #388]	; (8005084 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f00:	60bb      	str	r3, [r7, #8]
      break;
 8004f02:	e0b4      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f04:	4b5d      	ldr	r3, [pc, #372]	; (800507c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	; (800507c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d04d      	beq.n	8004fb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b58      	ldr	r3, [pc, #352]	; (800507c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	461a      	mov	r2, r3
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	ea02 0800 	and.w	r8, r2, r0
 8004f32:	ea03 0901 	and.w	r9, r3, r1
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	014b      	lsls	r3, r1, #5
 8004f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f48:	0142      	lsls	r2, r0, #5
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	ebb0 0008 	subs.w	r0, r0, r8
 8004f52:	eb61 0109 	sbc.w	r1, r1, r9
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	018b      	lsls	r3, r1, #6
 8004f60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f64:	0182      	lsls	r2, r0, #6
 8004f66:	1a12      	subs	r2, r2, r0
 8004f68:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6c:	f04f 0000 	mov.w	r0, #0
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	00d9      	lsls	r1, r3, #3
 8004f76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f7a:	00d0      	lsls	r0, r2, #3
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	eb12 0208 	adds.w	r2, r2, r8
 8004f84:	eb43 0309 	adc.w	r3, r3, r9
 8004f88:	f04f 0000 	mov.w	r0, #0
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	0259      	lsls	r1, r3, #9
 8004f92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f96:	0250      	lsls	r0, r2, #9
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	f7fb fe06 	bl	8000bb8 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e04a      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb6:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	099b      	lsrs	r3, r3, #6
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	ea02 0400 	and.w	r4, r2, r0
 8004fce:	ea03 0501 	and.w	r5, r3, r1
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	014b      	lsls	r3, r1, #5
 8004fe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fe4:	0142      	lsls	r2, r0, #5
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	1b00      	subs	r0, r0, r4
 8004fec:	eb61 0105 	sbc.w	r1, r1, r5
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	018b      	lsls	r3, r1, #6
 8004ffa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ffe:	0182      	lsls	r2, r0, #6
 8005000:	1a12      	subs	r2, r2, r0
 8005002:	eb63 0301 	sbc.w	r3, r3, r1
 8005006:	f04f 0000 	mov.w	r0, #0
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	00d9      	lsls	r1, r3, #3
 8005010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005014:	00d0      	lsls	r0, r2, #3
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	1912      	adds	r2, r2, r4
 800501c:	eb45 0303 	adc.w	r3, r5, r3
 8005020:	f04f 0000 	mov.w	r0, #0
 8005024:	f04f 0100 	mov.w	r1, #0
 8005028:	0299      	lsls	r1, r3, #10
 800502a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800502e:	0290      	lsls	r0, r2, #10
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	461a      	mov	r2, r3
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	f7fb fdba 	bl	8000bb8 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4613      	mov	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	3301      	adds	r3, #1
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	60bb      	str	r3, [r7, #8]
      break;
 8005066:	e002      	b.n	800506e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005068:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800506a:	60bb      	str	r3, [r7, #8]
      break;
 800506c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506e:	68bb      	ldr	r3, [r7, #8]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	00f42400 	.word	0x00f42400
 8005084:	007a1200 	.word	0x007a1200

08005088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800508c:	4b03      	ldr	r3, [pc, #12]	; (800509c <HAL_RCC_GetHCLKFreq+0x14>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000018 	.word	0x20000018

080050a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a4:	f7ff fff0 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	0a9b      	lsrs	r3, r3, #10
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4903      	ldr	r1, [pc, #12]	; (80050c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40023800 	.word	0x40023800
 80050c4:	0800be50 	.word	0x0800be50

080050c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050cc:	f7ff ffdc 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0b5b      	lsrs	r3, r3, #13
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	; (80050ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800be50 	.word	0x0800be50

080050f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07b      	b.n	80051fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005112:	d009      	beq.n	8005128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	61da      	str	r2, [r3, #28]
 800511a:	e005      	b.n	8005128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fd fd1e 	bl	8002b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	ea42 0103 	orr.w	r1, r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0104 	and.w	r1, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0210 	and.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b088      	sub	sp, #32
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_SPI_Transmit+0x22>
 8005220:	2302      	movs	r3, #2
 8005222:	e126      	b.n	8005472 <HAL_SPI_Transmit+0x270>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522c:	f7fd ffba 	bl	80031a4 <HAL_GetTick>
 8005230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d002      	beq.n	8005248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005246:	e10b      	b.n	8005460 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_SPI_Transmit+0x52>
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005258:	e102      	b.n	8005460 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a0:	d10f      	bne.n	80052c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d007      	beq.n	80052e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d14b      	bne.n	8005382 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Transmit+0xf6>
 80052f2:	8afb      	ldrh	r3, [r7, #22]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d13e      	bne.n	8005376 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800531c:	e02b      	b.n	8005376 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d112      	bne.n	8005352 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005350:	e011      	b.n	8005376 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005352:	f7fd ff27 	bl	80031a4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d803      	bhi.n	800536a <HAL_SPI_Transmit+0x168>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d102      	bne.n	8005370 <HAL_SPI_Transmit+0x16e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005374:	e074      	b.n	8005460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ce      	bne.n	800531e <HAL_SPI_Transmit+0x11c>
 8005380:	e04c      	b.n	800541c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_Transmit+0x18e>
 800538a:	8afb      	ldrh	r3, [r7, #22]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d140      	bne.n	8005412 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053b6:	e02c      	b.n	8005412 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d113      	bne.n	80053ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80053ec:	e011      	b.n	8005412 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ee:	f7fd fed9 	bl	80031a4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d803      	bhi.n	8005406 <HAL_SPI_Transmit+0x204>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d102      	bne.n	800540c <HAL_SPI_Transmit+0x20a>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005410:	e026      	b.n	8005460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1cd      	bne.n	80053b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f8b3 	bl	800558c <SPI_EndRxTxTransaction>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e000      	b.n	8005460 <HAL_SPI_Transmit+0x25e>
  }

error:
 800545e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005470:	7ffb      	ldrb	r3, [r7, #31]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800548c:	f7fd fe8a 	bl	80031a4 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	4413      	add	r3, r2
 800549a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800549c:	f7fd fe82 	bl	80031a4 <HAL_GetTick>
 80054a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054a2:	4b39      	ldr	r3, [pc, #228]	; (8005588 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	015b      	lsls	r3, r3, #5
 80054a8:	0d1b      	lsrs	r3, r3, #20
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054b2:	e054      	b.n	800555e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d050      	beq.n	800555e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054bc:	f7fd fe72 	bl	80031a4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d902      	bls.n	80054d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d13d      	bne.n	800554e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ea:	d111      	bne.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f4:	d004      	beq.n	8005500 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fe:	d107      	bne.n	8005510 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005518:	d10f      	bne.n	800553a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005538:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e017      	b.n	800557e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	3b01      	subs	r3, #1
 800555c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4013      	ands	r3, r2
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	bf0c      	ite	eq
 800556e:	2301      	moveq	r3, #1
 8005570:	2300      	movne	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	429a      	cmp	r2, r3
 800557a:	d19b      	bne.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000018 	.word	0x20000018

0800558c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <SPI_EndRxTxTransaction+0x7c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <SPI_EndRxTxTransaction+0x80>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	0d5b      	lsrs	r3, r3, #21
 80055a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b6:	d112      	bne.n	80055de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2200      	movs	r2, #0
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ff5a 	bl	800547c <SPI_WaitFlagStateUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e00f      	b.n	80055fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d0f2      	beq.n	80055de <SPI_EndRxTxTransaction+0x52>
 80055f8:	e000      	b.n	80055fc <SPI_EndRxTxTransaction+0x70>
        break;
 80055fa:	bf00      	nop
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000018 	.word	0x20000018
 800560c:	165e9f81 	.word	0x165e9f81

08005610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e041      	b.n	80056a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fd fc6e 	bl	8002f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 f9c0 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d001      	beq.n	80056c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e044      	b.n	8005752 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_TIM_Base_Start_IT+0xb0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d018      	beq.n	800571c <HAL_TIM_Base_Start_IT+0x6c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d013      	beq.n	800571c <HAL_TIM_Base_Start_IT+0x6c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <HAL_TIM_Base_Start_IT+0xb4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_TIM_Base_Start_IT+0x6c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a19      	ldr	r2, [pc, #100]	; (8005768 <HAL_TIM_Base_Start_IT+0xb8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_TIM_Base_Start_IT+0x6c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <HAL_TIM_Base_Start_IT+0xbc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_TIM_Base_Start_IT+0x6c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a16      	ldr	r2, [pc, #88]	; (8005770 <HAL_TIM_Base_Start_IT+0xc0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d111      	bne.n	8005740 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b06      	cmp	r3, #6
 800572c:	d010      	beq.n	8005750 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	e007      	b.n	8005750 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40014000 	.word	0x40014000

08005774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0202 	mvn.w	r2, #2
 80057a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8ee 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f8e0 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f8f1 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0204 	mvn.w	r2, #4
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f8c4 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8b6 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8c7 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b08      	cmp	r3, #8
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b08      	cmp	r3, #8
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0208 	mvn.w	r2, #8
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2204      	movs	r2, #4
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f89a 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f88c 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f89d 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b10      	cmp	r3, #16
 8005884:	d122      	bne.n	80058cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b10      	cmp	r3, #16
 8005892:	d11b      	bne.n	80058cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0210 	mvn.w	r2, #16
 800589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2208      	movs	r2, #8
 80058a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f870 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80058b8:	e005      	b.n	80058c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f862 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f873 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d10e      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d107      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0201 	mvn.w	r2, #1
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fd fb38 	bl	8002f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005902:	2b80      	cmp	r3, #128	; 0x80
 8005904:	d10e      	bne.n	8005924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005910:	2b80      	cmp	r3, #128	; 0x80
 8005912:	d107      	bne.n	8005924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8e2 	bl	8005ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d10e      	bne.n	8005950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d107      	bne.n	8005950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f838 	bl	80059c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d10e      	bne.n	800597c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b20      	cmp	r3, #32
 800596a:	d107      	bne.n	800597c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0220 	mvn.w	r2, #32
 8005974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8ac 	bl	8005ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a34      	ldr	r2, [pc, #208]	; (8005ab8 <TIM_Base_SetConfig+0xe4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a31      	ldr	r2, [pc, #196]	; (8005abc <TIM_Base_SetConfig+0xe8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a30      	ldr	r2, [pc, #192]	; (8005ac0 <TIM_Base_SetConfig+0xec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a2f      	ldr	r2, [pc, #188]	; (8005ac4 <TIM_Base_SetConfig+0xf0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <TIM_Base_SetConfig+0xe4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a22      	ldr	r2, [pc, #136]	; (8005abc <TIM_Base_SetConfig+0xe8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <TIM_Base_SetConfig+0xec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <TIM_Base_SetConfig+0xf0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <TIM_Base_SetConfig+0xf4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <TIM_Base_SetConfig+0xf8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <TIM_Base_SetConfig+0xfc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <TIM_Base_SetConfig+0xe4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d103      	bne.n	8005aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800

08005ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e03f      	b.n	8005b8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fd fa5e 	bl	8002fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fc1b 	bl	800637c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b08a      	sub	sp, #40	; 0x28
 8005b9a:	af02      	add	r7, sp, #8
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d17c      	bne.n	8005cb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_UART_Transmit+0x2c>
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e075      	b.n	8005cb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Transmit+0x3e>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e06e      	b.n	8005cb2 <HAL_UART_Transmit+0x11c>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2221      	movs	r2, #33	; 0x21
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bea:	f7fd fadb 	bl	80031a4 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d108      	bne.n	8005c18 <HAL_UART_Transmit+0x82>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e003      	b.n	8005c20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c28:	e02a      	b.n	8005c80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fa17 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e036      	b.n	8005cb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e007      	b.n	8005c72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1cf      	bne.n	8005c2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2140      	movs	r1, #64	; 0x40
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f9e7 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e006      	b.n	8005cb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	f003 030f 	and.w	r3, r3, #15
 8005cea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_UART_IRQHandler+0x52>
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 faa1 	bl	800624e <UART_Receive_IT>
      return;
 8005d0c:	e17c      	b.n	8006008 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80b1 	beq.w	8005e78 <HAL_UART_IRQHandler+0x1bc>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <HAL_UART_IRQHandler+0x70>
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80a6 	beq.w	8005e78 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_UART_IRQHandler+0x90>
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_UART_IRQHandler+0xb0>
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	f043 0202 	orr.w	r2, r3, #2
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_UART_IRQHandler+0xd0>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00f      	beq.n	8005db6 <HAL_UART_IRQHandler+0xfa>
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d104      	bne.n	8005daa <HAL_UART_IRQHandler+0xee>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f043 0208 	orr.w	r2, r3, #8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 811f 	beq.w	8005ffe <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_UART_IRQHandler+0x11e>
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa3a 	bl	800624e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b40      	cmp	r3, #64	; 0x40
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_UART_IRQHandler+0x146>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d031      	beq.n	8005e66 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f97a 	bl	80060fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d123      	bne.n	8005e5e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d013      	beq.n	8005e56 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	4a77      	ldr	r2, [pc, #476]	; (8006010 <HAL_UART_IRQHandler+0x354>)
 8005e34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd fb63 	bl	8003506 <HAL_DMA_Abort_IT>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d016      	beq.n	8005e74 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	e00e      	b.n	8005e74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8f0 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	e00a      	b.n	8005e74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8ec 	bl	800603c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e006      	b.n	8005e74 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8e8 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e72:	e0c4      	b.n	8005ffe <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	bf00      	nop
    return;
 8005e76:	e0c2      	b.n	8005ffe <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	f040 80a2 	bne.w	8005fc6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 809c 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f003 0310 	and.w	r3, r3, #16
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8096 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d14f      	bne.n	8005f5e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005ec8:	8a3b      	ldrh	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8099 	beq.w	8006002 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed4:	8a3a      	ldrh	r2, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	f080 8093 	bcs.w	8006002 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8a3a      	ldrh	r2, [r7, #16]
 8005ee0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eec:	d02b      	beq.n	8005f46 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695a      	ldr	r2, [r3, #20]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0210 	bic.w	r2, r2, #16
 8005f3a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fd fa70 	bl	8003426 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f87a 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f5c:	e051      	b.n	8006002 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d047      	beq.n	8006006 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005f76:	8a7b      	ldrh	r3, [r7, #18]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d044      	beq.n	8006006 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f8a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695a      	ldr	r2, [r3, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0201 	bic.w	r2, r2, #1
 8005f9a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0210 	bic.w	r2, r2, #16
 8005fb8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fba:	8a7b      	ldrh	r3, [r7, #18]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f846 	bl	8006050 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fc4:	e01f      	b.n	8006006 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x326>
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f8cf 	bl	800617e <UART_Transmit_IT>
    return;
 8005fe0:	e012      	b.n	8006008 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <HAL_UART_IRQHandler+0x34c>
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d008      	beq.n	8006008 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f911 	bl	800621e <UART_EndTransmit_IT>
    return;
 8005ffc:	e004      	b.n	8006008 <HAL_UART_IRQHandler+0x34c>
    return;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <HAL_UART_IRQHandler+0x34c>
      return;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <HAL_UART_IRQHandler+0x34c>
      return;
 8006006:	bf00      	nop
  }
}
 8006008:	3728      	adds	r7, #40	; 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	08006157 	.word	0x08006157

08006014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006078:	e02c      	b.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d028      	beq.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <UART_WaitOnFlagUntilTimeout+0x30>
 8006088:	f7fd f88c 	bl	80031a4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	d21d      	bcs.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e00f      	b.n	80060f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4013      	ands	r3, r2
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	bf0c      	ite	eq
 80060e4:	2301      	moveq	r3, #1
 80060e6:	2300      	movne	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d0c3      	beq.n	800607a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006112:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	2b01      	cmp	r3, #1
 800612a:	d107      	bne.n	800613c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0210 	bic.w	r2, r2, #16
 800613a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff ff63 	bl	800603c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b21      	cmp	r3, #33	; 0x21
 8006190:	d13e      	bne.n	8006210 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619a:	d114      	bne.n	80061c6 <UART_Transmit_IT+0x48>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d110      	bne.n	80061c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	621a      	str	r2, [r3, #32]
 80061c4:	e008      	b.n	80061d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6211      	str	r1, [r2, #32]
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4619      	mov	r1, r3
 80061e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10f      	bne.n	800620c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006234:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fee8 	bl	8006014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b22      	cmp	r3, #34	; 0x22
 8006260:	f040 8087 	bne.w	8006372 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d117      	bne.n	800629e <UART_Receive_IT+0x50>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d113      	bne.n	800629e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	b29a      	uxth	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
 800629c:	e026      	b.n	80062ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b0:	d007      	beq.n	80062c2 <UART_Receive_IT+0x74>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <UART_Receive_IT+0x82>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e008      	b.n	80062e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4619      	mov	r1, r3
 80062fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d136      	bne.n	800636e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0220 	bic.w	r2, r2, #32
 800630e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800631e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10e      	bne.n	800635e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0210 	bic.w	r2, r2, #16
 800634e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fe7a 	bl	8006050 <HAL_UARTEx_RxEventCallback>
 800635c:	e002      	b.n	8006364 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fe62 	bl	8006028 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e002      	b.n	8006374 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006372:	2302      	movs	r3, #2
  }
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	b09f      	sub	sp, #124	; 0x7c
 8006382:	af00      	add	r7, sp, #0
 8006384:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006392:	68d9      	ldr	r1, [r3, #12]
 8006394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	ea40 0301 	orr.w	r3, r0, r1
 800639c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063c0:	f021 010c 	bic.w	r1, r1, #12
 80063c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ca:	430b      	orrs	r3, r1
 80063cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	6999      	ldr	r1, [r3, #24]
 80063dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	ea40 0301 	orr.w	r3, r0, r1
 80063e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4bc5      	ldr	r3, [pc, #788]	; (8006700 <UART_SetConfig+0x384>)
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d004      	beq.n	80063fa <UART_SetConfig+0x7e>
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4bc3      	ldr	r3, [pc, #780]	; (8006704 <UART_SetConfig+0x388>)
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d103      	bne.n	8006402 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063fa:	f7fe fe65 	bl	80050c8 <HAL_RCC_GetPCLK2Freq>
 80063fe:	6778      	str	r0, [r7, #116]	; 0x74
 8006400:	e002      	b.n	8006408 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006402:	f7fe fe4d 	bl	80050a0 <HAL_RCC_GetPCLK1Freq>
 8006406:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006410:	f040 80b6 	bne.w	8006580 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006416:	461c      	mov	r4, r3
 8006418:	f04f 0500 	mov.w	r5, #0
 800641c:	4622      	mov	r2, r4
 800641e:	462b      	mov	r3, r5
 8006420:	1891      	adds	r1, r2, r2
 8006422:	6439      	str	r1, [r7, #64]	; 0x40
 8006424:	415b      	adcs	r3, r3
 8006426:	647b      	str	r3, [r7, #68]	; 0x44
 8006428:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800642c:	1912      	adds	r2, r2, r4
 800642e:	eb45 0303 	adc.w	r3, r5, r3
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f04f 0100 	mov.w	r1, #0
 800643a:	00d9      	lsls	r1, r3, #3
 800643c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006440:	00d0      	lsls	r0, r2, #3
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	1911      	adds	r1, r2, r4
 8006448:	6639      	str	r1, [r7, #96]	; 0x60
 800644a:	416b      	adcs	r3, r5
 800644c:	667b      	str	r3, [r7, #100]	; 0x64
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	461a      	mov	r2, r3
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	1891      	adds	r1, r2, r2
 800645a:	63b9      	str	r1, [r7, #56]	; 0x38
 800645c:	415b      	adcs	r3, r3
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006464:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006468:	f7fa fba6 	bl	8000bb8 <__aeabi_uldivmod>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4ba5      	ldr	r3, [pc, #660]	; (8006708 <UART_SetConfig+0x38c>)
 8006472:	fba3 2302 	umull	r2, r3, r3, r2
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	011e      	lsls	r6, r3, #4
 800647a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647c:	461c      	mov	r4, r3
 800647e:	f04f 0500 	mov.w	r5, #0
 8006482:	4622      	mov	r2, r4
 8006484:	462b      	mov	r3, r5
 8006486:	1891      	adds	r1, r2, r2
 8006488:	6339      	str	r1, [r7, #48]	; 0x30
 800648a:	415b      	adcs	r3, r3
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
 800648e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006492:	1912      	adds	r2, r2, r4
 8006494:	eb45 0303 	adc.w	r3, r5, r3
 8006498:	f04f 0000 	mov.w	r0, #0
 800649c:	f04f 0100 	mov.w	r1, #0
 80064a0:	00d9      	lsls	r1, r3, #3
 80064a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064a6:	00d0      	lsls	r0, r2, #3
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	1911      	adds	r1, r2, r4
 80064ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80064b0:	416b      	adcs	r3, r5
 80064b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	461a      	mov	r2, r3
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	1891      	adds	r1, r2, r2
 80064c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80064c2:	415b      	adcs	r3, r3
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064ce:	f7fa fb73 	bl	8000bb8 <__aeabi_uldivmod>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4b8c      	ldr	r3, [pc, #560]	; (8006708 <UART_SetConfig+0x38c>)
 80064d8:	fba3 1302 	umull	r1, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	2164      	movs	r1, #100	; 0x64
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	3332      	adds	r3, #50	; 0x32
 80064ea:	4a87      	ldr	r2, [pc, #540]	; (8006708 <UART_SetConfig+0x38c>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f8:	441e      	add	r6, r3
 80064fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fc:	4618      	mov	r0, r3
 80064fe:	f04f 0100 	mov.w	r1, #0
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	1894      	adds	r4, r2, r2
 8006508:	623c      	str	r4, [r7, #32]
 800650a:	415b      	adcs	r3, r3
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
 800650e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006512:	1812      	adds	r2, r2, r0
 8006514:	eb41 0303 	adc.w	r3, r1, r3
 8006518:	f04f 0400 	mov.w	r4, #0
 800651c:	f04f 0500 	mov.w	r5, #0
 8006520:	00dd      	lsls	r5, r3, #3
 8006522:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006526:	00d4      	lsls	r4, r2, #3
 8006528:	4622      	mov	r2, r4
 800652a:	462b      	mov	r3, r5
 800652c:	1814      	adds	r4, r2, r0
 800652e:	653c      	str	r4, [r7, #80]	; 0x50
 8006530:	414b      	adcs	r3, r1
 8006532:	657b      	str	r3, [r7, #84]	; 0x54
 8006534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	461a      	mov	r2, r3
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	1891      	adds	r1, r2, r2
 8006540:	61b9      	str	r1, [r7, #24]
 8006542:	415b      	adcs	r3, r3
 8006544:	61fb      	str	r3, [r7, #28]
 8006546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800654a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800654e:	f7fa fb33 	bl	8000bb8 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b6c      	ldr	r3, [pc, #432]	; (8006708 <UART_SetConfig+0x38c>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	; 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	3332      	adds	r3, #50	; 0x32
 800656a:	4a67      	ldr	r2, [pc, #412]	; (8006708 <UART_SetConfig+0x38c>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 0207 	and.w	r2, r3, #7
 8006576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4432      	add	r2, r6
 800657c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800657e:	e0b9      	b.n	80066f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006582:	461c      	mov	r4, r3
 8006584:	f04f 0500 	mov.w	r5, #0
 8006588:	4622      	mov	r2, r4
 800658a:	462b      	mov	r3, r5
 800658c:	1891      	adds	r1, r2, r2
 800658e:	6139      	str	r1, [r7, #16]
 8006590:	415b      	adcs	r3, r3
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006598:	1912      	adds	r2, r2, r4
 800659a:	eb45 0303 	adc.w	r3, r5, r3
 800659e:	f04f 0000 	mov.w	r0, #0
 80065a2:	f04f 0100 	mov.w	r1, #0
 80065a6:	00d9      	lsls	r1, r3, #3
 80065a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ac:	00d0      	lsls	r0, r2, #3
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	eb12 0804 	adds.w	r8, r2, r4
 80065b6:	eb43 0905 	adc.w	r9, r3, r5
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	4618      	mov	r0, r3
 80065c0:	f04f 0100 	mov.w	r1, #0
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	008b      	lsls	r3, r1, #2
 80065ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065d2:	0082      	lsls	r2, r0, #2
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa faee 	bl	8000bb8 <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4b49      	ldr	r3, [pc, #292]	; (8006708 <UART_SetConfig+0x38c>)
 80065e2:	fba3 2302 	umull	r2, r3, r3, r2
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	011e      	lsls	r6, r3, #4
 80065ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ec:	4618      	mov	r0, r3
 80065ee:	f04f 0100 	mov.w	r1, #0
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	1894      	adds	r4, r2, r2
 80065f8:	60bc      	str	r4, [r7, #8]
 80065fa:	415b      	adcs	r3, r3
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006602:	1812      	adds	r2, r2, r0
 8006604:	eb41 0303 	adc.w	r3, r1, r3
 8006608:	f04f 0400 	mov.w	r4, #0
 800660c:	f04f 0500 	mov.w	r5, #0
 8006610:	00dd      	lsls	r5, r3, #3
 8006612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006616:	00d4      	lsls	r4, r2, #3
 8006618:	4622      	mov	r2, r4
 800661a:	462b      	mov	r3, r5
 800661c:	1814      	adds	r4, r2, r0
 800661e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006620:	414b      	adcs	r3, r1
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	008b      	lsls	r3, r1, #2
 8006638:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800663c:	0082      	lsls	r2, r0, #2
 800663e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006642:	f7fa fab9 	bl	8000bb8 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <UART_SetConfig+0x38c>)
 800664c:	fba3 1302 	umull	r1, r3, r3, r2
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	2164      	movs	r1, #100	; 0x64
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	3332      	adds	r3, #50	; 0x32
 800665e:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <UART_SetConfig+0x38c>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800666a:	441e      	add	r6, r3
 800666c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800666e:	4618      	mov	r0, r3
 8006670:	f04f 0100 	mov.w	r1, #0
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	1894      	adds	r4, r2, r2
 800667a:	603c      	str	r4, [r7, #0]
 800667c:	415b      	adcs	r3, r3
 800667e:	607b      	str	r3, [r7, #4]
 8006680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006684:	1812      	adds	r2, r2, r0
 8006686:	eb41 0303 	adc.w	r3, r1, r3
 800668a:	f04f 0400 	mov.w	r4, #0
 800668e:	f04f 0500 	mov.w	r5, #0
 8006692:	00dd      	lsls	r5, r3, #3
 8006694:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006698:	00d4      	lsls	r4, r2, #3
 800669a:	4622      	mov	r2, r4
 800669c:	462b      	mov	r3, r5
 800669e:	eb12 0a00 	adds.w	sl, r2, r0
 80066a2:	eb43 0b01 	adc.w	fp, r3, r1
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f04f 0100 	mov.w	r1, #0
 80066b0:	f04f 0200 	mov.w	r2, #0
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	008b      	lsls	r3, r1, #2
 80066ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066be:	0082      	lsls	r2, r0, #2
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	f7fa fa78 	bl	8000bb8 <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <UART_SetConfig+0x38c>)
 80066ce:	fba3 1302 	umull	r1, r3, r3, r2
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2164      	movs	r1, #100	; 0x64
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	3332      	adds	r3, #50	; 0x32
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <UART_SetConfig+0x38c>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 020f 	and.w	r2, r3, #15
 80066ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4432      	add	r2, r6
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	377c      	adds	r7, #124	; 0x7c
 80066f8:	46bd      	mov	sp, r7
 80066fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fe:	bf00      	nop
 8006700:	40011000 	.word	0x40011000
 8006704:	40011400 	.word	0x40011400
 8006708:	51eb851f 	.word	0x51eb851f

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000024 	.word	0x20000024

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f002 fece 	bl	80094cc <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	0800c244 	.word	0x0800c244
 8006754:	0800c244 	.word	0x0800c244
 8006758:	0800c244 	.word	0x0800c244
 800675c:	0800c248 	.word	0x0800c248

08006760 <memset>:
 8006760:	4402      	add	r2, r0
 8006762:	4603      	mov	r3, r0
 8006764:	4293      	cmp	r3, r2
 8006766:	d100      	bne.n	800676a <memset+0xa>
 8006768:	4770      	bx	lr
 800676a:	f803 1b01 	strb.w	r1, [r3], #1
 800676e:	e7f9      	b.n	8006764 <memset+0x4>

08006770 <__cvt>:
 8006770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	ec55 4b10 	vmov	r4, r5, d0
 8006778:	2d00      	cmp	r5, #0
 800677a:	460e      	mov	r6, r1
 800677c:	4619      	mov	r1, r3
 800677e:	462b      	mov	r3, r5
 8006780:	bfbb      	ittet	lt
 8006782:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006786:	461d      	movlt	r5, r3
 8006788:	2300      	movge	r3, #0
 800678a:	232d      	movlt	r3, #45	; 0x2d
 800678c:	700b      	strb	r3, [r1, #0]
 800678e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006790:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006794:	4691      	mov	r9, r2
 8006796:	f023 0820 	bic.w	r8, r3, #32
 800679a:	bfbc      	itt	lt
 800679c:	4622      	movlt	r2, r4
 800679e:	4614      	movlt	r4, r2
 80067a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067a4:	d005      	beq.n	80067b2 <__cvt+0x42>
 80067a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067aa:	d100      	bne.n	80067ae <__cvt+0x3e>
 80067ac:	3601      	adds	r6, #1
 80067ae:	2102      	movs	r1, #2
 80067b0:	e000      	b.n	80067b4 <__cvt+0x44>
 80067b2:	2103      	movs	r1, #3
 80067b4:	ab03      	add	r3, sp, #12
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	ab02      	add	r3, sp, #8
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	ec45 4b10 	vmov	d0, r4, r5
 80067c0:	4653      	mov	r3, sl
 80067c2:	4632      	mov	r2, r6
 80067c4:	f000 fd04 	bl	80071d0 <_dtoa_r>
 80067c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067cc:	4607      	mov	r7, r0
 80067ce:	d102      	bne.n	80067d6 <__cvt+0x66>
 80067d0:	f019 0f01 	tst.w	r9, #1
 80067d4:	d022      	beq.n	800681c <__cvt+0xac>
 80067d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067da:	eb07 0906 	add.w	r9, r7, r6
 80067de:	d110      	bne.n	8006802 <__cvt+0x92>
 80067e0:	783b      	ldrb	r3, [r7, #0]
 80067e2:	2b30      	cmp	r3, #48	; 0x30
 80067e4:	d10a      	bne.n	80067fc <__cvt+0x8c>
 80067e6:	2200      	movs	r2, #0
 80067e8:	2300      	movs	r3, #0
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f7fa f973 	bl	8000ad8 <__aeabi_dcmpeq>
 80067f2:	b918      	cbnz	r0, 80067fc <__cvt+0x8c>
 80067f4:	f1c6 0601 	rsb	r6, r6, #1
 80067f8:	f8ca 6000 	str.w	r6, [sl]
 80067fc:	f8da 3000 	ldr.w	r3, [sl]
 8006800:	4499      	add	r9, r3
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7fa f965 	bl	8000ad8 <__aeabi_dcmpeq>
 800680e:	b108      	cbz	r0, 8006814 <__cvt+0xa4>
 8006810:	f8cd 900c 	str.w	r9, [sp, #12]
 8006814:	2230      	movs	r2, #48	; 0x30
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	454b      	cmp	r3, r9
 800681a:	d307      	bcc.n	800682c <__cvt+0xbc>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006820:	1bdb      	subs	r3, r3, r7
 8006822:	4638      	mov	r0, r7
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	b004      	add	sp, #16
 8006828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682c:	1c59      	adds	r1, r3, #1
 800682e:	9103      	str	r1, [sp, #12]
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	e7f0      	b.n	8006816 <__cvt+0xa6>

08006834 <__exponent>:
 8006834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006836:	4603      	mov	r3, r0
 8006838:	2900      	cmp	r1, #0
 800683a:	bfb8      	it	lt
 800683c:	4249      	neglt	r1, r1
 800683e:	f803 2b02 	strb.w	r2, [r3], #2
 8006842:	bfb4      	ite	lt
 8006844:	222d      	movlt	r2, #45	; 0x2d
 8006846:	222b      	movge	r2, #43	; 0x2b
 8006848:	2909      	cmp	r1, #9
 800684a:	7042      	strb	r2, [r0, #1]
 800684c:	dd2a      	ble.n	80068a4 <__exponent+0x70>
 800684e:	f10d 0407 	add.w	r4, sp, #7
 8006852:	46a4      	mov	ip, r4
 8006854:	270a      	movs	r7, #10
 8006856:	46a6      	mov	lr, r4
 8006858:	460a      	mov	r2, r1
 800685a:	fb91 f6f7 	sdiv	r6, r1, r7
 800685e:	fb07 1516 	mls	r5, r7, r6, r1
 8006862:	3530      	adds	r5, #48	; 0x30
 8006864:	2a63      	cmp	r2, #99	; 0x63
 8006866:	f104 34ff 	add.w	r4, r4, #4294967295
 800686a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800686e:	4631      	mov	r1, r6
 8006870:	dcf1      	bgt.n	8006856 <__exponent+0x22>
 8006872:	3130      	adds	r1, #48	; 0x30
 8006874:	f1ae 0502 	sub.w	r5, lr, #2
 8006878:	f804 1c01 	strb.w	r1, [r4, #-1]
 800687c:	1c44      	adds	r4, r0, #1
 800687e:	4629      	mov	r1, r5
 8006880:	4561      	cmp	r1, ip
 8006882:	d30a      	bcc.n	800689a <__exponent+0x66>
 8006884:	f10d 0209 	add.w	r2, sp, #9
 8006888:	eba2 020e 	sub.w	r2, r2, lr
 800688c:	4565      	cmp	r5, ip
 800688e:	bf88      	it	hi
 8006890:	2200      	movhi	r2, #0
 8006892:	4413      	add	r3, r2
 8006894:	1a18      	subs	r0, r3, r0
 8006896:	b003      	add	sp, #12
 8006898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800689a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800689e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068a2:	e7ed      	b.n	8006880 <__exponent+0x4c>
 80068a4:	2330      	movs	r3, #48	; 0x30
 80068a6:	3130      	adds	r1, #48	; 0x30
 80068a8:	7083      	strb	r3, [r0, #2]
 80068aa:	70c1      	strb	r1, [r0, #3]
 80068ac:	1d03      	adds	r3, r0, #4
 80068ae:	e7f1      	b.n	8006894 <__exponent+0x60>

080068b0 <_printf_float>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	ed2d 8b02 	vpush	{d8}
 80068b8:	b08d      	sub	sp, #52	; 0x34
 80068ba:	460c      	mov	r4, r1
 80068bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068c0:	4616      	mov	r6, r2
 80068c2:	461f      	mov	r7, r3
 80068c4:	4605      	mov	r5, r0
 80068c6:	f001 fb65 	bl	8007f94 <_localeconv_r>
 80068ca:	f8d0 a000 	ldr.w	sl, [r0]
 80068ce:	4650      	mov	r0, sl
 80068d0:	f7f9 fc86 	bl	80001e0 <strlen>
 80068d4:	2300      	movs	r3, #0
 80068d6:	930a      	str	r3, [sp, #40]	; 0x28
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	f8d8 3000 	ldr.w	r3, [r8]
 80068e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068e4:	3307      	adds	r3, #7
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	f103 0208 	add.w	r2, r3, #8
 80068ee:	f8c8 2000 	str.w	r2, [r8]
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006902:	9307      	str	r3, [sp, #28]
 8006904:	f8cd 8018 	str.w	r8, [sp, #24]
 8006908:	ee08 0a10 	vmov	s16, r0
 800690c:	4b9f      	ldr	r3, [pc, #636]	; (8006b8c <_printf_float+0x2dc>)
 800690e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	f7fa f911 	bl	8000b3c <__aeabi_dcmpun>
 800691a:	bb88      	cbnz	r0, 8006980 <_printf_float+0xd0>
 800691c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006920:	4b9a      	ldr	r3, [pc, #616]	; (8006b8c <_printf_float+0x2dc>)
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	f7fa f8eb 	bl	8000b00 <__aeabi_dcmple>
 800692a:	bb48      	cbnz	r0, 8006980 <_printf_float+0xd0>
 800692c:	2200      	movs	r2, #0
 800692e:	2300      	movs	r3, #0
 8006930:	4640      	mov	r0, r8
 8006932:	4649      	mov	r1, r9
 8006934:	f7fa f8da 	bl	8000aec <__aeabi_dcmplt>
 8006938:	b110      	cbz	r0, 8006940 <_printf_float+0x90>
 800693a:	232d      	movs	r3, #45	; 0x2d
 800693c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006940:	4b93      	ldr	r3, [pc, #588]	; (8006b90 <_printf_float+0x2e0>)
 8006942:	4894      	ldr	r0, [pc, #592]	; (8006b94 <_printf_float+0x2e4>)
 8006944:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006948:	bf94      	ite	ls
 800694a:	4698      	movls	r8, r3
 800694c:	4680      	movhi	r8, r0
 800694e:	2303      	movs	r3, #3
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	9b05      	ldr	r3, [sp, #20]
 8006954:	f023 0204 	bic.w	r2, r3, #4
 8006958:	6022      	str	r2, [r4, #0]
 800695a:	f04f 0900 	mov.w	r9, #0
 800695e:	9700      	str	r7, [sp, #0]
 8006960:	4633      	mov	r3, r6
 8006962:	aa0b      	add	r2, sp, #44	; 0x2c
 8006964:	4621      	mov	r1, r4
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f9d8 	bl	8006d1c <_printf_common>
 800696c:	3001      	adds	r0, #1
 800696e:	f040 8090 	bne.w	8006a92 <_printf_float+0x1e2>
 8006972:	f04f 30ff 	mov.w	r0, #4294967295
 8006976:	b00d      	add	sp, #52	; 0x34
 8006978:	ecbd 8b02 	vpop	{d8}
 800697c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	4640      	mov	r0, r8
 8006986:	4649      	mov	r1, r9
 8006988:	f7fa f8d8 	bl	8000b3c <__aeabi_dcmpun>
 800698c:	b140      	cbz	r0, 80069a0 <_printf_float+0xf0>
 800698e:	464b      	mov	r3, r9
 8006990:	2b00      	cmp	r3, #0
 8006992:	bfbc      	itt	lt
 8006994:	232d      	movlt	r3, #45	; 0x2d
 8006996:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800699a:	487f      	ldr	r0, [pc, #508]	; (8006b98 <_printf_float+0x2e8>)
 800699c:	4b7f      	ldr	r3, [pc, #508]	; (8006b9c <_printf_float+0x2ec>)
 800699e:	e7d1      	b.n	8006944 <_printf_float+0x94>
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069a6:	9206      	str	r2, [sp, #24]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	d13f      	bne.n	8006a2c <_printf_float+0x17c>
 80069ac:	2306      	movs	r3, #6
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	9b05      	ldr	r3, [sp, #20]
 80069b2:	6861      	ldr	r1, [r4, #4]
 80069b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069b8:	2300      	movs	r3, #0
 80069ba:	9303      	str	r3, [sp, #12]
 80069bc:	ab0a      	add	r3, sp, #40	; 0x28
 80069be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069c2:	ab09      	add	r3, sp, #36	; 0x24
 80069c4:	ec49 8b10 	vmov	d0, r8, r9
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	6022      	str	r2, [r4, #0]
 80069cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069d0:	4628      	mov	r0, r5
 80069d2:	f7ff fecd 	bl	8006770 <__cvt>
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069da:	2b47      	cmp	r3, #71	; 0x47
 80069dc:	4680      	mov	r8, r0
 80069de:	d108      	bne.n	80069f2 <_printf_float+0x142>
 80069e0:	1cc8      	adds	r0, r1, #3
 80069e2:	db02      	blt.n	80069ea <_printf_float+0x13a>
 80069e4:	6863      	ldr	r3, [r4, #4]
 80069e6:	4299      	cmp	r1, r3
 80069e8:	dd41      	ble.n	8006a6e <_printf_float+0x1be>
 80069ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80069ee:	fa5f fb8b 	uxtb.w	fp, fp
 80069f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069f6:	d820      	bhi.n	8006a3a <_printf_float+0x18a>
 80069f8:	3901      	subs	r1, #1
 80069fa:	465a      	mov	r2, fp
 80069fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a00:	9109      	str	r1, [sp, #36]	; 0x24
 8006a02:	f7ff ff17 	bl	8006834 <__exponent>
 8006a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a08:	1813      	adds	r3, r2, r0
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	dc02      	bgt.n	8006a18 <_printf_float+0x168>
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	07d2      	lsls	r2, r2, #31
 8006a16:	d501      	bpl.n	8006a1c <_printf_float+0x16c>
 8006a18:	3301      	adds	r3, #1
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d09c      	beq.n	800695e <_printf_float+0xae>
 8006a24:	232d      	movs	r3, #45	; 0x2d
 8006a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a2a:	e798      	b.n	800695e <_printf_float+0xae>
 8006a2c:	9a06      	ldr	r2, [sp, #24]
 8006a2e:	2a47      	cmp	r2, #71	; 0x47
 8006a30:	d1be      	bne.n	80069b0 <_printf_float+0x100>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1bc      	bne.n	80069b0 <_printf_float+0x100>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e7b9      	b.n	80069ae <_printf_float+0xfe>
 8006a3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a3e:	d118      	bne.n	8006a72 <_printf_float+0x1c2>
 8006a40:	2900      	cmp	r1, #0
 8006a42:	6863      	ldr	r3, [r4, #4]
 8006a44:	dd0b      	ble.n	8006a5e <_printf_float+0x1ae>
 8006a46:	6121      	str	r1, [r4, #16]
 8006a48:	b913      	cbnz	r3, 8006a50 <_printf_float+0x1a0>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	07d0      	lsls	r0, r2, #31
 8006a4e:	d502      	bpl.n	8006a56 <_printf_float+0x1a6>
 8006a50:	3301      	adds	r3, #1
 8006a52:	440b      	add	r3, r1
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a58:	f04f 0900 	mov.w	r9, #0
 8006a5c:	e7de      	b.n	8006a1c <_printf_float+0x16c>
 8006a5e:	b913      	cbnz	r3, 8006a66 <_printf_float+0x1b6>
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	07d2      	lsls	r2, r2, #31
 8006a64:	d501      	bpl.n	8006a6a <_printf_float+0x1ba>
 8006a66:	3302      	adds	r3, #2
 8006a68:	e7f4      	b.n	8006a54 <_printf_float+0x1a4>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e7f2      	b.n	8006a54 <_printf_float+0x1a4>
 8006a6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a74:	4299      	cmp	r1, r3
 8006a76:	db05      	blt.n	8006a84 <_printf_float+0x1d4>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	6121      	str	r1, [r4, #16]
 8006a7c:	07d8      	lsls	r0, r3, #31
 8006a7e:	d5ea      	bpl.n	8006a56 <_printf_float+0x1a6>
 8006a80:	1c4b      	adds	r3, r1, #1
 8006a82:	e7e7      	b.n	8006a54 <_printf_float+0x1a4>
 8006a84:	2900      	cmp	r1, #0
 8006a86:	bfd4      	ite	le
 8006a88:	f1c1 0202 	rsble	r2, r1, #2
 8006a8c:	2201      	movgt	r2, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	e7e0      	b.n	8006a54 <_printf_float+0x1a4>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	055a      	lsls	r2, r3, #21
 8006a96:	d407      	bmi.n	8006aa8 <_printf_float+0x1f8>
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d12c      	bne.n	8006b00 <_printf_float+0x250>
 8006aa6:	e764      	b.n	8006972 <_printf_float+0xc2>
 8006aa8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006aac:	f240 80e0 	bls.w	8006c70 <_printf_float+0x3c0>
 8006ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f7fa f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d034      	beq.n	8006b2a <_printf_float+0x27a>
 8006ac0:	4a37      	ldr	r2, [pc, #220]	; (8006ba0 <_printf_float+0x2f0>)
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f af51 	beq.w	8006972 <_printf_float+0xc2>
 8006ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	db02      	blt.n	8006ade <_printf_float+0x22e>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	07d8      	lsls	r0, r3, #31
 8006adc:	d510      	bpl.n	8006b00 <_printf_float+0x250>
 8006ade:	ee18 3a10 	vmov	r3, s16
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	f43f af41 	beq.w	8006972 <_printf_float+0xc2>
 8006af0:	f04f 0800 	mov.w	r8, #0
 8006af4:	f104 091a 	add.w	r9, r4, #26
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	4543      	cmp	r3, r8
 8006afe:	dc09      	bgt.n	8006b14 <_printf_float+0x264>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	079b      	lsls	r3, r3, #30
 8006b04:	f100 8105 	bmi.w	8006d12 <_printf_float+0x462>
 8006b08:	68e0      	ldr	r0, [r4, #12]
 8006b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0c:	4298      	cmp	r0, r3
 8006b0e:	bfb8      	it	lt
 8006b10:	4618      	movlt	r0, r3
 8006b12:	e730      	b.n	8006976 <_printf_float+0xc6>
 8006b14:	2301      	movs	r3, #1
 8006b16:	464a      	mov	r2, r9
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f af27 	beq.w	8006972 <_printf_float+0xc2>
 8006b24:	f108 0801 	add.w	r8, r8, #1
 8006b28:	e7e6      	b.n	8006af8 <_printf_float+0x248>
 8006b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dc39      	bgt.n	8006ba4 <_printf_float+0x2f4>
 8006b30:	4a1b      	ldr	r2, [pc, #108]	; (8006ba0 <_printf_float+0x2f0>)
 8006b32:	2301      	movs	r3, #1
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af19 	beq.w	8006972 <_printf_float+0xc2>
 8006b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d102      	bne.n	8006b4e <_printf_float+0x29e>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	07d9      	lsls	r1, r3, #31
 8006b4c:	d5d8      	bpl.n	8006b00 <_printf_float+0x250>
 8006b4e:	ee18 3a10 	vmov	r3, s16
 8006b52:	4652      	mov	r2, sl
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	f43f af09 	beq.w	8006972 <_printf_float+0xc2>
 8006b60:	f04f 0900 	mov.w	r9, #0
 8006b64:	f104 0a1a 	add.w	sl, r4, #26
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	425b      	negs	r3, r3
 8006b6c:	454b      	cmp	r3, r9
 8006b6e:	dc01      	bgt.n	8006b74 <_printf_float+0x2c4>
 8006b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b72:	e792      	b.n	8006a9a <_printf_float+0x1ea>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4652      	mov	r2, sl
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	47b8      	blx	r7
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f43f aef7 	beq.w	8006972 <_printf_float+0xc2>
 8006b84:	f109 0901 	add.w	r9, r9, #1
 8006b88:	e7ee      	b.n	8006b68 <_printf_float+0x2b8>
 8006b8a:	bf00      	nop
 8006b8c:	7fefffff 	.word	0x7fefffff
 8006b90:	0800be5c 	.word	0x0800be5c
 8006b94:	0800be60 	.word	0x0800be60
 8006b98:	0800be68 	.word	0x0800be68
 8006b9c:	0800be64 	.word	0x0800be64
 8006ba0:	0800be6c 	.word	0x0800be6c
 8006ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	bfa8      	it	ge
 8006bac:	461a      	movge	r2, r3
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	4691      	mov	r9, r2
 8006bb2:	dc37      	bgt.n	8006c24 <_printf_float+0x374>
 8006bb4:	f04f 0b00 	mov.w	fp, #0
 8006bb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bbc:	f104 021a 	add.w	r2, r4, #26
 8006bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	eba3 0309 	sub.w	r3, r3, r9
 8006bc8:	455b      	cmp	r3, fp
 8006bca:	dc33      	bgt.n	8006c34 <_printf_float+0x384>
 8006bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	db3b      	blt.n	8006c4c <_printf_float+0x39c>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	07da      	lsls	r2, r3, #31
 8006bd8:	d438      	bmi.n	8006c4c <_printf_float+0x39c>
 8006bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	eba2 0901 	sub.w	r9, r2, r1
 8006be6:	4599      	cmp	r9, r3
 8006be8:	bfa8      	it	ge
 8006bea:	4699      	movge	r9, r3
 8006bec:	f1b9 0f00 	cmp.w	r9, #0
 8006bf0:	dc35      	bgt.n	8006c5e <_printf_float+0x3ae>
 8006bf2:	f04f 0800 	mov.w	r8, #0
 8006bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bfa:	f104 0a1a 	add.w	sl, r4, #26
 8006bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	eba3 0309 	sub.w	r3, r3, r9
 8006c08:	4543      	cmp	r3, r8
 8006c0a:	f77f af79 	ble.w	8006b00 <_printf_float+0x250>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4652      	mov	r2, sl
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f aeaa 	beq.w	8006972 <_printf_float+0xc2>
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	e7ec      	b.n	8006bfe <_printf_float+0x34e>
 8006c24:	4613      	mov	r3, r2
 8006c26:	4631      	mov	r1, r6
 8006c28:	4642      	mov	r2, r8
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d1c0      	bne.n	8006bb4 <_printf_float+0x304>
 8006c32:	e69e      	b.n	8006972 <_printf_float+0xc2>
 8006c34:	2301      	movs	r3, #1
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	9205      	str	r2, [sp, #20]
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f43f ae97 	beq.w	8006972 <_printf_float+0xc2>
 8006c44:	9a05      	ldr	r2, [sp, #20]
 8006c46:	f10b 0b01 	add.w	fp, fp, #1
 8006c4a:	e7b9      	b.n	8006bc0 <_printf_float+0x310>
 8006c4c:	ee18 3a10 	vmov	r3, s16
 8006c50:	4652      	mov	r2, sl
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d1be      	bne.n	8006bda <_printf_float+0x32a>
 8006c5c:	e689      	b.n	8006972 <_printf_float+0xc2>
 8006c5e:	9a05      	ldr	r2, [sp, #20]
 8006c60:	464b      	mov	r3, r9
 8006c62:	4442      	add	r2, r8
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	47b8      	blx	r7
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	d1c1      	bne.n	8006bf2 <_printf_float+0x342>
 8006c6e:	e680      	b.n	8006972 <_printf_float+0xc2>
 8006c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c72:	2a01      	cmp	r2, #1
 8006c74:	dc01      	bgt.n	8006c7a <_printf_float+0x3ca>
 8006c76:	07db      	lsls	r3, r3, #31
 8006c78:	d538      	bpl.n	8006cec <_printf_float+0x43c>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f ae74 	beq.w	8006972 <_printf_float+0xc2>
 8006c8a:	ee18 3a10 	vmov	r3, s16
 8006c8e:	4652      	mov	r2, sl
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	f43f ae6b 	beq.w	8006972 <_printf_float+0xc2>
 8006c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f7f9 ff18 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ca8:	b9d8      	cbnz	r0, 8006ce2 <_printf_float+0x432>
 8006caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cac:	f108 0201 	add.w	r2, r8, #1
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d10e      	bne.n	8006cda <_printf_float+0x42a>
 8006cbc:	e659      	b.n	8006972 <_printf_float+0xc2>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4652      	mov	r2, sl
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	47b8      	blx	r7
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f43f ae52 	beq.w	8006972 <_printf_float+0xc2>
 8006cce:	f108 0801 	add.w	r8, r8, #1
 8006cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	4543      	cmp	r3, r8
 8006cd8:	dcf1      	bgt.n	8006cbe <_printf_float+0x40e>
 8006cda:	464b      	mov	r3, r9
 8006cdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ce0:	e6dc      	b.n	8006a9c <_printf_float+0x1ec>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	f104 0a1a 	add.w	sl, r4, #26
 8006cea:	e7f2      	b.n	8006cd2 <_printf_float+0x422>
 8006cec:	2301      	movs	r3, #1
 8006cee:	4642      	mov	r2, r8
 8006cf0:	e7df      	b.n	8006cb2 <_printf_float+0x402>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	464a      	mov	r2, r9
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b8      	blx	r7
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f43f ae38 	beq.w	8006972 <_printf_float+0xc2>
 8006d02:	f108 0801 	add.w	r8, r8, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d0a:	1a5b      	subs	r3, r3, r1
 8006d0c:	4543      	cmp	r3, r8
 8006d0e:	dcf0      	bgt.n	8006cf2 <_printf_float+0x442>
 8006d10:	e6fa      	b.n	8006b08 <_printf_float+0x258>
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	f104 0919 	add.w	r9, r4, #25
 8006d1a:	e7f4      	b.n	8006d06 <_printf_float+0x456>

08006d1c <_printf_common>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	4616      	mov	r6, r2
 8006d22:	4699      	mov	r9, r3
 8006d24:	688a      	ldr	r2, [r1, #8]
 8006d26:	690b      	ldr	r3, [r1, #16]
 8006d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	bfb8      	it	lt
 8006d30:	4613      	movlt	r3, r2
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	b10a      	cbz	r2, 8006d42 <_printf_common+0x26>
 8006d3e:	3301      	adds	r3, #1
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	0699      	lsls	r1, r3, #26
 8006d46:	bf42      	ittt	mi
 8006d48:	6833      	ldrmi	r3, [r6, #0]
 8006d4a:	3302      	addmi	r3, #2
 8006d4c:	6033      	strmi	r3, [r6, #0]
 8006d4e:	6825      	ldr	r5, [r4, #0]
 8006d50:	f015 0506 	ands.w	r5, r5, #6
 8006d54:	d106      	bne.n	8006d64 <_printf_common+0x48>
 8006d56:	f104 0a19 	add.w	sl, r4, #25
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	6832      	ldr	r2, [r6, #0]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dc26      	bgt.n	8006db2 <_printf_common+0x96>
 8006d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d68:	1e13      	subs	r3, r2, #0
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	bf18      	it	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d42b      	bmi.n	8006dcc <_printf_common+0xb0>
 8006d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d78:	4649      	mov	r1, r9
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c0      	blx	r8
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d01e      	beq.n	8006dc0 <_printf_common+0xa4>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	68e5      	ldr	r5, [r4, #12]
 8006d86:	6832      	ldr	r2, [r6, #0]
 8006d88:	f003 0306 	and.w	r3, r3, #6
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	bf08      	it	eq
 8006d90:	1aad      	subeq	r5, r5, r2
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	bf0c      	ite	eq
 8006d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d9c:	2500      	movne	r5, #0
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	bfc4      	itt	gt
 8006da2:	1a9b      	subgt	r3, r3, r2
 8006da4:	18ed      	addgt	r5, r5, r3
 8006da6:	2600      	movs	r6, #0
 8006da8:	341a      	adds	r4, #26
 8006daa:	42b5      	cmp	r5, r6
 8006dac:	d11a      	bne.n	8006de4 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e008      	b.n	8006dc4 <_printf_common+0xa8>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4652      	mov	r2, sl
 8006db6:	4649      	mov	r1, r9
 8006db8:	4638      	mov	r0, r7
 8006dba:	47c0      	blx	r8
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_printf_common+0xac>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	3501      	adds	r5, #1
 8006dca:	e7c6      	b.n	8006d5a <_printf_common+0x3e>
 8006dcc:	18e1      	adds	r1, r4, r3
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	2030      	movs	r0, #48	; 0x30
 8006dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dd6:	4422      	add	r2, r4
 8006dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006de0:	3302      	adds	r3, #2
 8006de2:	e7c7      	b.n	8006d74 <_printf_common+0x58>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4622      	mov	r2, r4
 8006de8:	4649      	mov	r1, r9
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c0      	blx	r8
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0e6      	beq.n	8006dc0 <_printf_common+0xa4>
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7d9      	b.n	8006daa <_printf_common+0x8e>
	...

08006df8 <_printf_i>:
 8006df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	4691      	mov	r9, r2
 8006e00:	7e27      	ldrb	r7, [r4, #24]
 8006e02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e04:	2f78      	cmp	r7, #120	; 0x78
 8006e06:	4680      	mov	r8, r0
 8006e08:	469a      	mov	sl, r3
 8006e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e0e:	d807      	bhi.n	8006e20 <_printf_i+0x28>
 8006e10:	2f62      	cmp	r7, #98	; 0x62
 8006e12:	d80a      	bhi.n	8006e2a <_printf_i+0x32>
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	f000 80d8 	beq.w	8006fca <_printf_i+0x1d2>
 8006e1a:	2f58      	cmp	r7, #88	; 0x58
 8006e1c:	f000 80a3 	beq.w	8006f66 <_printf_i+0x16e>
 8006e20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e28:	e03a      	b.n	8006ea0 <_printf_i+0xa8>
 8006e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e2e:	2b15      	cmp	r3, #21
 8006e30:	d8f6      	bhi.n	8006e20 <_printf_i+0x28>
 8006e32:	a001      	add	r0, pc, #4	; (adr r0, 8006e38 <_printf_i+0x40>)
 8006e34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006ea5 	.word	0x08006ea5
 8006e40:	08006e21 	.word	0x08006e21
 8006e44:	08006e21 	.word	0x08006e21
 8006e48:	08006e21 	.word	0x08006e21
 8006e4c:	08006e21 	.word	0x08006e21
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006e21 	.word	0x08006e21
 8006e58:	08006e21 	.word	0x08006e21
 8006e5c:	08006e21 	.word	0x08006e21
 8006e60:	08006e21 	.word	0x08006e21
 8006e64:	08006fb1 	.word	0x08006fb1
 8006e68:	08006ed5 	.word	0x08006ed5
 8006e6c:	08006f93 	.word	0x08006f93
 8006e70:	08006e21 	.word	0x08006e21
 8006e74:	08006e21 	.word	0x08006e21
 8006e78:	08006fd3 	.word	0x08006fd3
 8006e7c:	08006e21 	.word	0x08006e21
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006e21 	.word	0x08006e21
 8006e88:	08006e21 	.word	0x08006e21
 8006e8c:	08006f9b 	.word	0x08006f9b
 8006e90:	680b      	ldr	r3, [r1, #0]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	600a      	str	r2, [r1, #0]
 8006e98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0a3      	b.n	8006fec <_printf_i+0x1f4>
 8006ea4:	6825      	ldr	r5, [r4, #0]
 8006ea6:	6808      	ldr	r0, [r1, #0]
 8006ea8:	062e      	lsls	r6, r5, #24
 8006eaa:	f100 0304 	add.w	r3, r0, #4
 8006eae:	d50a      	bpl.n	8006ec6 <_printf_i+0xce>
 8006eb0:	6805      	ldr	r5, [r0, #0]
 8006eb2:	600b      	str	r3, [r1, #0]
 8006eb4:	2d00      	cmp	r5, #0
 8006eb6:	da03      	bge.n	8006ec0 <_printf_i+0xc8>
 8006eb8:	232d      	movs	r3, #45	; 0x2d
 8006eba:	426d      	negs	r5, r5
 8006ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec0:	485e      	ldr	r0, [pc, #376]	; (800703c <_printf_i+0x244>)
 8006ec2:	230a      	movs	r3, #10
 8006ec4:	e019      	b.n	8006efa <_printf_i+0x102>
 8006ec6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006eca:	6805      	ldr	r5, [r0, #0]
 8006ecc:	600b      	str	r3, [r1, #0]
 8006ece:	bf18      	it	ne
 8006ed0:	b22d      	sxthne	r5, r5
 8006ed2:	e7ef      	b.n	8006eb4 <_printf_i+0xbc>
 8006ed4:	680b      	ldr	r3, [r1, #0]
 8006ed6:	6825      	ldr	r5, [r4, #0]
 8006ed8:	1d18      	adds	r0, r3, #4
 8006eda:	6008      	str	r0, [r1, #0]
 8006edc:	0628      	lsls	r0, r5, #24
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0xec>
 8006ee0:	681d      	ldr	r5, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <_printf_i+0xf2>
 8006ee4:	0669      	lsls	r1, r5, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0xe8>
 8006ee8:	881d      	ldrh	r5, [r3, #0]
 8006eea:	4854      	ldr	r0, [pc, #336]	; (800703c <_printf_i+0x244>)
 8006eec:	2f6f      	cmp	r7, #111	; 0x6f
 8006eee:	bf0c      	ite	eq
 8006ef0:	2308      	moveq	r3, #8
 8006ef2:	230a      	movne	r3, #10
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006efa:	6866      	ldr	r6, [r4, #4]
 8006efc:	60a6      	str	r6, [r4, #8]
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	bfa2      	ittt	ge
 8006f02:	6821      	ldrge	r1, [r4, #0]
 8006f04:	f021 0104 	bicge.w	r1, r1, #4
 8006f08:	6021      	strge	r1, [r4, #0]
 8006f0a:	b90d      	cbnz	r5, 8006f10 <_printf_i+0x118>
 8006f0c:	2e00      	cmp	r6, #0
 8006f0e:	d04d      	beq.n	8006fac <_printf_i+0x1b4>
 8006f10:	4616      	mov	r6, r2
 8006f12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f16:	fb03 5711 	mls	r7, r3, r1, r5
 8006f1a:	5dc7      	ldrb	r7, [r0, r7]
 8006f1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f20:	462f      	mov	r7, r5
 8006f22:	42bb      	cmp	r3, r7
 8006f24:	460d      	mov	r5, r1
 8006f26:	d9f4      	bls.n	8006f12 <_printf_i+0x11a>
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d10b      	bne.n	8006f44 <_printf_i+0x14c>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	07df      	lsls	r7, r3, #31
 8006f30:	d508      	bpl.n	8006f44 <_printf_i+0x14c>
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6861      	ldr	r1, [r4, #4]
 8006f36:	4299      	cmp	r1, r3
 8006f38:	bfde      	ittt	le
 8006f3a:	2330      	movle	r3, #48	; 0x30
 8006f3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f44:	1b92      	subs	r2, r2, r6
 8006f46:	6122      	str	r2, [r4, #16]
 8006f48:	f8cd a000 	str.w	sl, [sp]
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	aa03      	add	r2, sp, #12
 8006f50:	4621      	mov	r1, r4
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff fee2 	bl	8006d1c <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d14c      	bne.n	8006ff6 <_printf_i+0x1fe>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	b004      	add	sp, #16
 8006f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f66:	4835      	ldr	r0, [pc, #212]	; (800703c <_printf_i+0x244>)
 8006f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	680e      	ldr	r6, [r1, #0]
 8006f70:	061f      	lsls	r7, r3, #24
 8006f72:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f76:	600e      	str	r6, [r1, #0]
 8006f78:	d514      	bpl.n	8006fa4 <_printf_i+0x1ac>
 8006f7a:	07d9      	lsls	r1, r3, #31
 8006f7c:	bf44      	itt	mi
 8006f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f82:	6023      	strmi	r3, [r4, #0]
 8006f84:	b91d      	cbnz	r5, 8006f8e <_printf_i+0x196>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	f023 0320 	bic.w	r3, r3, #32
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	2310      	movs	r3, #16
 8006f90:	e7b0      	b.n	8006ef4 <_printf_i+0xfc>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f043 0320 	orr.w	r3, r3, #32
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	2378      	movs	r3, #120	; 0x78
 8006f9c:	4828      	ldr	r0, [pc, #160]	; (8007040 <_printf_i+0x248>)
 8006f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fa2:	e7e3      	b.n	8006f6c <_printf_i+0x174>
 8006fa4:	065e      	lsls	r6, r3, #25
 8006fa6:	bf48      	it	mi
 8006fa8:	b2ad      	uxthmi	r5, r5
 8006faa:	e7e6      	b.n	8006f7a <_printf_i+0x182>
 8006fac:	4616      	mov	r6, r2
 8006fae:	e7bb      	b.n	8006f28 <_printf_i+0x130>
 8006fb0:	680b      	ldr	r3, [r1, #0]
 8006fb2:	6826      	ldr	r6, [r4, #0]
 8006fb4:	6960      	ldr	r0, [r4, #20]
 8006fb6:	1d1d      	adds	r5, r3, #4
 8006fb8:	600d      	str	r5, [r1, #0]
 8006fba:	0635      	lsls	r5, r6, #24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	d501      	bpl.n	8006fc4 <_printf_i+0x1cc>
 8006fc0:	6018      	str	r0, [r3, #0]
 8006fc2:	e002      	b.n	8006fca <_printf_i+0x1d2>
 8006fc4:	0671      	lsls	r1, r6, #25
 8006fc6:	d5fb      	bpl.n	8006fc0 <_printf_i+0x1c8>
 8006fc8:	8018      	strh	r0, [r3, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6123      	str	r3, [r4, #16]
 8006fce:	4616      	mov	r6, r2
 8006fd0:	e7ba      	b.n	8006f48 <_printf_i+0x150>
 8006fd2:	680b      	ldr	r3, [r1, #0]
 8006fd4:	1d1a      	adds	r2, r3, #4
 8006fd6:	600a      	str	r2, [r1, #0]
 8006fd8:	681e      	ldr	r6, [r3, #0]
 8006fda:	6862      	ldr	r2, [r4, #4]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7f9 f906 	bl	80001f0 <memchr>
 8006fe4:	b108      	cbz	r0, 8006fea <_printf_i+0x1f2>
 8006fe6:	1b80      	subs	r0, r0, r6
 8006fe8:	6060      	str	r0, [r4, #4]
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff4:	e7a8      	b.n	8006f48 <_printf_i+0x150>
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	4632      	mov	r2, r6
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	47d0      	blx	sl
 8007000:	3001      	adds	r0, #1
 8007002:	d0ab      	beq.n	8006f5c <_printf_i+0x164>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	079b      	lsls	r3, r3, #30
 8007008:	d413      	bmi.n	8007032 <_printf_i+0x23a>
 800700a:	68e0      	ldr	r0, [r4, #12]
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	4298      	cmp	r0, r3
 8007010:	bfb8      	it	lt
 8007012:	4618      	movlt	r0, r3
 8007014:	e7a4      	b.n	8006f60 <_printf_i+0x168>
 8007016:	2301      	movs	r3, #1
 8007018:	4632      	mov	r2, r6
 800701a:	4649      	mov	r1, r9
 800701c:	4640      	mov	r0, r8
 800701e:	47d0      	blx	sl
 8007020:	3001      	adds	r0, #1
 8007022:	d09b      	beq.n	8006f5c <_printf_i+0x164>
 8007024:	3501      	adds	r5, #1
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	9903      	ldr	r1, [sp, #12]
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	42ab      	cmp	r3, r5
 800702e:	dcf2      	bgt.n	8007016 <_printf_i+0x21e>
 8007030:	e7eb      	b.n	800700a <_printf_i+0x212>
 8007032:	2500      	movs	r5, #0
 8007034:	f104 0619 	add.w	r6, r4, #25
 8007038:	e7f5      	b.n	8007026 <_printf_i+0x22e>
 800703a:	bf00      	nop
 800703c:	0800be6e 	.word	0x0800be6e
 8007040:	0800be7f 	.word	0x0800be7f

08007044 <iprintf>:
 8007044:	b40f      	push	{r0, r1, r2, r3}
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <iprintf+0x2c>)
 8007048:	b513      	push	{r0, r1, r4, lr}
 800704a:	681c      	ldr	r4, [r3, #0]
 800704c:	b124      	cbz	r4, 8007058 <iprintf+0x14>
 800704e:	69a3      	ldr	r3, [r4, #24]
 8007050:	b913      	cbnz	r3, 8007058 <iprintf+0x14>
 8007052:	4620      	mov	r0, r4
 8007054:	f000 ff00 	bl	8007e58 <__sinit>
 8007058:	ab05      	add	r3, sp, #20
 800705a:	9a04      	ldr	r2, [sp, #16]
 800705c:	68a1      	ldr	r1, [r4, #8]
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	4620      	mov	r0, r4
 8007062:	f001 fd73 	bl	8008b4c <_vfiprintf_r>
 8007066:	b002      	add	sp, #8
 8007068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706c:	b004      	add	sp, #16
 800706e:	4770      	bx	lr
 8007070:	20000024 	.word	0x20000024

08007074 <siprintf>:
 8007074:	b40e      	push	{r1, r2, r3}
 8007076:	b500      	push	{lr}
 8007078:	b09c      	sub	sp, #112	; 0x70
 800707a:	ab1d      	add	r3, sp, #116	; 0x74
 800707c:	9002      	str	r0, [sp, #8]
 800707e:	9006      	str	r0, [sp, #24]
 8007080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007084:	4809      	ldr	r0, [pc, #36]	; (80070ac <siprintf+0x38>)
 8007086:	9107      	str	r1, [sp, #28]
 8007088:	9104      	str	r1, [sp, #16]
 800708a:	4909      	ldr	r1, [pc, #36]	; (80070b0 <siprintf+0x3c>)
 800708c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007090:	9105      	str	r1, [sp, #20]
 8007092:	6800      	ldr	r0, [r0, #0]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	a902      	add	r1, sp, #8
 8007098:	f001 fc2e 	bl	80088f8 <_svfiprintf_r>
 800709c:	9b02      	ldr	r3, [sp, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	b01c      	add	sp, #112	; 0x70
 80070a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a8:	b003      	add	sp, #12
 80070aa:	4770      	bx	lr
 80070ac:	20000024 	.word	0x20000024
 80070b0:	ffff0208 	.word	0xffff0208

080070b4 <quorem>:
 80070b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	6903      	ldr	r3, [r0, #16]
 80070ba:	690c      	ldr	r4, [r1, #16]
 80070bc:	42a3      	cmp	r3, r4
 80070be:	4607      	mov	r7, r0
 80070c0:	f2c0 8081 	blt.w	80071c6 <quorem+0x112>
 80070c4:	3c01      	subs	r4, #1
 80070c6:	f101 0814 	add.w	r8, r1, #20
 80070ca:	f100 0514 	add.w	r5, r0, #20
 80070ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070dc:	3301      	adds	r3, #1
 80070de:	429a      	cmp	r2, r3
 80070e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80070ec:	d331      	bcc.n	8007152 <quorem+0x9e>
 80070ee:	f04f 0e00 	mov.w	lr, #0
 80070f2:	4640      	mov	r0, r8
 80070f4:	46ac      	mov	ip, r5
 80070f6:	46f2      	mov	sl, lr
 80070f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80070fc:	b293      	uxth	r3, r2
 80070fe:	fb06 e303 	mla	r3, r6, r3, lr
 8007102:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007106:	b29b      	uxth	r3, r3
 8007108:	ebaa 0303 	sub.w	r3, sl, r3
 800710c:	0c12      	lsrs	r2, r2, #16
 800710e:	f8dc a000 	ldr.w	sl, [ip]
 8007112:	fb06 e202 	mla	r2, r6, r2, lr
 8007116:	fa13 f38a 	uxtah	r3, r3, sl
 800711a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800711e:	fa1f fa82 	uxth.w	sl, r2
 8007122:	f8dc 2000 	ldr.w	r2, [ip]
 8007126:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800712a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800712e:	b29b      	uxth	r3, r3
 8007130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007134:	4581      	cmp	r9, r0
 8007136:	f84c 3b04 	str.w	r3, [ip], #4
 800713a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800713e:	d2db      	bcs.n	80070f8 <quorem+0x44>
 8007140:	f855 300b 	ldr.w	r3, [r5, fp]
 8007144:	b92b      	cbnz	r3, 8007152 <quorem+0x9e>
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	3b04      	subs	r3, #4
 800714a:	429d      	cmp	r5, r3
 800714c:	461a      	mov	r2, r3
 800714e:	d32e      	bcc.n	80071ae <quorem+0xfa>
 8007150:	613c      	str	r4, [r7, #16]
 8007152:	4638      	mov	r0, r7
 8007154:	f001 f9ba 	bl	80084cc <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	db24      	blt.n	80071a6 <quorem+0xf2>
 800715c:	3601      	adds	r6, #1
 800715e:	4628      	mov	r0, r5
 8007160:	f04f 0c00 	mov.w	ip, #0
 8007164:	f858 2b04 	ldr.w	r2, [r8], #4
 8007168:	f8d0 e000 	ldr.w	lr, [r0]
 800716c:	b293      	uxth	r3, r2
 800716e:	ebac 0303 	sub.w	r3, ip, r3
 8007172:	0c12      	lsrs	r2, r2, #16
 8007174:	fa13 f38e 	uxtah	r3, r3, lr
 8007178:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800717c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007186:	45c1      	cmp	r9, r8
 8007188:	f840 3b04 	str.w	r3, [r0], #4
 800718c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007190:	d2e8      	bcs.n	8007164 <quorem+0xb0>
 8007192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800719a:	b922      	cbnz	r2, 80071a6 <quorem+0xf2>
 800719c:	3b04      	subs	r3, #4
 800719e:	429d      	cmp	r5, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	d30a      	bcc.n	80071ba <quorem+0x106>
 80071a4:	613c      	str	r4, [r7, #16]
 80071a6:	4630      	mov	r0, r6
 80071a8:	b003      	add	sp, #12
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	3b04      	subs	r3, #4
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d1cc      	bne.n	8007150 <quorem+0x9c>
 80071b6:	3c01      	subs	r4, #1
 80071b8:	e7c7      	b.n	800714a <quorem+0x96>
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	3b04      	subs	r3, #4
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d1f0      	bne.n	80071a4 <quorem+0xf0>
 80071c2:	3c01      	subs	r4, #1
 80071c4:	e7eb      	b.n	800719e <quorem+0xea>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e7ee      	b.n	80071a8 <quorem+0xf4>
 80071ca:	0000      	movs	r0, r0
 80071cc:	0000      	movs	r0, r0
	...

080071d0 <_dtoa_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	ed2d 8b02 	vpush	{d8}
 80071d8:	ec57 6b10 	vmov	r6, r7, d0
 80071dc:	b095      	sub	sp, #84	; 0x54
 80071de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071e4:	9105      	str	r1, [sp, #20]
 80071e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80071ea:	4604      	mov	r4, r0
 80071ec:	9209      	str	r2, [sp, #36]	; 0x24
 80071ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80071f0:	b975      	cbnz	r5, 8007210 <_dtoa_r+0x40>
 80071f2:	2010      	movs	r0, #16
 80071f4:	f000 fed6 	bl	8007fa4 <malloc>
 80071f8:	4602      	mov	r2, r0
 80071fa:	6260      	str	r0, [r4, #36]	; 0x24
 80071fc:	b920      	cbnz	r0, 8007208 <_dtoa_r+0x38>
 80071fe:	4bb2      	ldr	r3, [pc, #712]	; (80074c8 <_dtoa_r+0x2f8>)
 8007200:	21ea      	movs	r1, #234	; 0xea
 8007202:	48b2      	ldr	r0, [pc, #712]	; (80074cc <_dtoa_r+0x2fc>)
 8007204:	f001 fef8 	bl	8008ff8 <__assert_func>
 8007208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800720c:	6005      	str	r5, [r0, #0]
 800720e:	60c5      	str	r5, [r0, #12]
 8007210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	b151      	cbz	r1, 800722c <_dtoa_r+0x5c>
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	604a      	str	r2, [r1, #4]
 800721a:	2301      	movs	r3, #1
 800721c:	4093      	lsls	r3, r2
 800721e:	608b      	str	r3, [r1, #8]
 8007220:	4620      	mov	r0, r4
 8007222:	f000 ff15 	bl	8008050 <_Bfree>
 8007226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	1e3b      	subs	r3, r7, #0
 800722e:	bfb9      	ittee	lt
 8007230:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007234:	9303      	strlt	r3, [sp, #12]
 8007236:	2300      	movge	r3, #0
 8007238:	f8c8 3000 	strge.w	r3, [r8]
 800723c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007240:	4ba3      	ldr	r3, [pc, #652]	; (80074d0 <_dtoa_r+0x300>)
 8007242:	bfbc      	itt	lt
 8007244:	2201      	movlt	r2, #1
 8007246:	f8c8 2000 	strlt.w	r2, [r8]
 800724a:	ea33 0309 	bics.w	r3, r3, r9
 800724e:	d11b      	bne.n	8007288 <_dtoa_r+0xb8>
 8007250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007252:	f242 730f 	movw	r3, #9999	; 0x270f
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800725c:	4333      	orrs	r3, r6
 800725e:	f000 857a 	beq.w	8007d56 <_dtoa_r+0xb86>
 8007262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007264:	b963      	cbnz	r3, 8007280 <_dtoa_r+0xb0>
 8007266:	4b9b      	ldr	r3, [pc, #620]	; (80074d4 <_dtoa_r+0x304>)
 8007268:	e024      	b.n	80072b4 <_dtoa_r+0xe4>
 800726a:	4b9b      	ldr	r3, [pc, #620]	; (80074d8 <_dtoa_r+0x308>)
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	9800      	ldr	r0, [sp, #0]
 8007276:	b015      	add	sp, #84	; 0x54
 8007278:	ecbd 8b02 	vpop	{d8}
 800727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007280:	4b94      	ldr	r3, [pc, #592]	; (80074d4 <_dtoa_r+0x304>)
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	3303      	adds	r3, #3
 8007286:	e7f3      	b.n	8007270 <_dtoa_r+0xa0>
 8007288:	ed9d 7b02 	vldr	d7, [sp, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	ec51 0b17 	vmov	r0, r1, d7
 8007292:	2300      	movs	r3, #0
 8007294:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007298:	f7f9 fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800729c:	4680      	mov	r8, r0
 800729e:	b158      	cbz	r0, 80072b8 <_dtoa_r+0xe8>
 80072a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072a2:	2301      	movs	r3, #1
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8551 	beq.w	8007d50 <_dtoa_r+0xb80>
 80072ae:	488b      	ldr	r0, [pc, #556]	; (80074dc <_dtoa_r+0x30c>)
 80072b0:	6018      	str	r0, [r3, #0]
 80072b2:	1e43      	subs	r3, r0, #1
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	e7dd      	b.n	8007274 <_dtoa_r+0xa4>
 80072b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80072bc:	aa12      	add	r2, sp, #72	; 0x48
 80072be:	a913      	add	r1, sp, #76	; 0x4c
 80072c0:	4620      	mov	r0, r4
 80072c2:	f001 f9a7 	bl	8008614 <__d2b>
 80072c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072ca:	4683      	mov	fp, r0
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	d07c      	beq.n	80073ca <_dtoa_r+0x1fa>
 80072d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80072d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80072de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072ea:	4b7d      	ldr	r3, [pc, #500]	; (80074e0 <_dtoa_r+0x310>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	4630      	mov	r0, r6
 80072f0:	4639      	mov	r1, r7
 80072f2:	f7f8 ffd1 	bl	8000298 <__aeabi_dsub>
 80072f6:	a36e      	add	r3, pc, #440	; (adr r3, 80074b0 <_dtoa_r+0x2e0>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f7f9 f984 	bl	8000608 <__aeabi_dmul>
 8007300:	a36d      	add	r3, pc, #436	; (adr r3, 80074b8 <_dtoa_r+0x2e8>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f8 ffc9 	bl	800029c <__adddf3>
 800730a:	4606      	mov	r6, r0
 800730c:	4628      	mov	r0, r5
 800730e:	460f      	mov	r7, r1
 8007310:	f7f9 f910 	bl	8000534 <__aeabi_i2d>
 8007314:	a36a      	add	r3, pc, #424	; (adr r3, 80074c0 <_dtoa_r+0x2f0>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f9 f975 	bl	8000608 <__aeabi_dmul>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f8 ffb9 	bl	800029c <__adddf3>
 800732a:	4606      	mov	r6, r0
 800732c:	460f      	mov	r7, r1
 800732e:	f7f9 fc1b 	bl	8000b68 <__aeabi_d2iz>
 8007332:	2200      	movs	r2, #0
 8007334:	4682      	mov	sl, r0
 8007336:	2300      	movs	r3, #0
 8007338:	4630      	mov	r0, r6
 800733a:	4639      	mov	r1, r7
 800733c:	f7f9 fbd6 	bl	8000aec <__aeabi_dcmplt>
 8007340:	b148      	cbz	r0, 8007356 <_dtoa_r+0x186>
 8007342:	4650      	mov	r0, sl
 8007344:	f7f9 f8f6 	bl	8000534 <__aeabi_i2d>
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	f7f9 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007350:	b908      	cbnz	r0, 8007356 <_dtoa_r+0x186>
 8007352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007356:	f1ba 0f16 	cmp.w	sl, #22
 800735a:	d854      	bhi.n	8007406 <_dtoa_r+0x236>
 800735c:	4b61      	ldr	r3, [pc, #388]	; (80074e4 <_dtoa_r+0x314>)
 800735e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800736a:	f7f9 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	d04b      	beq.n	800740a <_dtoa_r+0x23a>
 8007372:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007376:	2300      	movs	r3, #0
 8007378:	930e      	str	r3, [sp, #56]	; 0x38
 800737a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800737c:	1b5d      	subs	r5, r3, r5
 800737e:	1e6b      	subs	r3, r5, #1
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	bf43      	ittte	mi
 8007384:	2300      	movmi	r3, #0
 8007386:	f1c5 0801 	rsbmi	r8, r5, #1
 800738a:	9304      	strmi	r3, [sp, #16]
 800738c:	f04f 0800 	movpl.w	r8, #0
 8007390:	f1ba 0f00 	cmp.w	sl, #0
 8007394:	db3b      	blt.n	800740e <_dtoa_r+0x23e>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800739c:	4453      	add	r3, sl
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	2300      	movs	r3, #0
 80073a2:	9306      	str	r3, [sp, #24]
 80073a4:	9b05      	ldr	r3, [sp, #20]
 80073a6:	2b09      	cmp	r3, #9
 80073a8:	d869      	bhi.n	800747e <_dtoa_r+0x2ae>
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	bfc4      	itt	gt
 80073ae:	3b04      	subgt	r3, #4
 80073b0:	9305      	strgt	r3, [sp, #20]
 80073b2:	9b05      	ldr	r3, [sp, #20]
 80073b4:	f1a3 0302 	sub.w	r3, r3, #2
 80073b8:	bfcc      	ite	gt
 80073ba:	2500      	movgt	r5, #0
 80073bc:	2501      	movle	r5, #1
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d869      	bhi.n	8007496 <_dtoa_r+0x2c6>
 80073c2:	e8df f003 	tbb	[pc, r3]
 80073c6:	4e2c      	.short	0x4e2c
 80073c8:	5a4c      	.short	0x5a4c
 80073ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80073ce:	441d      	add	r5, r3
 80073d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	bfc1      	itttt	gt
 80073d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073e0:	fa09 f303 	lslgt.w	r3, r9, r3
 80073e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073e8:	bfda      	itte	le
 80073ea:	f1c3 0320 	rsble	r3, r3, #32
 80073ee:	fa06 f003 	lslle.w	r0, r6, r3
 80073f2:	4318      	orrgt	r0, r3
 80073f4:	f7f9 f88e 	bl	8000514 <__aeabi_ui2d>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4606      	mov	r6, r0
 80073fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007400:	3d01      	subs	r5, #1
 8007402:	9310      	str	r3, [sp, #64]	; 0x40
 8007404:	e771      	b.n	80072ea <_dtoa_r+0x11a>
 8007406:	2301      	movs	r3, #1
 8007408:	e7b6      	b.n	8007378 <_dtoa_r+0x1a8>
 800740a:	900e      	str	r0, [sp, #56]	; 0x38
 800740c:	e7b5      	b.n	800737a <_dtoa_r+0x1aa>
 800740e:	f1ca 0300 	rsb	r3, sl, #0
 8007412:	9306      	str	r3, [sp, #24]
 8007414:	2300      	movs	r3, #0
 8007416:	eba8 080a 	sub.w	r8, r8, sl
 800741a:	930d      	str	r3, [sp, #52]	; 0x34
 800741c:	e7c2      	b.n	80073a4 <_dtoa_r+0x1d4>
 800741e:	2300      	movs	r3, #0
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	dc39      	bgt.n	800749c <_dtoa_r+0x2cc>
 8007428:	f04f 0901 	mov.w	r9, #1
 800742c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007430:	464b      	mov	r3, r9
 8007432:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007436:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007438:	2200      	movs	r2, #0
 800743a:	6042      	str	r2, [r0, #4]
 800743c:	2204      	movs	r2, #4
 800743e:	f102 0614 	add.w	r6, r2, #20
 8007442:	429e      	cmp	r6, r3
 8007444:	6841      	ldr	r1, [r0, #4]
 8007446:	d92f      	bls.n	80074a8 <_dtoa_r+0x2d8>
 8007448:	4620      	mov	r0, r4
 800744a:	f000 fdc1 	bl	8007fd0 <_Balloc>
 800744e:	9000      	str	r0, [sp, #0]
 8007450:	2800      	cmp	r0, #0
 8007452:	d14b      	bne.n	80074ec <_dtoa_r+0x31c>
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <_dtoa_r+0x318>)
 8007456:	4602      	mov	r2, r0
 8007458:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800745c:	e6d1      	b.n	8007202 <_dtoa_r+0x32>
 800745e:	2301      	movs	r3, #1
 8007460:	e7de      	b.n	8007420 <_dtoa_r+0x250>
 8007462:	2300      	movs	r3, #0
 8007464:	9308      	str	r3, [sp, #32]
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	eb0a 0903 	add.w	r9, sl, r3
 800746c:	f109 0301 	add.w	r3, r9, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	bfb8      	it	lt
 8007476:	2301      	movlt	r3, #1
 8007478:	e7dd      	b.n	8007436 <_dtoa_r+0x266>
 800747a:	2301      	movs	r3, #1
 800747c:	e7f2      	b.n	8007464 <_dtoa_r+0x294>
 800747e:	2501      	movs	r5, #1
 8007480:	2300      	movs	r3, #0
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	9508      	str	r5, [sp, #32]
 8007486:	f04f 39ff 	mov.w	r9, #4294967295
 800748a:	2200      	movs	r2, #0
 800748c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007490:	2312      	movs	r3, #18
 8007492:	9209      	str	r2, [sp, #36]	; 0x24
 8007494:	e7cf      	b.n	8007436 <_dtoa_r+0x266>
 8007496:	2301      	movs	r3, #1
 8007498:	9308      	str	r3, [sp, #32]
 800749a:	e7f4      	b.n	8007486 <_dtoa_r+0x2b6>
 800749c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80074a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80074a4:	464b      	mov	r3, r9
 80074a6:	e7c6      	b.n	8007436 <_dtoa_r+0x266>
 80074a8:	3101      	adds	r1, #1
 80074aa:	6041      	str	r1, [r0, #4]
 80074ac:	0052      	lsls	r2, r2, #1
 80074ae:	e7c6      	b.n	800743e <_dtoa_r+0x26e>
 80074b0:	636f4361 	.word	0x636f4361
 80074b4:	3fd287a7 	.word	0x3fd287a7
 80074b8:	8b60c8b3 	.word	0x8b60c8b3
 80074bc:	3fc68a28 	.word	0x3fc68a28
 80074c0:	509f79fb 	.word	0x509f79fb
 80074c4:	3fd34413 	.word	0x3fd34413
 80074c8:	0800be9d 	.word	0x0800be9d
 80074cc:	0800beb4 	.word	0x0800beb4
 80074d0:	7ff00000 	.word	0x7ff00000
 80074d4:	0800be99 	.word	0x0800be99
 80074d8:	0800be90 	.word	0x0800be90
 80074dc:	0800be6d 	.word	0x0800be6d
 80074e0:	3ff80000 	.word	0x3ff80000
 80074e4:	0800c010 	.word	0x0800c010
 80074e8:	0800bf13 	.word	0x0800bf13
 80074ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ee:	9a00      	ldr	r2, [sp, #0]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	9b01      	ldr	r3, [sp, #4]
 80074f4:	2b0e      	cmp	r3, #14
 80074f6:	f200 80ad 	bhi.w	8007654 <_dtoa_r+0x484>
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	f000 80aa 	beq.w	8007654 <_dtoa_r+0x484>
 8007500:	f1ba 0f00 	cmp.w	sl, #0
 8007504:	dd36      	ble.n	8007574 <_dtoa_r+0x3a4>
 8007506:	4ac3      	ldr	r2, [pc, #780]	; (8007814 <_dtoa_r+0x644>)
 8007508:	f00a 030f 	and.w	r3, sl, #15
 800750c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007510:	ed93 7b00 	vldr	d7, [r3]
 8007514:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007518:	ea4f 172a 	mov.w	r7, sl, asr #4
 800751c:	eeb0 8a47 	vmov.f32	s16, s14
 8007520:	eef0 8a67 	vmov.f32	s17, s15
 8007524:	d016      	beq.n	8007554 <_dtoa_r+0x384>
 8007526:	4bbc      	ldr	r3, [pc, #752]	; (8007818 <_dtoa_r+0x648>)
 8007528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800752c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007530:	f7f9 f994 	bl	800085c <__aeabi_ddiv>
 8007534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007538:	f007 070f 	and.w	r7, r7, #15
 800753c:	2503      	movs	r5, #3
 800753e:	4eb6      	ldr	r6, [pc, #728]	; (8007818 <_dtoa_r+0x648>)
 8007540:	b957      	cbnz	r7, 8007558 <_dtoa_r+0x388>
 8007542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007546:	ec53 2b18 	vmov	r2, r3, d8
 800754a:	f7f9 f987 	bl	800085c <__aeabi_ddiv>
 800754e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007552:	e029      	b.n	80075a8 <_dtoa_r+0x3d8>
 8007554:	2502      	movs	r5, #2
 8007556:	e7f2      	b.n	800753e <_dtoa_r+0x36e>
 8007558:	07f9      	lsls	r1, r7, #31
 800755a:	d508      	bpl.n	800756e <_dtoa_r+0x39e>
 800755c:	ec51 0b18 	vmov	r0, r1, d8
 8007560:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007564:	f7f9 f850 	bl	8000608 <__aeabi_dmul>
 8007568:	ec41 0b18 	vmov	d8, r0, r1
 800756c:	3501      	adds	r5, #1
 800756e:	107f      	asrs	r7, r7, #1
 8007570:	3608      	adds	r6, #8
 8007572:	e7e5      	b.n	8007540 <_dtoa_r+0x370>
 8007574:	f000 80a6 	beq.w	80076c4 <_dtoa_r+0x4f4>
 8007578:	f1ca 0600 	rsb	r6, sl, #0
 800757c:	4ba5      	ldr	r3, [pc, #660]	; (8007814 <_dtoa_r+0x644>)
 800757e:	4fa6      	ldr	r7, [pc, #664]	; (8007818 <_dtoa_r+0x648>)
 8007580:	f006 020f 	and.w	r2, r6, #15
 8007584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007590:	f7f9 f83a 	bl	8000608 <__aeabi_dmul>
 8007594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007598:	1136      	asrs	r6, r6, #4
 800759a:	2300      	movs	r3, #0
 800759c:	2502      	movs	r5, #2
 800759e:	2e00      	cmp	r6, #0
 80075a0:	f040 8085 	bne.w	80076ae <_dtoa_r+0x4de>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1d2      	bne.n	800754e <_dtoa_r+0x37e>
 80075a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 808c 	beq.w	80076c8 <_dtoa_r+0x4f8>
 80075b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075b4:	4b99      	ldr	r3, [pc, #612]	; (800781c <_dtoa_r+0x64c>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 fa96 	bl	8000aec <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f000 8081 	beq.w	80076c8 <_dtoa_r+0x4f8>
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d07d      	beq.n	80076c8 <_dtoa_r+0x4f8>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	dd3c      	ble.n	800764c <_dtoa_r+0x47c>
 80075d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075d6:	9307      	str	r3, [sp, #28]
 80075d8:	2200      	movs	r2, #0
 80075da:	4b91      	ldr	r3, [pc, #580]	; (8007820 <_dtoa_r+0x650>)
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f7f9 f812 	bl	8000608 <__aeabi_dmul>
 80075e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e8:	3501      	adds	r5, #1
 80075ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80075ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7f8 ff9e 	bl	8000534 <__aeabi_i2d>
 80075f8:	4632      	mov	r2, r6
 80075fa:	463b      	mov	r3, r7
 80075fc:	f7f9 f804 	bl	8000608 <__aeabi_dmul>
 8007600:	4b88      	ldr	r3, [pc, #544]	; (8007824 <_dtoa_r+0x654>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f8 fe4a 	bl	800029c <__adddf3>
 8007608:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800760c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007614:	2b00      	cmp	r3, #0
 8007616:	d15c      	bne.n	80076d2 <_dtoa_r+0x502>
 8007618:	4b83      	ldr	r3, [pc, #524]	; (8007828 <_dtoa_r+0x658>)
 800761a:	2200      	movs	r2, #0
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f8 fe3a 	bl	8000298 <__aeabi_dsub>
 8007624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007628:	4606      	mov	r6, r0
 800762a:	460f      	mov	r7, r1
 800762c:	f7f9 fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8007630:	2800      	cmp	r0, #0
 8007632:	f040 8296 	bne.w	8007b62 <_dtoa_r+0x992>
 8007636:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800763a:	4630      	mov	r0, r6
 800763c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 fa53 	bl	8000aec <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	f040 8288 	bne.w	8007b5c <_dtoa_r+0x98c>
 800764c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007650:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007654:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007656:	2b00      	cmp	r3, #0
 8007658:	f2c0 8158 	blt.w	800790c <_dtoa_r+0x73c>
 800765c:	f1ba 0f0e 	cmp.w	sl, #14
 8007660:	f300 8154 	bgt.w	800790c <_dtoa_r+0x73c>
 8007664:	4b6b      	ldr	r3, [pc, #428]	; (8007814 <_dtoa_r+0x644>)
 8007666:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800766a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	f280 80e3 	bge.w	800783c <_dtoa_r+0x66c>
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f300 80df 	bgt.w	800783c <_dtoa_r+0x66c>
 800767e:	f040 826d 	bne.w	8007b5c <_dtoa_r+0x98c>
 8007682:	4b69      	ldr	r3, [pc, #420]	; (8007828 <_dtoa_r+0x658>)
 8007684:	2200      	movs	r2, #0
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f8 ffbd 	bl	8000608 <__aeabi_dmul>
 800768e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007692:	f7f9 fa3f 	bl	8000b14 <__aeabi_dcmpge>
 8007696:	9e01      	ldr	r6, [sp, #4]
 8007698:	4637      	mov	r7, r6
 800769a:	2800      	cmp	r0, #0
 800769c:	f040 8243 	bne.w	8007b26 <_dtoa_r+0x956>
 80076a0:	9d00      	ldr	r5, [sp, #0]
 80076a2:	2331      	movs	r3, #49	; 0x31
 80076a4:	f805 3b01 	strb.w	r3, [r5], #1
 80076a8:	f10a 0a01 	add.w	sl, sl, #1
 80076ac:	e23f      	b.n	8007b2e <_dtoa_r+0x95e>
 80076ae:	07f2      	lsls	r2, r6, #31
 80076b0:	d505      	bpl.n	80076be <_dtoa_r+0x4ee>
 80076b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b6:	f7f8 ffa7 	bl	8000608 <__aeabi_dmul>
 80076ba:	3501      	adds	r5, #1
 80076bc:	2301      	movs	r3, #1
 80076be:	1076      	asrs	r6, r6, #1
 80076c0:	3708      	adds	r7, #8
 80076c2:	e76c      	b.n	800759e <_dtoa_r+0x3ce>
 80076c4:	2502      	movs	r5, #2
 80076c6:	e76f      	b.n	80075a8 <_dtoa_r+0x3d8>
 80076c8:	9b01      	ldr	r3, [sp, #4]
 80076ca:	f8cd a01c 	str.w	sl, [sp, #28]
 80076ce:	930c      	str	r3, [sp, #48]	; 0x30
 80076d0:	e78d      	b.n	80075ee <_dtoa_r+0x41e>
 80076d2:	9900      	ldr	r1, [sp, #0]
 80076d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076d8:	4b4e      	ldr	r3, [pc, #312]	; (8007814 <_dtoa_r+0x644>)
 80076da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076de:	4401      	add	r1, r0
 80076e0:	9102      	str	r1, [sp, #8]
 80076e2:	9908      	ldr	r1, [sp, #32]
 80076e4:	eeb0 8a47 	vmov.f32	s16, s14
 80076e8:	eef0 8a67 	vmov.f32	s17, s15
 80076ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d045      	beq.n	8007784 <_dtoa_r+0x5b4>
 80076f8:	494c      	ldr	r1, [pc, #304]	; (800782c <_dtoa_r+0x65c>)
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7f9 f8ae 	bl	800085c <__aeabi_ddiv>
 8007700:	ec53 2b18 	vmov	r2, r3, d8
 8007704:	f7f8 fdc8 	bl	8000298 <__aeabi_dsub>
 8007708:	9d00      	ldr	r5, [sp, #0]
 800770a:	ec41 0b18 	vmov	d8, r0, r1
 800770e:	4639      	mov	r1, r7
 8007710:	4630      	mov	r0, r6
 8007712:	f7f9 fa29 	bl	8000b68 <__aeabi_d2iz>
 8007716:	900c      	str	r0, [sp, #48]	; 0x30
 8007718:	f7f8 ff0c 	bl	8000534 <__aeabi_i2d>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f7f8 fdb8 	bl	8000298 <__aeabi_dsub>
 8007728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800772a:	3330      	adds	r3, #48	; 0x30
 800772c:	f805 3b01 	strb.w	r3, [r5], #1
 8007730:	ec53 2b18 	vmov	r2, r3, d8
 8007734:	4606      	mov	r6, r0
 8007736:	460f      	mov	r7, r1
 8007738:	f7f9 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800773c:	2800      	cmp	r0, #0
 800773e:	d165      	bne.n	800780c <_dtoa_r+0x63c>
 8007740:	4632      	mov	r2, r6
 8007742:	463b      	mov	r3, r7
 8007744:	4935      	ldr	r1, [pc, #212]	; (800781c <_dtoa_r+0x64c>)
 8007746:	2000      	movs	r0, #0
 8007748:	f7f8 fda6 	bl	8000298 <__aeabi_dsub>
 800774c:	ec53 2b18 	vmov	r2, r3, d8
 8007750:	f7f9 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8007754:	2800      	cmp	r0, #0
 8007756:	f040 80b9 	bne.w	80078cc <_dtoa_r+0x6fc>
 800775a:	9b02      	ldr	r3, [sp, #8]
 800775c:	429d      	cmp	r5, r3
 800775e:	f43f af75 	beq.w	800764c <_dtoa_r+0x47c>
 8007762:	4b2f      	ldr	r3, [pc, #188]	; (8007820 <_dtoa_r+0x650>)
 8007764:	ec51 0b18 	vmov	r0, r1, d8
 8007768:	2200      	movs	r2, #0
 800776a:	f7f8 ff4d 	bl	8000608 <__aeabi_dmul>
 800776e:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <_dtoa_r+0x650>)
 8007770:	ec41 0b18 	vmov	d8, r0, r1
 8007774:	2200      	movs	r2, #0
 8007776:	4630      	mov	r0, r6
 8007778:	4639      	mov	r1, r7
 800777a:	f7f8 ff45 	bl	8000608 <__aeabi_dmul>
 800777e:	4606      	mov	r6, r0
 8007780:	460f      	mov	r7, r1
 8007782:	e7c4      	b.n	800770e <_dtoa_r+0x53e>
 8007784:	ec51 0b17 	vmov	r0, r1, d7
 8007788:	f7f8 ff3e 	bl	8000608 <__aeabi_dmul>
 800778c:	9b02      	ldr	r3, [sp, #8]
 800778e:	9d00      	ldr	r5, [sp, #0]
 8007790:	930c      	str	r3, [sp, #48]	; 0x30
 8007792:	ec41 0b18 	vmov	d8, r0, r1
 8007796:	4639      	mov	r1, r7
 8007798:	4630      	mov	r0, r6
 800779a:	f7f9 f9e5 	bl	8000b68 <__aeabi_d2iz>
 800779e:	9011      	str	r0, [sp, #68]	; 0x44
 80077a0:	f7f8 fec8 	bl	8000534 <__aeabi_i2d>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f8 fd74 	bl	8000298 <__aeabi_dsub>
 80077b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077b2:	3330      	adds	r3, #48	; 0x30
 80077b4:	f805 3b01 	strb.w	r3, [r5], #1
 80077b8:	9b02      	ldr	r3, [sp, #8]
 80077ba:	429d      	cmp	r5, r3
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	d134      	bne.n	8007830 <_dtoa_r+0x660>
 80077c6:	4b19      	ldr	r3, [pc, #100]	; (800782c <_dtoa_r+0x65c>)
 80077c8:	ec51 0b18 	vmov	r0, r1, d8
 80077cc:	f7f8 fd66 	bl	800029c <__adddf3>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4630      	mov	r0, r6
 80077d6:	4639      	mov	r1, r7
 80077d8:	f7f9 f9a6 	bl	8000b28 <__aeabi_dcmpgt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d175      	bne.n	80078cc <_dtoa_r+0x6fc>
 80077e0:	ec53 2b18 	vmov	r2, r3, d8
 80077e4:	4911      	ldr	r1, [pc, #68]	; (800782c <_dtoa_r+0x65c>)
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7f8 fd56 	bl	8000298 <__aeabi_dsub>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f97a 	bl	8000aec <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f43f af27 	beq.w	800764c <_dtoa_r+0x47c>
 80077fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007800:	1e6b      	subs	r3, r5, #1
 8007802:	930c      	str	r3, [sp, #48]	; 0x30
 8007804:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007808:	2b30      	cmp	r3, #48	; 0x30
 800780a:	d0f8      	beq.n	80077fe <_dtoa_r+0x62e>
 800780c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007810:	e04a      	b.n	80078a8 <_dtoa_r+0x6d8>
 8007812:	bf00      	nop
 8007814:	0800c010 	.word	0x0800c010
 8007818:	0800bfe8 	.word	0x0800bfe8
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	40240000 	.word	0x40240000
 8007824:	401c0000 	.word	0x401c0000
 8007828:	40140000 	.word	0x40140000
 800782c:	3fe00000 	.word	0x3fe00000
 8007830:	4baf      	ldr	r3, [pc, #700]	; (8007af0 <_dtoa_r+0x920>)
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	4606      	mov	r6, r0
 8007838:	460f      	mov	r7, r1
 800783a:	e7ac      	b.n	8007796 <_dtoa_r+0x5c6>
 800783c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007840:	9d00      	ldr	r5, [sp, #0]
 8007842:	4642      	mov	r2, r8
 8007844:	464b      	mov	r3, r9
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f9 f807 	bl	800085c <__aeabi_ddiv>
 800784e:	f7f9 f98b 	bl	8000b68 <__aeabi_d2iz>
 8007852:	9002      	str	r0, [sp, #8]
 8007854:	f7f8 fe6e 	bl	8000534 <__aeabi_i2d>
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	f7f8 fed4 	bl	8000608 <__aeabi_dmul>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4630      	mov	r0, r6
 8007866:	4639      	mov	r1, r7
 8007868:	f7f8 fd16 	bl	8000298 <__aeabi_dsub>
 800786c:	9e02      	ldr	r6, [sp, #8]
 800786e:	9f01      	ldr	r7, [sp, #4]
 8007870:	3630      	adds	r6, #48	; 0x30
 8007872:	f805 6b01 	strb.w	r6, [r5], #1
 8007876:	9e00      	ldr	r6, [sp, #0]
 8007878:	1bae      	subs	r6, r5, r6
 800787a:	42b7      	cmp	r7, r6
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	d137      	bne.n	80078f2 <_dtoa_r+0x722>
 8007882:	f7f8 fd0b 	bl	800029c <__adddf3>
 8007886:	4642      	mov	r2, r8
 8007888:	464b      	mov	r3, r9
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	f7f9 f94b 	bl	8000b28 <__aeabi_dcmpgt>
 8007892:	b9c8      	cbnz	r0, 80078c8 <_dtoa_r+0x6f8>
 8007894:	4642      	mov	r2, r8
 8007896:	464b      	mov	r3, r9
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80078a0:	b110      	cbz	r0, 80078a8 <_dtoa_r+0x6d8>
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	07d9      	lsls	r1, r3, #31
 80078a6:	d40f      	bmi.n	80078c8 <_dtoa_r+0x6f8>
 80078a8:	4620      	mov	r0, r4
 80078aa:	4659      	mov	r1, fp
 80078ac:	f000 fbd0 	bl	8008050 <_Bfree>
 80078b0:	2300      	movs	r3, #0
 80078b2:	702b      	strb	r3, [r5, #0]
 80078b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b6:	f10a 0001 	add.w	r0, sl, #1
 80078ba:	6018      	str	r0, [r3, #0]
 80078bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f43f acd8 	beq.w	8007274 <_dtoa_r+0xa4>
 80078c4:	601d      	str	r5, [r3, #0]
 80078c6:	e4d5      	b.n	8007274 <_dtoa_r+0xa4>
 80078c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80078cc:	462b      	mov	r3, r5
 80078ce:	461d      	mov	r5, r3
 80078d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078d4:	2a39      	cmp	r2, #57	; 0x39
 80078d6:	d108      	bne.n	80078ea <_dtoa_r+0x71a>
 80078d8:	9a00      	ldr	r2, [sp, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d1f7      	bne.n	80078ce <_dtoa_r+0x6fe>
 80078de:	9a07      	ldr	r2, [sp, #28]
 80078e0:	9900      	ldr	r1, [sp, #0]
 80078e2:	3201      	adds	r2, #1
 80078e4:	9207      	str	r2, [sp, #28]
 80078e6:	2230      	movs	r2, #48	; 0x30
 80078e8:	700a      	strb	r2, [r1, #0]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	3201      	adds	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
 80078f0:	e78c      	b.n	800780c <_dtoa_r+0x63c>
 80078f2:	4b7f      	ldr	r3, [pc, #508]	; (8007af0 <_dtoa_r+0x920>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	f7f8 fe87 	bl	8000608 <__aeabi_dmul>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2300      	movs	r3, #0
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	f7f9 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007906:	2800      	cmp	r0, #0
 8007908:	d09b      	beq.n	8007842 <_dtoa_r+0x672>
 800790a:	e7cd      	b.n	80078a8 <_dtoa_r+0x6d8>
 800790c:	9a08      	ldr	r2, [sp, #32]
 800790e:	2a00      	cmp	r2, #0
 8007910:	f000 80c4 	beq.w	8007a9c <_dtoa_r+0x8cc>
 8007914:	9a05      	ldr	r2, [sp, #20]
 8007916:	2a01      	cmp	r2, #1
 8007918:	f300 80a8 	bgt.w	8007a6c <_dtoa_r+0x89c>
 800791c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800791e:	2a00      	cmp	r2, #0
 8007920:	f000 80a0 	beq.w	8007a64 <_dtoa_r+0x894>
 8007924:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007928:	9e06      	ldr	r6, [sp, #24]
 800792a:	4645      	mov	r5, r8
 800792c:	9a04      	ldr	r2, [sp, #16]
 800792e:	2101      	movs	r1, #1
 8007930:	441a      	add	r2, r3
 8007932:	4620      	mov	r0, r4
 8007934:	4498      	add	r8, r3
 8007936:	9204      	str	r2, [sp, #16]
 8007938:	f000 fc46 	bl	80081c8 <__i2b>
 800793c:	4607      	mov	r7, r0
 800793e:	2d00      	cmp	r5, #0
 8007940:	dd0b      	ble.n	800795a <_dtoa_r+0x78a>
 8007942:	9b04      	ldr	r3, [sp, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dd08      	ble.n	800795a <_dtoa_r+0x78a>
 8007948:	42ab      	cmp	r3, r5
 800794a:	9a04      	ldr	r2, [sp, #16]
 800794c:	bfa8      	it	ge
 800794e:	462b      	movge	r3, r5
 8007950:	eba8 0803 	sub.w	r8, r8, r3
 8007954:	1aed      	subs	r5, r5, r3
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	9b06      	ldr	r3, [sp, #24]
 800795c:	b1fb      	cbz	r3, 800799e <_dtoa_r+0x7ce>
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 809f 	beq.w	8007aa4 <_dtoa_r+0x8d4>
 8007966:	2e00      	cmp	r6, #0
 8007968:	dd11      	ble.n	800798e <_dtoa_r+0x7be>
 800796a:	4639      	mov	r1, r7
 800796c:	4632      	mov	r2, r6
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fce6 	bl	8008340 <__pow5mult>
 8007974:	465a      	mov	r2, fp
 8007976:	4601      	mov	r1, r0
 8007978:	4607      	mov	r7, r0
 800797a:	4620      	mov	r0, r4
 800797c:	f000 fc3a 	bl	80081f4 <__multiply>
 8007980:	4659      	mov	r1, fp
 8007982:	9007      	str	r0, [sp, #28]
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fb63 	bl	8008050 <_Bfree>
 800798a:	9b07      	ldr	r3, [sp, #28]
 800798c:	469b      	mov	fp, r3
 800798e:	9b06      	ldr	r3, [sp, #24]
 8007990:	1b9a      	subs	r2, r3, r6
 8007992:	d004      	beq.n	800799e <_dtoa_r+0x7ce>
 8007994:	4659      	mov	r1, fp
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fcd2 	bl	8008340 <__pow5mult>
 800799c:	4683      	mov	fp, r0
 800799e:	2101      	movs	r1, #1
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fc11 	bl	80081c8 <__i2b>
 80079a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	4606      	mov	r6, r0
 80079ac:	dd7c      	ble.n	8007aa8 <_dtoa_r+0x8d8>
 80079ae:	461a      	mov	r2, r3
 80079b0:	4601      	mov	r1, r0
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 fcc4 	bl	8008340 <__pow5mult>
 80079b8:	9b05      	ldr	r3, [sp, #20]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	4606      	mov	r6, r0
 80079be:	dd76      	ble.n	8007aae <_dtoa_r+0x8de>
 80079c0:	2300      	movs	r3, #0
 80079c2:	9306      	str	r3, [sp, #24]
 80079c4:	6933      	ldr	r3, [r6, #16]
 80079c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079ca:	6918      	ldr	r0, [r3, #16]
 80079cc:	f000 fbac 	bl	8008128 <__hi0bits>
 80079d0:	f1c0 0020 	rsb	r0, r0, #32
 80079d4:	9b04      	ldr	r3, [sp, #16]
 80079d6:	4418      	add	r0, r3
 80079d8:	f010 001f 	ands.w	r0, r0, #31
 80079dc:	f000 8086 	beq.w	8007aec <_dtoa_r+0x91c>
 80079e0:	f1c0 0320 	rsb	r3, r0, #32
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	dd7f      	ble.n	8007ae8 <_dtoa_r+0x918>
 80079e8:	f1c0 001c 	rsb	r0, r0, #28
 80079ec:	9b04      	ldr	r3, [sp, #16]
 80079ee:	4403      	add	r3, r0
 80079f0:	4480      	add	r8, r0
 80079f2:	4405      	add	r5, r0
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	dd05      	ble.n	8007a08 <_dtoa_r+0x838>
 80079fc:	4659      	mov	r1, fp
 80079fe:	4642      	mov	r2, r8
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fcf7 	bl	80083f4 <__lshift>
 8007a06:	4683      	mov	fp, r0
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dd05      	ble.n	8007a1a <_dtoa_r+0x84a>
 8007a0e:	4631      	mov	r1, r6
 8007a10:	461a      	mov	r2, r3
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fcee 	bl	80083f4 <__lshift>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d069      	beq.n	8007af4 <_dtoa_r+0x924>
 8007a20:	4631      	mov	r1, r6
 8007a22:	4658      	mov	r0, fp
 8007a24:	f000 fd52 	bl	80084cc <__mcmp>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	da63      	bge.n	8007af4 <_dtoa_r+0x924>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4659      	mov	r1, fp
 8007a30:	220a      	movs	r2, #10
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 fb2e 	bl	8008094 <__multadd>
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a3e:	4683      	mov	fp, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 818f 	beq.w	8007d64 <_dtoa_r+0xb94>
 8007a46:	4639      	mov	r1, r7
 8007a48:	2300      	movs	r3, #0
 8007a4a:	220a      	movs	r2, #10
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f000 fb21 	bl	8008094 <__multadd>
 8007a52:	f1b9 0f00 	cmp.w	r9, #0
 8007a56:	4607      	mov	r7, r0
 8007a58:	f300 808e 	bgt.w	8007b78 <_dtoa_r+0x9a8>
 8007a5c:	9b05      	ldr	r3, [sp, #20]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	dc50      	bgt.n	8007b04 <_dtoa_r+0x934>
 8007a62:	e089      	b.n	8007b78 <_dtoa_r+0x9a8>
 8007a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a6a:	e75d      	b.n	8007928 <_dtoa_r+0x758>
 8007a6c:	9b01      	ldr	r3, [sp, #4]
 8007a6e:	1e5e      	subs	r6, r3, #1
 8007a70:	9b06      	ldr	r3, [sp, #24]
 8007a72:	42b3      	cmp	r3, r6
 8007a74:	bfbf      	itttt	lt
 8007a76:	9b06      	ldrlt	r3, [sp, #24]
 8007a78:	9606      	strlt	r6, [sp, #24]
 8007a7a:	1af2      	sublt	r2, r6, r3
 8007a7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007a7e:	bfb6      	itet	lt
 8007a80:	189b      	addlt	r3, r3, r2
 8007a82:	1b9e      	subge	r6, r3, r6
 8007a84:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007a86:	9b01      	ldr	r3, [sp, #4]
 8007a88:	bfb8      	it	lt
 8007a8a:	2600      	movlt	r6, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfb5      	itete	lt
 8007a90:	eba8 0503 	sublt.w	r5, r8, r3
 8007a94:	9b01      	ldrge	r3, [sp, #4]
 8007a96:	2300      	movlt	r3, #0
 8007a98:	4645      	movge	r5, r8
 8007a9a:	e747      	b.n	800792c <_dtoa_r+0x75c>
 8007a9c:	9e06      	ldr	r6, [sp, #24]
 8007a9e:	9f08      	ldr	r7, [sp, #32]
 8007aa0:	4645      	mov	r5, r8
 8007aa2:	e74c      	b.n	800793e <_dtoa_r+0x76e>
 8007aa4:	9a06      	ldr	r2, [sp, #24]
 8007aa6:	e775      	b.n	8007994 <_dtoa_r+0x7c4>
 8007aa8:	9b05      	ldr	r3, [sp, #20]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	dc18      	bgt.n	8007ae0 <_dtoa_r+0x910>
 8007aae:	9b02      	ldr	r3, [sp, #8]
 8007ab0:	b9b3      	cbnz	r3, 8007ae0 <_dtoa_r+0x910>
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab8:	b9a3      	cbnz	r3, 8007ae4 <_dtoa_r+0x914>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	0d1b      	lsrs	r3, r3, #20
 8007ac2:	051b      	lsls	r3, r3, #20
 8007ac4:	b12b      	cbz	r3, 8007ad2 <_dtoa_r+0x902>
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	9304      	str	r3, [sp, #16]
 8007acc:	f108 0801 	add.w	r8, r8, #1
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	9306      	str	r3, [sp, #24]
 8007ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f47f af74 	bne.w	80079c4 <_dtoa_r+0x7f4>
 8007adc:	2001      	movs	r0, #1
 8007ade:	e779      	b.n	80079d4 <_dtoa_r+0x804>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e7f6      	b.n	8007ad2 <_dtoa_r+0x902>
 8007ae4:	9b02      	ldr	r3, [sp, #8]
 8007ae6:	e7f4      	b.n	8007ad2 <_dtoa_r+0x902>
 8007ae8:	d085      	beq.n	80079f6 <_dtoa_r+0x826>
 8007aea:	4618      	mov	r0, r3
 8007aec:	301c      	adds	r0, #28
 8007aee:	e77d      	b.n	80079ec <_dtoa_r+0x81c>
 8007af0:	40240000 	.word	0x40240000
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	dc38      	bgt.n	8007b6c <_dtoa_r+0x99c>
 8007afa:	9b05      	ldr	r3, [sp, #20]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	dd35      	ble.n	8007b6c <_dtoa_r+0x99c>
 8007b00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b04:	f1b9 0f00 	cmp.w	r9, #0
 8007b08:	d10d      	bne.n	8007b26 <_dtoa_r+0x956>
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	2205      	movs	r2, #5
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fabf 	bl	8008094 <__multadd>
 8007b16:	4601      	mov	r1, r0
 8007b18:	4606      	mov	r6, r0
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f000 fcd6 	bl	80084cc <__mcmp>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f73f adbd 	bgt.w	80076a0 <_dtoa_r+0x4d0>
 8007b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b28:	9d00      	ldr	r5, [sp, #0]
 8007b2a:	ea6f 0a03 	mvn.w	sl, r3
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	4631      	mov	r1, r6
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fa8b 	bl	8008050 <_Bfree>
 8007b3a:	2f00      	cmp	r7, #0
 8007b3c:	f43f aeb4 	beq.w	80078a8 <_dtoa_r+0x6d8>
 8007b40:	f1b8 0f00 	cmp.w	r8, #0
 8007b44:	d005      	beq.n	8007b52 <_dtoa_r+0x982>
 8007b46:	45b8      	cmp	r8, r7
 8007b48:	d003      	beq.n	8007b52 <_dtoa_r+0x982>
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fa7f 	bl	8008050 <_Bfree>
 8007b52:	4639      	mov	r1, r7
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fa7b 	bl	8008050 <_Bfree>
 8007b5a:	e6a5      	b.n	80078a8 <_dtoa_r+0x6d8>
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	4637      	mov	r7, r6
 8007b60:	e7e1      	b.n	8007b26 <_dtoa_r+0x956>
 8007b62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b68:	4637      	mov	r7, r6
 8007b6a:	e599      	b.n	80076a0 <_dtoa_r+0x4d0>
 8007b6c:	9b08      	ldr	r3, [sp, #32]
 8007b6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80fd 	beq.w	8007d72 <_dtoa_r+0xba2>
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	dd05      	ble.n	8007b88 <_dtoa_r+0x9b8>
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fc37 	bl	80083f4 <__lshift>
 8007b86:	4607      	mov	r7, r0
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d05c      	beq.n	8007c48 <_dtoa_r+0xa78>
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fa1d 	bl	8007fd0 <_Balloc>
 8007b96:	4605      	mov	r5, r0
 8007b98:	b928      	cbnz	r0, 8007ba6 <_dtoa_r+0x9d6>
 8007b9a:	4b80      	ldr	r3, [pc, #512]	; (8007d9c <_dtoa_r+0xbcc>)
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ba2:	f7ff bb2e 	b.w	8007202 <_dtoa_r+0x32>
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	3202      	adds	r2, #2
 8007baa:	0092      	lsls	r2, r2, #2
 8007bac:	f107 010c 	add.w	r1, r7, #12
 8007bb0:	300c      	adds	r0, #12
 8007bb2:	f000 f9ff 	bl	8007fb4 <memcpy>
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fc1a 	bl	80083f4 <__lshift>
 8007bc0:	9b00      	ldr	r3, [sp, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	9b00      	ldr	r3, [sp, #0]
 8007bc8:	444b      	add	r3, r9
 8007bca:	9307      	str	r3, [sp, #28]
 8007bcc:	9b02      	ldr	r3, [sp, #8]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	46b8      	mov	r8, r7
 8007bd4:	9306      	str	r3, [sp, #24]
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	9b01      	ldr	r3, [sp, #4]
 8007bda:	4631      	mov	r1, r6
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4658      	mov	r0, fp
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	f7ff fa67 	bl	80070b4 <quorem>
 8007be6:	4603      	mov	r3, r0
 8007be8:	3330      	adds	r3, #48	; 0x30
 8007bea:	9004      	str	r0, [sp, #16]
 8007bec:	4641      	mov	r1, r8
 8007bee:	4658      	mov	r0, fp
 8007bf0:	9308      	str	r3, [sp, #32]
 8007bf2:	f000 fc6b 	bl	80084cc <__mcmp>
 8007bf6:	463a      	mov	r2, r7
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fc81 	bl	8008504 <__mdiff>
 8007c02:	68c2      	ldr	r2, [r0, #12]
 8007c04:	9b08      	ldr	r3, [sp, #32]
 8007c06:	4605      	mov	r5, r0
 8007c08:	bb02      	cbnz	r2, 8007c4c <_dtoa_r+0xa7c>
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	f000 fc5d 	bl	80084cc <__mcmp>
 8007c12:	9b08      	ldr	r3, [sp, #32]
 8007c14:	4602      	mov	r2, r0
 8007c16:	4629      	mov	r1, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007c1e:	f000 fa17 	bl	8008050 <_Bfree>
 8007c22:	9b05      	ldr	r3, [sp, #20]
 8007c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c26:	9d01      	ldr	r5, [sp, #4]
 8007c28:	ea43 0102 	orr.w	r1, r3, r2
 8007c2c:	9b06      	ldr	r3, [sp, #24]
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	9b08      	ldr	r3, [sp, #32]
 8007c32:	d10d      	bne.n	8007c50 <_dtoa_r+0xa80>
 8007c34:	2b39      	cmp	r3, #57	; 0x39
 8007c36:	d029      	beq.n	8007c8c <_dtoa_r+0xabc>
 8007c38:	f1b9 0f00 	cmp.w	r9, #0
 8007c3c:	dd01      	ble.n	8007c42 <_dtoa_r+0xa72>
 8007c3e:	9b04      	ldr	r3, [sp, #16]
 8007c40:	3331      	adds	r3, #49	; 0x31
 8007c42:	9a02      	ldr	r2, [sp, #8]
 8007c44:	7013      	strb	r3, [r2, #0]
 8007c46:	e774      	b.n	8007b32 <_dtoa_r+0x962>
 8007c48:	4638      	mov	r0, r7
 8007c4a:	e7b9      	b.n	8007bc0 <_dtoa_r+0x9f0>
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	e7e2      	b.n	8007c16 <_dtoa_r+0xa46>
 8007c50:	f1b9 0f00 	cmp.w	r9, #0
 8007c54:	db06      	blt.n	8007c64 <_dtoa_r+0xa94>
 8007c56:	9905      	ldr	r1, [sp, #20]
 8007c58:	ea41 0909 	orr.w	r9, r1, r9
 8007c5c:	9906      	ldr	r1, [sp, #24]
 8007c5e:	ea59 0101 	orrs.w	r1, r9, r1
 8007c62:	d120      	bne.n	8007ca6 <_dtoa_r+0xad6>
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	ddec      	ble.n	8007c42 <_dtoa_r+0xa72>
 8007c68:	4659      	mov	r1, fp
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	f000 fbc0 	bl	80083f4 <__lshift>
 8007c74:	4631      	mov	r1, r6
 8007c76:	4683      	mov	fp, r0
 8007c78:	f000 fc28 	bl	80084cc <__mcmp>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	dc02      	bgt.n	8007c88 <_dtoa_r+0xab8>
 8007c82:	d1de      	bne.n	8007c42 <_dtoa_r+0xa72>
 8007c84:	07da      	lsls	r2, r3, #31
 8007c86:	d5dc      	bpl.n	8007c42 <_dtoa_r+0xa72>
 8007c88:	2b39      	cmp	r3, #57	; 0x39
 8007c8a:	d1d8      	bne.n	8007c3e <_dtoa_r+0xa6e>
 8007c8c:	9a02      	ldr	r2, [sp, #8]
 8007c8e:	2339      	movs	r3, #57	; 0x39
 8007c90:	7013      	strb	r3, [r2, #0]
 8007c92:	462b      	mov	r3, r5
 8007c94:	461d      	mov	r5, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c9c:	2a39      	cmp	r2, #57	; 0x39
 8007c9e:	d050      	beq.n	8007d42 <_dtoa_r+0xb72>
 8007ca0:	3201      	adds	r2, #1
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e745      	b.n	8007b32 <_dtoa_r+0x962>
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	dd03      	ble.n	8007cb2 <_dtoa_r+0xae2>
 8007caa:	2b39      	cmp	r3, #57	; 0x39
 8007cac:	d0ee      	beq.n	8007c8c <_dtoa_r+0xabc>
 8007cae:	3301      	adds	r3, #1
 8007cb0:	e7c7      	b.n	8007c42 <_dtoa_r+0xa72>
 8007cb2:	9a01      	ldr	r2, [sp, #4]
 8007cb4:	9907      	ldr	r1, [sp, #28]
 8007cb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cba:	428a      	cmp	r2, r1
 8007cbc:	d02a      	beq.n	8007d14 <_dtoa_r+0xb44>
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 f9e5 	bl	8008094 <__multadd>
 8007cca:	45b8      	cmp	r8, r7
 8007ccc:	4683      	mov	fp, r0
 8007cce:	f04f 0300 	mov.w	r3, #0
 8007cd2:	f04f 020a 	mov.w	r2, #10
 8007cd6:	4641      	mov	r1, r8
 8007cd8:	4620      	mov	r0, r4
 8007cda:	d107      	bne.n	8007cec <_dtoa_r+0xb1c>
 8007cdc:	f000 f9da 	bl	8008094 <__multadd>
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	e775      	b.n	8007bd8 <_dtoa_r+0xa08>
 8007cec:	f000 f9d2 	bl	8008094 <__multadd>
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	220a      	movs	r2, #10
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 f9cb 	bl	8008094 <__multadd>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	e7f0      	b.n	8007ce4 <_dtoa_r+0xb14>
 8007d02:	f1b9 0f00 	cmp.w	r9, #0
 8007d06:	9a00      	ldr	r2, [sp, #0]
 8007d08:	bfcc      	ite	gt
 8007d0a:	464d      	movgt	r5, r9
 8007d0c:	2501      	movle	r5, #1
 8007d0e:	4415      	add	r5, r2
 8007d10:	f04f 0800 	mov.w	r8, #0
 8007d14:	4659      	mov	r1, fp
 8007d16:	2201      	movs	r2, #1
 8007d18:	4620      	mov	r0, r4
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	f000 fb6a 	bl	80083f4 <__lshift>
 8007d20:	4631      	mov	r1, r6
 8007d22:	4683      	mov	fp, r0
 8007d24:	f000 fbd2 	bl	80084cc <__mcmp>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	dcb2      	bgt.n	8007c92 <_dtoa_r+0xac2>
 8007d2c:	d102      	bne.n	8007d34 <_dtoa_r+0xb64>
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	07db      	lsls	r3, r3, #31
 8007d32:	d4ae      	bmi.n	8007c92 <_dtoa_r+0xac2>
 8007d34:	462b      	mov	r3, r5
 8007d36:	461d      	mov	r5, r3
 8007d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3c:	2a30      	cmp	r2, #48	; 0x30
 8007d3e:	d0fa      	beq.n	8007d36 <_dtoa_r+0xb66>
 8007d40:	e6f7      	b.n	8007b32 <_dtoa_r+0x962>
 8007d42:	9a00      	ldr	r2, [sp, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d1a5      	bne.n	8007c94 <_dtoa_r+0xac4>
 8007d48:	f10a 0a01 	add.w	sl, sl, #1
 8007d4c:	2331      	movs	r3, #49	; 0x31
 8007d4e:	e779      	b.n	8007c44 <_dtoa_r+0xa74>
 8007d50:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <_dtoa_r+0xbd0>)
 8007d52:	f7ff baaf 	b.w	80072b4 <_dtoa_r+0xe4>
 8007d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f47f aa86 	bne.w	800726a <_dtoa_r+0x9a>
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <_dtoa_r+0xbd4>)
 8007d60:	f7ff baa8 	b.w	80072b4 <_dtoa_r+0xe4>
 8007d64:	f1b9 0f00 	cmp.w	r9, #0
 8007d68:	dc03      	bgt.n	8007d72 <_dtoa_r+0xba2>
 8007d6a:	9b05      	ldr	r3, [sp, #20]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	f73f aec9 	bgt.w	8007b04 <_dtoa_r+0x934>
 8007d72:	9d00      	ldr	r5, [sp, #0]
 8007d74:	4631      	mov	r1, r6
 8007d76:	4658      	mov	r0, fp
 8007d78:	f7ff f99c 	bl	80070b4 <quorem>
 8007d7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d80:	f805 3b01 	strb.w	r3, [r5], #1
 8007d84:	9a00      	ldr	r2, [sp, #0]
 8007d86:	1aaa      	subs	r2, r5, r2
 8007d88:	4591      	cmp	r9, r2
 8007d8a:	ddba      	ble.n	8007d02 <_dtoa_r+0xb32>
 8007d8c:	4659      	mov	r1, fp
 8007d8e:	2300      	movs	r3, #0
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f97e 	bl	8008094 <__multadd>
 8007d98:	4683      	mov	fp, r0
 8007d9a:	e7eb      	b.n	8007d74 <_dtoa_r+0xba4>
 8007d9c:	0800bf13 	.word	0x0800bf13
 8007da0:	0800be6c 	.word	0x0800be6c
 8007da4:	0800be90 	.word	0x0800be90

08007da8 <std>:
 8007da8:	2300      	movs	r3, #0
 8007daa:	b510      	push	{r4, lr}
 8007dac:	4604      	mov	r4, r0
 8007dae:	e9c0 3300 	strd	r3, r3, [r0]
 8007db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db6:	6083      	str	r3, [r0, #8]
 8007db8:	8181      	strh	r1, [r0, #12]
 8007dba:	6643      	str	r3, [r0, #100]	; 0x64
 8007dbc:	81c2      	strh	r2, [r0, #14]
 8007dbe:	6183      	str	r3, [r0, #24]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	305c      	adds	r0, #92	; 0x5c
 8007dc6:	f7fe fccb 	bl	8006760 <memset>
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <std+0x38>)
 8007dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x3c>)
 8007dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x40>)
 8007dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x44>)
 8007dd8:	6224      	str	r4, [r4, #32]
 8007dda:	6323      	str	r3, [r4, #48]	; 0x30
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	bf00      	nop
 8007de0:	08008dcd 	.word	0x08008dcd
 8007de4:	08008def 	.word	0x08008def
 8007de8:	08008e27 	.word	0x08008e27
 8007dec:	08008e4b 	.word	0x08008e4b

08007df0 <_cleanup_r>:
 8007df0:	4901      	ldr	r1, [pc, #4]	; (8007df8 <_cleanup_r+0x8>)
 8007df2:	f000 b8af 	b.w	8007f54 <_fwalk_reent>
 8007df6:	bf00      	nop
 8007df8:	08009161 	.word	0x08009161

08007dfc <__sfmoreglue>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	1e4a      	subs	r2, r1, #1
 8007e00:	2568      	movs	r5, #104	; 0x68
 8007e02:	4355      	muls	r5, r2
 8007e04:	460e      	mov	r6, r1
 8007e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0a:	f000 fcbf 	bl	800878c <_malloc_r>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	b140      	cbz	r0, 8007e24 <__sfmoreglue+0x28>
 8007e12:	2100      	movs	r1, #0
 8007e14:	e9c0 1600 	strd	r1, r6, [r0]
 8007e18:	300c      	adds	r0, #12
 8007e1a:	60a0      	str	r0, [r4, #8]
 8007e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e20:	f7fe fc9e 	bl	8006760 <memset>
 8007e24:	4620      	mov	r0, r4
 8007e26:	bd70      	pop	{r4, r5, r6, pc}

08007e28 <__sfp_lock_acquire>:
 8007e28:	4801      	ldr	r0, [pc, #4]	; (8007e30 <__sfp_lock_acquire+0x8>)
 8007e2a:	f000 b8b8 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8007e2e:	bf00      	nop
 8007e30:	200003fc 	.word	0x200003fc

08007e34 <__sfp_lock_release>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__sfp_lock_release+0x8>)
 8007e36:	f000 b8b3 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	200003fc 	.word	0x200003fc

08007e40 <__sinit_lock_acquire>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__sinit_lock_acquire+0x8>)
 8007e42:	f000 b8ac 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8007e46:	bf00      	nop
 8007e48:	200003f7 	.word	0x200003f7

08007e4c <__sinit_lock_release>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <__sinit_lock_release+0x8>)
 8007e4e:	f000 b8a7 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8007e52:	bf00      	nop
 8007e54:	200003f7 	.word	0x200003f7

08007e58 <__sinit>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	f7ff fff0 	bl	8007e40 <__sinit_lock_acquire>
 8007e60:	69a3      	ldr	r3, [r4, #24]
 8007e62:	b11b      	cbz	r3, 8007e6c <__sinit+0x14>
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f7ff bff0 	b.w	8007e4c <__sinit_lock_release>
 8007e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e70:	6523      	str	r3, [r4, #80]	; 0x50
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <__sinit+0x68>)
 8007e74:	4a13      	ldr	r2, [pc, #76]	; (8007ec4 <__sinit+0x6c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	bf04      	itt	eq
 8007e7e:	2301      	moveq	r3, #1
 8007e80:	61a3      	streq	r3, [r4, #24]
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f820 	bl	8007ec8 <__sfp>
 8007e88:	6060      	str	r0, [r4, #4]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f81c 	bl	8007ec8 <__sfp>
 8007e90:	60a0      	str	r0, [r4, #8]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f818 	bl	8007ec8 <__sfp>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	60e0      	str	r0, [r4, #12]
 8007e9c:	2104      	movs	r1, #4
 8007e9e:	6860      	ldr	r0, [r4, #4]
 8007ea0:	f7ff ff82 	bl	8007da8 <std>
 8007ea4:	68a0      	ldr	r0, [r4, #8]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	2109      	movs	r1, #9
 8007eaa:	f7ff ff7d 	bl	8007da8 <std>
 8007eae:	68e0      	ldr	r0, [r4, #12]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	2112      	movs	r1, #18
 8007eb4:	f7ff ff78 	bl	8007da8 <std>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61a3      	str	r3, [r4, #24]
 8007ebc:	e7d2      	b.n	8007e64 <__sinit+0xc>
 8007ebe:	bf00      	nop
 8007ec0:	0800be58 	.word	0x0800be58
 8007ec4:	08007df1 	.word	0x08007df1

08007ec8 <__sfp>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	4607      	mov	r7, r0
 8007ecc:	f7ff ffac 	bl	8007e28 <__sfp_lock_acquire>
 8007ed0:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <__sfp+0x84>)
 8007ed2:	681e      	ldr	r6, [r3, #0]
 8007ed4:	69b3      	ldr	r3, [r6, #24]
 8007ed6:	b913      	cbnz	r3, 8007ede <__sfp+0x16>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7ff ffbd 	bl	8007e58 <__sinit>
 8007ede:	3648      	adds	r6, #72	; 0x48
 8007ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	d503      	bpl.n	8007ef0 <__sfp+0x28>
 8007ee8:	6833      	ldr	r3, [r6, #0]
 8007eea:	b30b      	cbz	r3, 8007f30 <__sfp+0x68>
 8007eec:	6836      	ldr	r6, [r6, #0]
 8007eee:	e7f7      	b.n	8007ee0 <__sfp+0x18>
 8007ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ef4:	b9d5      	cbnz	r5, 8007f2c <__sfp+0x64>
 8007ef6:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <__sfp+0x88>)
 8007ef8:	60e3      	str	r3, [r4, #12]
 8007efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007efe:	6665      	str	r5, [r4, #100]	; 0x64
 8007f00:	f000 f84c 	bl	8007f9c <__retarget_lock_init_recursive>
 8007f04:	f7ff ff96 	bl	8007e34 <__sfp_lock_release>
 8007f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f10:	6025      	str	r5, [r4, #0]
 8007f12:	61a5      	str	r5, [r4, #24]
 8007f14:	2208      	movs	r2, #8
 8007f16:	4629      	mov	r1, r5
 8007f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f1c:	f7fe fc20 	bl	8006760 <memset>
 8007f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f28:	4620      	mov	r0, r4
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	3468      	adds	r4, #104	; 0x68
 8007f2e:	e7d9      	b.n	8007ee4 <__sfp+0x1c>
 8007f30:	2104      	movs	r1, #4
 8007f32:	4638      	mov	r0, r7
 8007f34:	f7ff ff62 	bl	8007dfc <__sfmoreglue>
 8007f38:	4604      	mov	r4, r0
 8007f3a:	6030      	str	r0, [r6, #0]
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d1d5      	bne.n	8007eec <__sfp+0x24>
 8007f40:	f7ff ff78 	bl	8007e34 <__sfp_lock_release>
 8007f44:	230c      	movs	r3, #12
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	e7ee      	b.n	8007f28 <__sfp+0x60>
 8007f4a:	bf00      	nop
 8007f4c:	0800be58 	.word	0x0800be58
 8007f50:	ffff0001 	.word	0xffff0001

08007f54 <_fwalk_reent>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4606      	mov	r6, r0
 8007f5a:	4688      	mov	r8, r1
 8007f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f60:	2700      	movs	r7, #0
 8007f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f66:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6a:	d505      	bpl.n	8007f78 <_fwalk_reent+0x24>
 8007f6c:	6824      	ldr	r4, [r4, #0]
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d1f7      	bne.n	8007f62 <_fwalk_reent+0xe>
 8007f72:	4638      	mov	r0, r7
 8007f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f78:	89ab      	ldrh	r3, [r5, #12]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d907      	bls.n	8007f8e <_fwalk_reent+0x3a>
 8007f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f82:	3301      	adds	r3, #1
 8007f84:	d003      	beq.n	8007f8e <_fwalk_reent+0x3a>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4630      	mov	r0, r6
 8007f8a:	47c0      	blx	r8
 8007f8c:	4307      	orrs	r7, r0
 8007f8e:	3568      	adds	r5, #104	; 0x68
 8007f90:	e7e9      	b.n	8007f66 <_fwalk_reent+0x12>
	...

08007f94 <_localeconv_r>:
 8007f94:	4800      	ldr	r0, [pc, #0]	; (8007f98 <_localeconv_r+0x4>)
 8007f96:	4770      	bx	lr
 8007f98:	20000178 	.word	0x20000178

08007f9c <__retarget_lock_init_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_acquire_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <__retarget_lock_release_recursive>:
 8007fa0:	4770      	bx	lr
	...

08007fa4 <malloc>:
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <malloc+0xc>)
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f000 bbef 	b.w	800878c <_malloc_r>
 8007fae:	bf00      	nop
 8007fb0:	20000024 	.word	0x20000024

08007fb4 <memcpy>:
 8007fb4:	440a      	add	r2, r1
 8007fb6:	4291      	cmp	r1, r2
 8007fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fbc:	d100      	bne.n	8007fc0 <memcpy+0xc>
 8007fbe:	4770      	bx	lr
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fca:	4291      	cmp	r1, r2
 8007fcc:	d1f9      	bne.n	8007fc2 <memcpy+0xe>
 8007fce:	bd10      	pop	{r4, pc}

08007fd0 <_Balloc>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	460d      	mov	r5, r1
 8007fd8:	b976      	cbnz	r6, 8007ff8 <_Balloc+0x28>
 8007fda:	2010      	movs	r0, #16
 8007fdc:	f7ff ffe2 	bl	8007fa4 <malloc>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8007fe4:	b920      	cbnz	r0, 8007ff0 <_Balloc+0x20>
 8007fe6:	4b18      	ldr	r3, [pc, #96]	; (8008048 <_Balloc+0x78>)
 8007fe8:	4818      	ldr	r0, [pc, #96]	; (800804c <_Balloc+0x7c>)
 8007fea:	2166      	movs	r1, #102	; 0x66
 8007fec:	f001 f804 	bl	8008ff8 <__assert_func>
 8007ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff4:	6006      	str	r6, [r0, #0]
 8007ff6:	60c6      	str	r6, [r0, #12]
 8007ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ffa:	68f3      	ldr	r3, [r6, #12]
 8007ffc:	b183      	cbz	r3, 8008020 <_Balloc+0x50>
 8007ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008006:	b9b8      	cbnz	r0, 8008038 <_Balloc+0x68>
 8008008:	2101      	movs	r1, #1
 800800a:	fa01 f605 	lsl.w	r6, r1, r5
 800800e:	1d72      	adds	r2, r6, #5
 8008010:	0092      	lsls	r2, r2, #2
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fb5a 	bl	80086cc <_calloc_r>
 8008018:	b160      	cbz	r0, 8008034 <_Balloc+0x64>
 800801a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800801e:	e00e      	b.n	800803e <_Balloc+0x6e>
 8008020:	2221      	movs	r2, #33	; 0x21
 8008022:	2104      	movs	r1, #4
 8008024:	4620      	mov	r0, r4
 8008026:	f000 fb51 	bl	80086cc <_calloc_r>
 800802a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800802c:	60f0      	str	r0, [r6, #12]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e4      	bne.n	8007ffe <_Balloc+0x2e>
 8008034:	2000      	movs	r0, #0
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	6802      	ldr	r2, [r0, #0]
 800803a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800803e:	2300      	movs	r3, #0
 8008040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008044:	e7f7      	b.n	8008036 <_Balloc+0x66>
 8008046:	bf00      	nop
 8008048:	0800be9d 	.word	0x0800be9d
 800804c:	0800bf84 	.word	0x0800bf84

08008050 <_Bfree>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008054:	4605      	mov	r5, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b976      	cbnz	r6, 8008078 <_Bfree+0x28>
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff ffa2 	bl	8007fa4 <malloc>
 8008060:	4602      	mov	r2, r0
 8008062:	6268      	str	r0, [r5, #36]	; 0x24
 8008064:	b920      	cbnz	r0, 8008070 <_Bfree+0x20>
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <_Bfree+0x3c>)
 8008068:	4809      	ldr	r0, [pc, #36]	; (8008090 <_Bfree+0x40>)
 800806a:	218a      	movs	r1, #138	; 0x8a
 800806c:	f000 ffc4 	bl	8008ff8 <__assert_func>
 8008070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008074:	6006      	str	r6, [r0, #0]
 8008076:	60c6      	str	r6, [r0, #12]
 8008078:	b13c      	cbz	r4, 800808a <_Bfree+0x3a>
 800807a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800807c:	6862      	ldr	r2, [r4, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008084:	6021      	str	r1, [r4, #0]
 8008086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	0800be9d 	.word	0x0800be9d
 8008090:	0800bf84 	.word	0x0800bf84

08008094 <__multadd>:
 8008094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008098:	690e      	ldr	r6, [r1, #16]
 800809a:	4607      	mov	r7, r0
 800809c:	4698      	mov	r8, r3
 800809e:	460c      	mov	r4, r1
 80080a0:	f101 0014 	add.w	r0, r1, #20
 80080a4:	2300      	movs	r3, #0
 80080a6:	6805      	ldr	r5, [r0, #0]
 80080a8:	b2a9      	uxth	r1, r5
 80080aa:	fb02 8101 	mla	r1, r2, r1, r8
 80080ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80080b2:	0c2d      	lsrs	r5, r5, #16
 80080b4:	fb02 c505 	mla	r5, r2, r5, ip
 80080b8:	b289      	uxth	r1, r1
 80080ba:	3301      	adds	r3, #1
 80080bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80080c0:	429e      	cmp	r6, r3
 80080c2:	f840 1b04 	str.w	r1, [r0], #4
 80080c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80080ca:	dcec      	bgt.n	80080a6 <__multadd+0x12>
 80080cc:	f1b8 0f00 	cmp.w	r8, #0
 80080d0:	d022      	beq.n	8008118 <__multadd+0x84>
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	42b3      	cmp	r3, r6
 80080d6:	dc19      	bgt.n	800810c <__multadd+0x78>
 80080d8:	6861      	ldr	r1, [r4, #4]
 80080da:	4638      	mov	r0, r7
 80080dc:	3101      	adds	r1, #1
 80080de:	f7ff ff77 	bl	8007fd0 <_Balloc>
 80080e2:	4605      	mov	r5, r0
 80080e4:	b928      	cbnz	r0, 80080f2 <__multadd+0x5e>
 80080e6:	4602      	mov	r2, r0
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <__multadd+0x8c>)
 80080ea:	480e      	ldr	r0, [pc, #56]	; (8008124 <__multadd+0x90>)
 80080ec:	21b5      	movs	r1, #181	; 0xb5
 80080ee:	f000 ff83 	bl	8008ff8 <__assert_func>
 80080f2:	6922      	ldr	r2, [r4, #16]
 80080f4:	3202      	adds	r2, #2
 80080f6:	f104 010c 	add.w	r1, r4, #12
 80080fa:	0092      	lsls	r2, r2, #2
 80080fc:	300c      	adds	r0, #12
 80080fe:	f7ff ff59 	bl	8007fb4 <memcpy>
 8008102:	4621      	mov	r1, r4
 8008104:	4638      	mov	r0, r7
 8008106:	f7ff ffa3 	bl	8008050 <_Bfree>
 800810a:	462c      	mov	r4, r5
 800810c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008110:	3601      	adds	r6, #1
 8008112:	f8c3 8014 	str.w	r8, [r3, #20]
 8008116:	6126      	str	r6, [r4, #16]
 8008118:	4620      	mov	r0, r4
 800811a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800811e:	bf00      	nop
 8008120:	0800bf13 	.word	0x0800bf13
 8008124:	0800bf84 	.word	0x0800bf84

08008128 <__hi0bits>:
 8008128:	0c03      	lsrs	r3, r0, #16
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	b9d3      	cbnz	r3, 8008164 <__hi0bits+0x3c>
 800812e:	0400      	lsls	r0, r0, #16
 8008130:	2310      	movs	r3, #16
 8008132:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008136:	bf04      	itt	eq
 8008138:	0200      	lsleq	r0, r0, #8
 800813a:	3308      	addeq	r3, #8
 800813c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008140:	bf04      	itt	eq
 8008142:	0100      	lsleq	r0, r0, #4
 8008144:	3304      	addeq	r3, #4
 8008146:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800814a:	bf04      	itt	eq
 800814c:	0080      	lsleq	r0, r0, #2
 800814e:	3302      	addeq	r3, #2
 8008150:	2800      	cmp	r0, #0
 8008152:	db05      	blt.n	8008160 <__hi0bits+0x38>
 8008154:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008158:	f103 0301 	add.w	r3, r3, #1
 800815c:	bf08      	it	eq
 800815e:	2320      	moveq	r3, #32
 8008160:	4618      	mov	r0, r3
 8008162:	4770      	bx	lr
 8008164:	2300      	movs	r3, #0
 8008166:	e7e4      	b.n	8008132 <__hi0bits+0xa>

08008168 <__lo0bits>:
 8008168:	6803      	ldr	r3, [r0, #0]
 800816a:	f013 0207 	ands.w	r2, r3, #7
 800816e:	4601      	mov	r1, r0
 8008170:	d00b      	beq.n	800818a <__lo0bits+0x22>
 8008172:	07da      	lsls	r2, r3, #31
 8008174:	d424      	bmi.n	80081c0 <__lo0bits+0x58>
 8008176:	0798      	lsls	r0, r3, #30
 8008178:	bf49      	itett	mi
 800817a:	085b      	lsrmi	r3, r3, #1
 800817c:	089b      	lsrpl	r3, r3, #2
 800817e:	2001      	movmi	r0, #1
 8008180:	600b      	strmi	r3, [r1, #0]
 8008182:	bf5c      	itt	pl
 8008184:	600b      	strpl	r3, [r1, #0]
 8008186:	2002      	movpl	r0, #2
 8008188:	4770      	bx	lr
 800818a:	b298      	uxth	r0, r3
 800818c:	b9b0      	cbnz	r0, 80081bc <__lo0bits+0x54>
 800818e:	0c1b      	lsrs	r3, r3, #16
 8008190:	2010      	movs	r0, #16
 8008192:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008196:	bf04      	itt	eq
 8008198:	0a1b      	lsreq	r3, r3, #8
 800819a:	3008      	addeq	r0, #8
 800819c:	071a      	lsls	r2, r3, #28
 800819e:	bf04      	itt	eq
 80081a0:	091b      	lsreq	r3, r3, #4
 80081a2:	3004      	addeq	r0, #4
 80081a4:	079a      	lsls	r2, r3, #30
 80081a6:	bf04      	itt	eq
 80081a8:	089b      	lsreq	r3, r3, #2
 80081aa:	3002      	addeq	r0, #2
 80081ac:	07da      	lsls	r2, r3, #31
 80081ae:	d403      	bmi.n	80081b8 <__lo0bits+0x50>
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	f100 0001 	add.w	r0, r0, #1
 80081b6:	d005      	beq.n	80081c4 <__lo0bits+0x5c>
 80081b8:	600b      	str	r3, [r1, #0]
 80081ba:	4770      	bx	lr
 80081bc:	4610      	mov	r0, r2
 80081be:	e7e8      	b.n	8008192 <__lo0bits+0x2a>
 80081c0:	2000      	movs	r0, #0
 80081c2:	4770      	bx	lr
 80081c4:	2020      	movs	r0, #32
 80081c6:	4770      	bx	lr

080081c8 <__i2b>:
 80081c8:	b510      	push	{r4, lr}
 80081ca:	460c      	mov	r4, r1
 80081cc:	2101      	movs	r1, #1
 80081ce:	f7ff feff 	bl	8007fd0 <_Balloc>
 80081d2:	4602      	mov	r2, r0
 80081d4:	b928      	cbnz	r0, 80081e2 <__i2b+0x1a>
 80081d6:	4b05      	ldr	r3, [pc, #20]	; (80081ec <__i2b+0x24>)
 80081d8:	4805      	ldr	r0, [pc, #20]	; (80081f0 <__i2b+0x28>)
 80081da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081de:	f000 ff0b 	bl	8008ff8 <__assert_func>
 80081e2:	2301      	movs	r3, #1
 80081e4:	6144      	str	r4, [r0, #20]
 80081e6:	6103      	str	r3, [r0, #16]
 80081e8:	bd10      	pop	{r4, pc}
 80081ea:	bf00      	nop
 80081ec:	0800bf13 	.word	0x0800bf13
 80081f0:	0800bf84 	.word	0x0800bf84

080081f4 <__multiply>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	4614      	mov	r4, r2
 80081fa:	690a      	ldr	r2, [r1, #16]
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	429a      	cmp	r2, r3
 8008200:	bfb8      	it	lt
 8008202:	460b      	movlt	r3, r1
 8008204:	460d      	mov	r5, r1
 8008206:	bfbc      	itt	lt
 8008208:	4625      	movlt	r5, r4
 800820a:	461c      	movlt	r4, r3
 800820c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008210:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008214:	68ab      	ldr	r3, [r5, #8]
 8008216:	6869      	ldr	r1, [r5, #4]
 8008218:	eb0a 0709 	add.w	r7, sl, r9
 800821c:	42bb      	cmp	r3, r7
 800821e:	b085      	sub	sp, #20
 8008220:	bfb8      	it	lt
 8008222:	3101      	addlt	r1, #1
 8008224:	f7ff fed4 	bl	8007fd0 <_Balloc>
 8008228:	b930      	cbnz	r0, 8008238 <__multiply+0x44>
 800822a:	4602      	mov	r2, r0
 800822c:	4b42      	ldr	r3, [pc, #264]	; (8008338 <__multiply+0x144>)
 800822e:	4843      	ldr	r0, [pc, #268]	; (800833c <__multiply+0x148>)
 8008230:	f240 115d 	movw	r1, #349	; 0x15d
 8008234:	f000 fee0 	bl	8008ff8 <__assert_func>
 8008238:	f100 0614 	add.w	r6, r0, #20
 800823c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008240:	4633      	mov	r3, r6
 8008242:	2200      	movs	r2, #0
 8008244:	4543      	cmp	r3, r8
 8008246:	d31e      	bcc.n	8008286 <__multiply+0x92>
 8008248:	f105 0c14 	add.w	ip, r5, #20
 800824c:	f104 0314 	add.w	r3, r4, #20
 8008250:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008254:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008258:	9202      	str	r2, [sp, #8]
 800825a:	ebac 0205 	sub.w	r2, ip, r5
 800825e:	3a15      	subs	r2, #21
 8008260:	f022 0203 	bic.w	r2, r2, #3
 8008264:	3204      	adds	r2, #4
 8008266:	f105 0115 	add.w	r1, r5, #21
 800826a:	458c      	cmp	ip, r1
 800826c:	bf38      	it	cc
 800826e:	2204      	movcc	r2, #4
 8008270:	9201      	str	r2, [sp, #4]
 8008272:	9a02      	ldr	r2, [sp, #8]
 8008274:	9303      	str	r3, [sp, #12]
 8008276:	429a      	cmp	r2, r3
 8008278:	d808      	bhi.n	800828c <__multiply+0x98>
 800827a:	2f00      	cmp	r7, #0
 800827c:	dc55      	bgt.n	800832a <__multiply+0x136>
 800827e:	6107      	str	r7, [r0, #16]
 8008280:	b005      	add	sp, #20
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	f843 2b04 	str.w	r2, [r3], #4
 800828a:	e7db      	b.n	8008244 <__multiply+0x50>
 800828c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008290:	f1ba 0f00 	cmp.w	sl, #0
 8008294:	d020      	beq.n	80082d8 <__multiply+0xe4>
 8008296:	f105 0e14 	add.w	lr, r5, #20
 800829a:	46b1      	mov	r9, r6
 800829c:	2200      	movs	r2, #0
 800829e:	f85e 4b04 	ldr.w	r4, [lr], #4
 80082a2:	f8d9 b000 	ldr.w	fp, [r9]
 80082a6:	b2a1      	uxth	r1, r4
 80082a8:	fa1f fb8b 	uxth.w	fp, fp
 80082ac:	fb0a b101 	mla	r1, sl, r1, fp
 80082b0:	4411      	add	r1, r2
 80082b2:	f8d9 2000 	ldr.w	r2, [r9]
 80082b6:	0c24      	lsrs	r4, r4, #16
 80082b8:	0c12      	lsrs	r2, r2, #16
 80082ba:	fb0a 2404 	mla	r4, sl, r4, r2
 80082be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80082c2:	b289      	uxth	r1, r1
 80082c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082c8:	45f4      	cmp	ip, lr
 80082ca:	f849 1b04 	str.w	r1, [r9], #4
 80082ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80082d2:	d8e4      	bhi.n	800829e <__multiply+0xaa>
 80082d4:	9901      	ldr	r1, [sp, #4]
 80082d6:	5072      	str	r2, [r6, r1]
 80082d8:	9a03      	ldr	r2, [sp, #12]
 80082da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082de:	3304      	adds	r3, #4
 80082e0:	f1b9 0f00 	cmp.w	r9, #0
 80082e4:	d01f      	beq.n	8008326 <__multiply+0x132>
 80082e6:	6834      	ldr	r4, [r6, #0]
 80082e8:	f105 0114 	add.w	r1, r5, #20
 80082ec:	46b6      	mov	lr, r6
 80082ee:	f04f 0a00 	mov.w	sl, #0
 80082f2:	880a      	ldrh	r2, [r1, #0]
 80082f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80082f8:	fb09 b202 	mla	r2, r9, r2, fp
 80082fc:	4492      	add	sl, r2
 80082fe:	b2a4      	uxth	r4, r4
 8008300:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008304:	f84e 4b04 	str.w	r4, [lr], #4
 8008308:	f851 4b04 	ldr.w	r4, [r1], #4
 800830c:	f8be 2000 	ldrh.w	r2, [lr]
 8008310:	0c24      	lsrs	r4, r4, #16
 8008312:	fb09 2404 	mla	r4, r9, r4, r2
 8008316:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800831a:	458c      	cmp	ip, r1
 800831c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008320:	d8e7      	bhi.n	80082f2 <__multiply+0xfe>
 8008322:	9a01      	ldr	r2, [sp, #4]
 8008324:	50b4      	str	r4, [r6, r2]
 8008326:	3604      	adds	r6, #4
 8008328:	e7a3      	b.n	8008272 <__multiply+0x7e>
 800832a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1a5      	bne.n	800827e <__multiply+0x8a>
 8008332:	3f01      	subs	r7, #1
 8008334:	e7a1      	b.n	800827a <__multiply+0x86>
 8008336:	bf00      	nop
 8008338:	0800bf13 	.word	0x0800bf13
 800833c:	0800bf84 	.word	0x0800bf84

08008340 <__pow5mult>:
 8008340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008344:	4615      	mov	r5, r2
 8008346:	f012 0203 	ands.w	r2, r2, #3
 800834a:	4606      	mov	r6, r0
 800834c:	460f      	mov	r7, r1
 800834e:	d007      	beq.n	8008360 <__pow5mult+0x20>
 8008350:	4c25      	ldr	r4, [pc, #148]	; (80083e8 <__pow5mult+0xa8>)
 8008352:	3a01      	subs	r2, #1
 8008354:	2300      	movs	r3, #0
 8008356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800835a:	f7ff fe9b 	bl	8008094 <__multadd>
 800835e:	4607      	mov	r7, r0
 8008360:	10ad      	asrs	r5, r5, #2
 8008362:	d03d      	beq.n	80083e0 <__pow5mult+0xa0>
 8008364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008366:	b97c      	cbnz	r4, 8008388 <__pow5mult+0x48>
 8008368:	2010      	movs	r0, #16
 800836a:	f7ff fe1b 	bl	8007fa4 <malloc>
 800836e:	4602      	mov	r2, r0
 8008370:	6270      	str	r0, [r6, #36]	; 0x24
 8008372:	b928      	cbnz	r0, 8008380 <__pow5mult+0x40>
 8008374:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <__pow5mult+0xac>)
 8008376:	481e      	ldr	r0, [pc, #120]	; (80083f0 <__pow5mult+0xb0>)
 8008378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800837c:	f000 fe3c 	bl	8008ff8 <__assert_func>
 8008380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008384:	6004      	str	r4, [r0, #0]
 8008386:	60c4      	str	r4, [r0, #12]
 8008388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800838c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008390:	b94c      	cbnz	r4, 80083a6 <__pow5mult+0x66>
 8008392:	f240 2171 	movw	r1, #625	; 0x271
 8008396:	4630      	mov	r0, r6
 8008398:	f7ff ff16 	bl	80081c8 <__i2b>
 800839c:	2300      	movs	r3, #0
 800839e:	f8c8 0008 	str.w	r0, [r8, #8]
 80083a2:	4604      	mov	r4, r0
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	f04f 0900 	mov.w	r9, #0
 80083aa:	07eb      	lsls	r3, r5, #31
 80083ac:	d50a      	bpl.n	80083c4 <__pow5mult+0x84>
 80083ae:	4639      	mov	r1, r7
 80083b0:	4622      	mov	r2, r4
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7ff ff1e 	bl	80081f4 <__multiply>
 80083b8:	4639      	mov	r1, r7
 80083ba:	4680      	mov	r8, r0
 80083bc:	4630      	mov	r0, r6
 80083be:	f7ff fe47 	bl	8008050 <_Bfree>
 80083c2:	4647      	mov	r7, r8
 80083c4:	106d      	asrs	r5, r5, #1
 80083c6:	d00b      	beq.n	80083e0 <__pow5mult+0xa0>
 80083c8:	6820      	ldr	r0, [r4, #0]
 80083ca:	b938      	cbnz	r0, 80083dc <__pow5mult+0x9c>
 80083cc:	4622      	mov	r2, r4
 80083ce:	4621      	mov	r1, r4
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff ff0f 	bl	80081f4 <__multiply>
 80083d6:	6020      	str	r0, [r4, #0]
 80083d8:	f8c0 9000 	str.w	r9, [r0]
 80083dc:	4604      	mov	r4, r0
 80083de:	e7e4      	b.n	80083aa <__pow5mult+0x6a>
 80083e0:	4638      	mov	r0, r7
 80083e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e6:	bf00      	nop
 80083e8:	0800c0d8 	.word	0x0800c0d8
 80083ec:	0800be9d 	.word	0x0800be9d
 80083f0:	0800bf84 	.word	0x0800bf84

080083f4 <__lshift>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	460c      	mov	r4, r1
 80083fa:	6849      	ldr	r1, [r1, #4]
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	4607      	mov	r7, r0
 8008406:	4691      	mov	r9, r2
 8008408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800840c:	f108 0601 	add.w	r6, r8, #1
 8008410:	42b3      	cmp	r3, r6
 8008412:	db0b      	blt.n	800842c <__lshift+0x38>
 8008414:	4638      	mov	r0, r7
 8008416:	f7ff fddb 	bl	8007fd0 <_Balloc>
 800841a:	4605      	mov	r5, r0
 800841c:	b948      	cbnz	r0, 8008432 <__lshift+0x3e>
 800841e:	4602      	mov	r2, r0
 8008420:	4b28      	ldr	r3, [pc, #160]	; (80084c4 <__lshift+0xd0>)
 8008422:	4829      	ldr	r0, [pc, #164]	; (80084c8 <__lshift+0xd4>)
 8008424:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008428:	f000 fde6 	bl	8008ff8 <__assert_func>
 800842c:	3101      	adds	r1, #1
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	e7ee      	b.n	8008410 <__lshift+0x1c>
 8008432:	2300      	movs	r3, #0
 8008434:	f100 0114 	add.w	r1, r0, #20
 8008438:	f100 0210 	add.w	r2, r0, #16
 800843c:	4618      	mov	r0, r3
 800843e:	4553      	cmp	r3, sl
 8008440:	db33      	blt.n	80084aa <__lshift+0xb6>
 8008442:	6920      	ldr	r0, [r4, #16]
 8008444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008448:	f104 0314 	add.w	r3, r4, #20
 800844c:	f019 091f 	ands.w	r9, r9, #31
 8008450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008458:	d02b      	beq.n	80084b2 <__lshift+0xbe>
 800845a:	f1c9 0e20 	rsb	lr, r9, #32
 800845e:	468a      	mov	sl, r1
 8008460:	2200      	movs	r2, #0
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	fa00 f009 	lsl.w	r0, r0, r9
 8008468:	4302      	orrs	r2, r0
 800846a:	f84a 2b04 	str.w	r2, [sl], #4
 800846e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008472:	459c      	cmp	ip, r3
 8008474:	fa22 f20e 	lsr.w	r2, r2, lr
 8008478:	d8f3      	bhi.n	8008462 <__lshift+0x6e>
 800847a:	ebac 0304 	sub.w	r3, ip, r4
 800847e:	3b15      	subs	r3, #21
 8008480:	f023 0303 	bic.w	r3, r3, #3
 8008484:	3304      	adds	r3, #4
 8008486:	f104 0015 	add.w	r0, r4, #21
 800848a:	4584      	cmp	ip, r0
 800848c:	bf38      	it	cc
 800848e:	2304      	movcc	r3, #4
 8008490:	50ca      	str	r2, [r1, r3]
 8008492:	b10a      	cbz	r2, 8008498 <__lshift+0xa4>
 8008494:	f108 0602 	add.w	r6, r8, #2
 8008498:	3e01      	subs	r6, #1
 800849a:	4638      	mov	r0, r7
 800849c:	612e      	str	r6, [r5, #16]
 800849e:	4621      	mov	r1, r4
 80084a0:	f7ff fdd6 	bl	8008050 <_Bfree>
 80084a4:	4628      	mov	r0, r5
 80084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ae:	3301      	adds	r3, #1
 80084b0:	e7c5      	b.n	800843e <__lshift+0x4a>
 80084b2:	3904      	subs	r1, #4
 80084b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80084bc:	459c      	cmp	ip, r3
 80084be:	d8f9      	bhi.n	80084b4 <__lshift+0xc0>
 80084c0:	e7ea      	b.n	8008498 <__lshift+0xa4>
 80084c2:	bf00      	nop
 80084c4:	0800bf13 	.word	0x0800bf13
 80084c8:	0800bf84 	.word	0x0800bf84

080084cc <__mcmp>:
 80084cc:	b530      	push	{r4, r5, lr}
 80084ce:	6902      	ldr	r2, [r0, #16]
 80084d0:	690c      	ldr	r4, [r1, #16]
 80084d2:	1b12      	subs	r2, r2, r4
 80084d4:	d10e      	bne.n	80084f4 <__mcmp+0x28>
 80084d6:	f100 0314 	add.w	r3, r0, #20
 80084da:	3114      	adds	r1, #20
 80084dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084ec:	42a5      	cmp	r5, r4
 80084ee:	d003      	beq.n	80084f8 <__mcmp+0x2c>
 80084f0:	d305      	bcc.n	80084fe <__mcmp+0x32>
 80084f2:	2201      	movs	r2, #1
 80084f4:	4610      	mov	r0, r2
 80084f6:	bd30      	pop	{r4, r5, pc}
 80084f8:	4283      	cmp	r3, r0
 80084fa:	d3f3      	bcc.n	80084e4 <__mcmp+0x18>
 80084fc:	e7fa      	b.n	80084f4 <__mcmp+0x28>
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	e7f7      	b.n	80084f4 <__mcmp+0x28>

08008504 <__mdiff>:
 8008504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	460c      	mov	r4, r1
 800850a:	4606      	mov	r6, r0
 800850c:	4611      	mov	r1, r2
 800850e:	4620      	mov	r0, r4
 8008510:	4617      	mov	r7, r2
 8008512:	f7ff ffdb 	bl	80084cc <__mcmp>
 8008516:	1e05      	subs	r5, r0, #0
 8008518:	d110      	bne.n	800853c <__mdiff+0x38>
 800851a:	4629      	mov	r1, r5
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff fd57 	bl	8007fd0 <_Balloc>
 8008522:	b930      	cbnz	r0, 8008532 <__mdiff+0x2e>
 8008524:	4b39      	ldr	r3, [pc, #228]	; (800860c <__mdiff+0x108>)
 8008526:	4602      	mov	r2, r0
 8008528:	f240 2132 	movw	r1, #562	; 0x232
 800852c:	4838      	ldr	r0, [pc, #224]	; (8008610 <__mdiff+0x10c>)
 800852e:	f000 fd63 	bl	8008ff8 <__assert_func>
 8008532:	2301      	movs	r3, #1
 8008534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853c:	bfa4      	itt	ge
 800853e:	463b      	movge	r3, r7
 8008540:	4627      	movge	r7, r4
 8008542:	4630      	mov	r0, r6
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	bfa6      	itte	ge
 8008548:	461c      	movge	r4, r3
 800854a:	2500      	movge	r5, #0
 800854c:	2501      	movlt	r5, #1
 800854e:	f7ff fd3f 	bl	8007fd0 <_Balloc>
 8008552:	b920      	cbnz	r0, 800855e <__mdiff+0x5a>
 8008554:	4b2d      	ldr	r3, [pc, #180]	; (800860c <__mdiff+0x108>)
 8008556:	4602      	mov	r2, r0
 8008558:	f44f 7110 	mov.w	r1, #576	; 0x240
 800855c:	e7e6      	b.n	800852c <__mdiff+0x28>
 800855e:	693e      	ldr	r6, [r7, #16]
 8008560:	60c5      	str	r5, [r0, #12]
 8008562:	6925      	ldr	r5, [r4, #16]
 8008564:	f107 0114 	add.w	r1, r7, #20
 8008568:	f104 0914 	add.w	r9, r4, #20
 800856c:	f100 0e14 	add.w	lr, r0, #20
 8008570:	f107 0210 	add.w	r2, r7, #16
 8008574:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008578:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800857c:	46f2      	mov	sl, lr
 800857e:	2700      	movs	r7, #0
 8008580:	f859 3b04 	ldr.w	r3, [r9], #4
 8008584:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008588:	fa1f f883 	uxth.w	r8, r3
 800858c:	fa17 f78b 	uxtah	r7, r7, fp
 8008590:	0c1b      	lsrs	r3, r3, #16
 8008592:	eba7 0808 	sub.w	r8, r7, r8
 8008596:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800859a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800859e:	fa1f f888 	uxth.w	r8, r8
 80085a2:	141f      	asrs	r7, r3, #16
 80085a4:	454d      	cmp	r5, r9
 80085a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085aa:	f84a 3b04 	str.w	r3, [sl], #4
 80085ae:	d8e7      	bhi.n	8008580 <__mdiff+0x7c>
 80085b0:	1b2b      	subs	r3, r5, r4
 80085b2:	3b15      	subs	r3, #21
 80085b4:	f023 0303 	bic.w	r3, r3, #3
 80085b8:	3304      	adds	r3, #4
 80085ba:	3415      	adds	r4, #21
 80085bc:	42a5      	cmp	r5, r4
 80085be:	bf38      	it	cc
 80085c0:	2304      	movcc	r3, #4
 80085c2:	4419      	add	r1, r3
 80085c4:	4473      	add	r3, lr
 80085c6:	469e      	mov	lr, r3
 80085c8:	460d      	mov	r5, r1
 80085ca:	4565      	cmp	r5, ip
 80085cc:	d30e      	bcc.n	80085ec <__mdiff+0xe8>
 80085ce:	f10c 0203 	add.w	r2, ip, #3
 80085d2:	1a52      	subs	r2, r2, r1
 80085d4:	f022 0203 	bic.w	r2, r2, #3
 80085d8:	3903      	subs	r1, #3
 80085da:	458c      	cmp	ip, r1
 80085dc:	bf38      	it	cc
 80085de:	2200      	movcc	r2, #0
 80085e0:	441a      	add	r2, r3
 80085e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085e6:	b17b      	cbz	r3, 8008608 <__mdiff+0x104>
 80085e8:	6106      	str	r6, [r0, #16]
 80085ea:	e7a5      	b.n	8008538 <__mdiff+0x34>
 80085ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80085f0:	fa17 f488 	uxtah	r4, r7, r8
 80085f4:	1422      	asrs	r2, r4, #16
 80085f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80085fa:	b2a4      	uxth	r4, r4
 80085fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008600:	f84e 4b04 	str.w	r4, [lr], #4
 8008604:	1417      	asrs	r7, r2, #16
 8008606:	e7e0      	b.n	80085ca <__mdiff+0xc6>
 8008608:	3e01      	subs	r6, #1
 800860a:	e7ea      	b.n	80085e2 <__mdiff+0xde>
 800860c:	0800bf13 	.word	0x0800bf13
 8008610:	0800bf84 	.word	0x0800bf84

08008614 <__d2b>:
 8008614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008618:	4689      	mov	r9, r1
 800861a:	2101      	movs	r1, #1
 800861c:	ec57 6b10 	vmov	r6, r7, d0
 8008620:	4690      	mov	r8, r2
 8008622:	f7ff fcd5 	bl	8007fd0 <_Balloc>
 8008626:	4604      	mov	r4, r0
 8008628:	b930      	cbnz	r0, 8008638 <__d2b+0x24>
 800862a:	4602      	mov	r2, r0
 800862c:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <__d2b+0xb0>)
 800862e:	4826      	ldr	r0, [pc, #152]	; (80086c8 <__d2b+0xb4>)
 8008630:	f240 310a 	movw	r1, #778	; 0x30a
 8008634:	f000 fce0 	bl	8008ff8 <__assert_func>
 8008638:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800863c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008640:	bb35      	cbnz	r5, 8008690 <__d2b+0x7c>
 8008642:	2e00      	cmp	r6, #0
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	d028      	beq.n	800869a <__d2b+0x86>
 8008648:	4668      	mov	r0, sp
 800864a:	9600      	str	r6, [sp, #0]
 800864c:	f7ff fd8c 	bl	8008168 <__lo0bits>
 8008650:	9900      	ldr	r1, [sp, #0]
 8008652:	b300      	cbz	r0, 8008696 <__d2b+0x82>
 8008654:	9a01      	ldr	r2, [sp, #4]
 8008656:	f1c0 0320 	rsb	r3, r0, #32
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	430b      	orrs	r3, r1
 8008660:	40c2      	lsrs	r2, r0
 8008662:	6163      	str	r3, [r4, #20]
 8008664:	9201      	str	r2, [sp, #4]
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	61a3      	str	r3, [r4, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf14      	ite	ne
 800866e:	2202      	movne	r2, #2
 8008670:	2201      	moveq	r2, #1
 8008672:	6122      	str	r2, [r4, #16]
 8008674:	b1d5      	cbz	r5, 80086ac <__d2b+0x98>
 8008676:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800867a:	4405      	add	r5, r0
 800867c:	f8c9 5000 	str.w	r5, [r9]
 8008680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008684:	f8c8 0000 	str.w	r0, [r8]
 8008688:	4620      	mov	r0, r4
 800868a:	b003      	add	sp, #12
 800868c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008694:	e7d5      	b.n	8008642 <__d2b+0x2e>
 8008696:	6161      	str	r1, [r4, #20]
 8008698:	e7e5      	b.n	8008666 <__d2b+0x52>
 800869a:	a801      	add	r0, sp, #4
 800869c:	f7ff fd64 	bl	8008168 <__lo0bits>
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	6163      	str	r3, [r4, #20]
 80086a4:	2201      	movs	r2, #1
 80086a6:	6122      	str	r2, [r4, #16]
 80086a8:	3020      	adds	r0, #32
 80086aa:	e7e3      	b.n	8008674 <__d2b+0x60>
 80086ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086b4:	f8c9 0000 	str.w	r0, [r9]
 80086b8:	6918      	ldr	r0, [r3, #16]
 80086ba:	f7ff fd35 	bl	8008128 <__hi0bits>
 80086be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086c2:	e7df      	b.n	8008684 <__d2b+0x70>
 80086c4:	0800bf13 	.word	0x0800bf13
 80086c8:	0800bf84 	.word	0x0800bf84

080086cc <_calloc_r>:
 80086cc:	b513      	push	{r0, r1, r4, lr}
 80086ce:	434a      	muls	r2, r1
 80086d0:	4611      	mov	r1, r2
 80086d2:	9201      	str	r2, [sp, #4]
 80086d4:	f000 f85a 	bl	800878c <_malloc_r>
 80086d8:	4604      	mov	r4, r0
 80086da:	b118      	cbz	r0, 80086e4 <_calloc_r+0x18>
 80086dc:	9a01      	ldr	r2, [sp, #4]
 80086de:	2100      	movs	r1, #0
 80086e0:	f7fe f83e 	bl	8006760 <memset>
 80086e4:	4620      	mov	r0, r4
 80086e6:	b002      	add	sp, #8
 80086e8:	bd10      	pop	{r4, pc}
	...

080086ec <_free_r>:
 80086ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d048      	beq.n	8008784 <_free_r+0x98>
 80086f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f6:	9001      	str	r0, [sp, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f1a1 0404 	sub.w	r4, r1, #4
 80086fe:	bfb8      	it	lt
 8008700:	18e4      	addlt	r4, r4, r3
 8008702:	f000 fe1d 	bl	8009340 <__malloc_lock>
 8008706:	4a20      	ldr	r2, [pc, #128]	; (8008788 <_free_r+0x9c>)
 8008708:	9801      	ldr	r0, [sp, #4]
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	4615      	mov	r5, r2
 800870e:	b933      	cbnz	r3, 800871e <_free_r+0x32>
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	6014      	str	r4, [r2, #0]
 8008714:	b003      	add	sp, #12
 8008716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800871a:	f000 be17 	b.w	800934c <__malloc_unlock>
 800871e:	42a3      	cmp	r3, r4
 8008720:	d90b      	bls.n	800873a <_free_r+0x4e>
 8008722:	6821      	ldr	r1, [r4, #0]
 8008724:	1862      	adds	r2, r4, r1
 8008726:	4293      	cmp	r3, r2
 8008728:	bf04      	itt	eq
 800872a:	681a      	ldreq	r2, [r3, #0]
 800872c:	685b      	ldreq	r3, [r3, #4]
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	bf04      	itt	eq
 8008732:	1852      	addeq	r2, r2, r1
 8008734:	6022      	streq	r2, [r4, #0]
 8008736:	602c      	str	r4, [r5, #0]
 8008738:	e7ec      	b.n	8008714 <_free_r+0x28>
 800873a:	461a      	mov	r2, r3
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	b10b      	cbz	r3, 8008744 <_free_r+0x58>
 8008740:	42a3      	cmp	r3, r4
 8008742:	d9fa      	bls.n	800873a <_free_r+0x4e>
 8008744:	6811      	ldr	r1, [r2, #0]
 8008746:	1855      	adds	r5, r2, r1
 8008748:	42a5      	cmp	r5, r4
 800874a:	d10b      	bne.n	8008764 <_free_r+0x78>
 800874c:	6824      	ldr	r4, [r4, #0]
 800874e:	4421      	add	r1, r4
 8008750:	1854      	adds	r4, r2, r1
 8008752:	42a3      	cmp	r3, r4
 8008754:	6011      	str	r1, [r2, #0]
 8008756:	d1dd      	bne.n	8008714 <_free_r+0x28>
 8008758:	681c      	ldr	r4, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	6053      	str	r3, [r2, #4]
 800875e:	4421      	add	r1, r4
 8008760:	6011      	str	r1, [r2, #0]
 8008762:	e7d7      	b.n	8008714 <_free_r+0x28>
 8008764:	d902      	bls.n	800876c <_free_r+0x80>
 8008766:	230c      	movs	r3, #12
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	e7d3      	b.n	8008714 <_free_r+0x28>
 800876c:	6825      	ldr	r5, [r4, #0]
 800876e:	1961      	adds	r1, r4, r5
 8008770:	428b      	cmp	r3, r1
 8008772:	bf04      	itt	eq
 8008774:	6819      	ldreq	r1, [r3, #0]
 8008776:	685b      	ldreq	r3, [r3, #4]
 8008778:	6063      	str	r3, [r4, #4]
 800877a:	bf04      	itt	eq
 800877c:	1949      	addeq	r1, r1, r5
 800877e:	6021      	streq	r1, [r4, #0]
 8008780:	6054      	str	r4, [r2, #4]
 8008782:	e7c7      	b.n	8008714 <_free_r+0x28>
 8008784:	b003      	add	sp, #12
 8008786:	bd30      	pop	{r4, r5, pc}
 8008788:	2000023c 	.word	0x2000023c

0800878c <_malloc_r>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	1ccd      	adds	r5, r1, #3
 8008790:	f025 0503 	bic.w	r5, r5, #3
 8008794:	3508      	adds	r5, #8
 8008796:	2d0c      	cmp	r5, #12
 8008798:	bf38      	it	cc
 800879a:	250c      	movcc	r5, #12
 800879c:	2d00      	cmp	r5, #0
 800879e:	4606      	mov	r6, r0
 80087a0:	db01      	blt.n	80087a6 <_malloc_r+0x1a>
 80087a2:	42a9      	cmp	r1, r5
 80087a4:	d903      	bls.n	80087ae <_malloc_r+0x22>
 80087a6:	230c      	movs	r3, #12
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	2000      	movs	r0, #0
 80087ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ae:	f000 fdc7 	bl	8009340 <__malloc_lock>
 80087b2:	4921      	ldr	r1, [pc, #132]	; (8008838 <_malloc_r+0xac>)
 80087b4:	680a      	ldr	r2, [r1, #0]
 80087b6:	4614      	mov	r4, r2
 80087b8:	b99c      	cbnz	r4, 80087e2 <_malloc_r+0x56>
 80087ba:	4f20      	ldr	r7, [pc, #128]	; (800883c <_malloc_r+0xb0>)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	b923      	cbnz	r3, 80087ca <_malloc_r+0x3e>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 faf2 	bl	8008dac <_sbrk_r>
 80087c8:	6038      	str	r0, [r7, #0]
 80087ca:	4629      	mov	r1, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	f000 faed 	bl	8008dac <_sbrk_r>
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d123      	bne.n	800881e <_malloc_r+0x92>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 fdb6 	bl	800934c <__malloc_unlock>
 80087e0:	e7e3      	b.n	80087aa <_malloc_r+0x1e>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	1b5b      	subs	r3, r3, r5
 80087e6:	d417      	bmi.n	8008818 <_malloc_r+0x8c>
 80087e8:	2b0b      	cmp	r3, #11
 80087ea:	d903      	bls.n	80087f4 <_malloc_r+0x68>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	441c      	add	r4, r3
 80087f0:	6025      	str	r5, [r4, #0]
 80087f2:	e004      	b.n	80087fe <_malloc_r+0x72>
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	42a2      	cmp	r2, r4
 80087f8:	bf0c      	ite	eq
 80087fa:	600b      	streq	r3, [r1, #0]
 80087fc:	6053      	strne	r3, [r2, #4]
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 fda4 	bl	800934c <__malloc_unlock>
 8008804:	f104 000b 	add.w	r0, r4, #11
 8008808:	1d23      	adds	r3, r4, #4
 800880a:	f020 0007 	bic.w	r0, r0, #7
 800880e:	1ac2      	subs	r2, r0, r3
 8008810:	d0cc      	beq.n	80087ac <_malloc_r+0x20>
 8008812:	1a1b      	subs	r3, r3, r0
 8008814:	50a3      	str	r3, [r4, r2]
 8008816:	e7c9      	b.n	80087ac <_malloc_r+0x20>
 8008818:	4622      	mov	r2, r4
 800881a:	6864      	ldr	r4, [r4, #4]
 800881c:	e7cc      	b.n	80087b8 <_malloc_r+0x2c>
 800881e:	1cc4      	adds	r4, r0, #3
 8008820:	f024 0403 	bic.w	r4, r4, #3
 8008824:	42a0      	cmp	r0, r4
 8008826:	d0e3      	beq.n	80087f0 <_malloc_r+0x64>
 8008828:	1a21      	subs	r1, r4, r0
 800882a:	4630      	mov	r0, r6
 800882c:	f000 fabe 	bl	8008dac <_sbrk_r>
 8008830:	3001      	adds	r0, #1
 8008832:	d1dd      	bne.n	80087f0 <_malloc_r+0x64>
 8008834:	e7cf      	b.n	80087d6 <_malloc_r+0x4a>
 8008836:	bf00      	nop
 8008838:	2000023c 	.word	0x2000023c
 800883c:	20000240 	.word	0x20000240

08008840 <__ssputs_r>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	688e      	ldr	r6, [r1, #8]
 8008846:	429e      	cmp	r6, r3
 8008848:	4682      	mov	sl, r0
 800884a:	460c      	mov	r4, r1
 800884c:	4690      	mov	r8, r2
 800884e:	461f      	mov	r7, r3
 8008850:	d838      	bhi.n	80088c4 <__ssputs_r+0x84>
 8008852:	898a      	ldrh	r2, [r1, #12]
 8008854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008858:	d032      	beq.n	80088c0 <__ssputs_r+0x80>
 800885a:	6825      	ldr	r5, [r4, #0]
 800885c:	6909      	ldr	r1, [r1, #16]
 800885e:	eba5 0901 	sub.w	r9, r5, r1
 8008862:	6965      	ldr	r5, [r4, #20]
 8008864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800886c:	3301      	adds	r3, #1
 800886e:	444b      	add	r3, r9
 8008870:	106d      	asrs	r5, r5, #1
 8008872:	429d      	cmp	r5, r3
 8008874:	bf38      	it	cc
 8008876:	461d      	movcc	r5, r3
 8008878:	0553      	lsls	r3, r2, #21
 800887a:	d531      	bpl.n	80088e0 <__ssputs_r+0xa0>
 800887c:	4629      	mov	r1, r5
 800887e:	f7ff ff85 	bl	800878c <_malloc_r>
 8008882:	4606      	mov	r6, r0
 8008884:	b950      	cbnz	r0, 800889c <__ssputs_r+0x5c>
 8008886:	230c      	movs	r3, #12
 8008888:	f8ca 3000 	str.w	r3, [sl]
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889c:	6921      	ldr	r1, [r4, #16]
 800889e:	464a      	mov	r2, r9
 80088a0:	f7ff fb88 	bl	8007fb4 <memcpy>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	6126      	str	r6, [r4, #16]
 80088b2:	6165      	str	r5, [r4, #20]
 80088b4:	444e      	add	r6, r9
 80088b6:	eba5 0509 	sub.w	r5, r5, r9
 80088ba:	6026      	str	r6, [r4, #0]
 80088bc:	60a5      	str	r5, [r4, #8]
 80088be:	463e      	mov	r6, r7
 80088c0:	42be      	cmp	r6, r7
 80088c2:	d900      	bls.n	80088c6 <__ssputs_r+0x86>
 80088c4:	463e      	mov	r6, r7
 80088c6:	4632      	mov	r2, r6
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	4641      	mov	r1, r8
 80088cc:	f000 fd1e 	bl	800930c <memmove>
 80088d0:	68a3      	ldr	r3, [r4, #8]
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	1b9b      	subs	r3, r3, r6
 80088d6:	4432      	add	r2, r6
 80088d8:	60a3      	str	r3, [r4, #8]
 80088da:	6022      	str	r2, [r4, #0]
 80088dc:	2000      	movs	r0, #0
 80088de:	e7db      	b.n	8008898 <__ssputs_r+0x58>
 80088e0:	462a      	mov	r2, r5
 80088e2:	f000 fd39 	bl	8009358 <_realloc_r>
 80088e6:	4606      	mov	r6, r0
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d1e1      	bne.n	80088b0 <__ssputs_r+0x70>
 80088ec:	6921      	ldr	r1, [r4, #16]
 80088ee:	4650      	mov	r0, sl
 80088f0:	f7ff fefc 	bl	80086ec <_free_r>
 80088f4:	e7c7      	b.n	8008886 <__ssputs_r+0x46>
	...

080088f8 <_svfiprintf_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	4698      	mov	r8, r3
 80088fe:	898b      	ldrh	r3, [r1, #12]
 8008900:	061b      	lsls	r3, r3, #24
 8008902:	b09d      	sub	sp, #116	; 0x74
 8008904:	4607      	mov	r7, r0
 8008906:	460d      	mov	r5, r1
 8008908:	4614      	mov	r4, r2
 800890a:	d50e      	bpl.n	800892a <_svfiprintf_r+0x32>
 800890c:	690b      	ldr	r3, [r1, #16]
 800890e:	b963      	cbnz	r3, 800892a <_svfiprintf_r+0x32>
 8008910:	2140      	movs	r1, #64	; 0x40
 8008912:	f7ff ff3b 	bl	800878c <_malloc_r>
 8008916:	6028      	str	r0, [r5, #0]
 8008918:	6128      	str	r0, [r5, #16]
 800891a:	b920      	cbnz	r0, 8008926 <_svfiprintf_r+0x2e>
 800891c:	230c      	movs	r3, #12
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	f04f 30ff 	mov.w	r0, #4294967295
 8008924:	e0d1      	b.n	8008aca <_svfiprintf_r+0x1d2>
 8008926:	2340      	movs	r3, #64	; 0x40
 8008928:	616b      	str	r3, [r5, #20]
 800892a:	2300      	movs	r3, #0
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
 800892e:	2320      	movs	r3, #32
 8008930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008934:	f8cd 800c 	str.w	r8, [sp, #12]
 8008938:	2330      	movs	r3, #48	; 0x30
 800893a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ae4 <_svfiprintf_r+0x1ec>
 800893e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008942:	f04f 0901 	mov.w	r9, #1
 8008946:	4623      	mov	r3, r4
 8008948:	469a      	mov	sl, r3
 800894a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894e:	b10a      	cbz	r2, 8008954 <_svfiprintf_r+0x5c>
 8008950:	2a25      	cmp	r2, #37	; 0x25
 8008952:	d1f9      	bne.n	8008948 <_svfiprintf_r+0x50>
 8008954:	ebba 0b04 	subs.w	fp, sl, r4
 8008958:	d00b      	beq.n	8008972 <_svfiprintf_r+0x7a>
 800895a:	465b      	mov	r3, fp
 800895c:	4622      	mov	r2, r4
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ff6d 	bl	8008840 <__ssputs_r>
 8008966:	3001      	adds	r0, #1
 8008968:	f000 80aa 	beq.w	8008ac0 <_svfiprintf_r+0x1c8>
 800896c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800896e:	445a      	add	r2, fp
 8008970:	9209      	str	r2, [sp, #36]	; 0x24
 8008972:	f89a 3000 	ldrb.w	r3, [sl]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80a2 	beq.w	8008ac0 <_svfiprintf_r+0x1c8>
 800897c:	2300      	movs	r3, #0
 800897e:	f04f 32ff 	mov.w	r2, #4294967295
 8008982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008986:	f10a 0a01 	add.w	sl, sl, #1
 800898a:	9304      	str	r3, [sp, #16]
 800898c:	9307      	str	r3, [sp, #28]
 800898e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008992:	931a      	str	r3, [sp, #104]	; 0x68
 8008994:	4654      	mov	r4, sl
 8008996:	2205      	movs	r2, #5
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	4851      	ldr	r0, [pc, #324]	; (8008ae4 <_svfiprintf_r+0x1ec>)
 800899e:	f7f7 fc27 	bl	80001f0 <memchr>
 80089a2:	9a04      	ldr	r2, [sp, #16]
 80089a4:	b9d8      	cbnz	r0, 80089de <_svfiprintf_r+0xe6>
 80089a6:	06d0      	lsls	r0, r2, #27
 80089a8:	bf44      	itt	mi
 80089aa:	2320      	movmi	r3, #32
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b0:	0711      	lsls	r1, r2, #28
 80089b2:	bf44      	itt	mi
 80089b4:	232b      	movmi	r3, #43	; 0x2b
 80089b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089ba:	f89a 3000 	ldrb.w	r3, [sl]
 80089be:	2b2a      	cmp	r3, #42	; 0x2a
 80089c0:	d015      	beq.n	80089ee <_svfiprintf_r+0xf6>
 80089c2:	9a07      	ldr	r2, [sp, #28]
 80089c4:	4654      	mov	r4, sl
 80089c6:	2000      	movs	r0, #0
 80089c8:	f04f 0c0a 	mov.w	ip, #10
 80089cc:	4621      	mov	r1, r4
 80089ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d2:	3b30      	subs	r3, #48	; 0x30
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d94e      	bls.n	8008a76 <_svfiprintf_r+0x17e>
 80089d8:	b1b0      	cbz	r0, 8008a08 <_svfiprintf_r+0x110>
 80089da:	9207      	str	r2, [sp, #28]
 80089dc:	e014      	b.n	8008a08 <_svfiprintf_r+0x110>
 80089de:	eba0 0308 	sub.w	r3, r0, r8
 80089e2:	fa09 f303 	lsl.w	r3, r9, r3
 80089e6:	4313      	orrs	r3, r2
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	46a2      	mov	sl, r4
 80089ec:	e7d2      	b.n	8008994 <_svfiprintf_r+0x9c>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d19      	adds	r1, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9103      	str	r1, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bfbb      	ittet	lt
 80089fa:	425b      	neglt	r3, r3
 80089fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008a00:	9307      	strge	r3, [sp, #28]
 8008a02:	9307      	strlt	r3, [sp, #28]
 8008a04:	bfb8      	it	lt
 8008a06:	9204      	strlt	r2, [sp, #16]
 8008a08:	7823      	ldrb	r3, [r4, #0]
 8008a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a0c:	d10c      	bne.n	8008a28 <_svfiprintf_r+0x130>
 8008a0e:	7863      	ldrb	r3, [r4, #1]
 8008a10:	2b2a      	cmp	r3, #42	; 0x2a
 8008a12:	d135      	bne.n	8008a80 <_svfiprintf_r+0x188>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1d1a      	adds	r2, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9203      	str	r2, [sp, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfb8      	it	lt
 8008a20:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a24:	3402      	adds	r4, #2
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008af4 <_svfiprintf_r+0x1fc>
 8008a2c:	7821      	ldrb	r1, [r4, #0]
 8008a2e:	2203      	movs	r2, #3
 8008a30:	4650      	mov	r0, sl
 8008a32:	f7f7 fbdd 	bl	80001f0 <memchr>
 8008a36:	b140      	cbz	r0, 8008a4a <_svfiprintf_r+0x152>
 8008a38:	2340      	movs	r3, #64	; 0x40
 8008a3a:	eba0 000a 	sub.w	r0, r0, sl
 8008a3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a42:	9b04      	ldr	r3, [sp, #16]
 8008a44:	4303      	orrs	r3, r0
 8008a46:	3401      	adds	r4, #1
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4e:	4826      	ldr	r0, [pc, #152]	; (8008ae8 <_svfiprintf_r+0x1f0>)
 8008a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a54:	2206      	movs	r2, #6
 8008a56:	f7f7 fbcb 	bl	80001f0 <memchr>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d038      	beq.n	8008ad0 <_svfiprintf_r+0x1d8>
 8008a5e:	4b23      	ldr	r3, [pc, #140]	; (8008aec <_svfiprintf_r+0x1f4>)
 8008a60:	bb1b      	cbnz	r3, 8008aaa <_svfiprintf_r+0x1b2>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	3307      	adds	r3, #7
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	4433      	add	r3, r6
 8008a72:	9309      	str	r3, [sp, #36]	; 0x24
 8008a74:	e767      	b.n	8008946 <_svfiprintf_r+0x4e>
 8008a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e7a5      	b.n	80089cc <_svfiprintf_r+0xd4>
 8008a80:	2300      	movs	r3, #0
 8008a82:	3401      	adds	r4, #1
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	4619      	mov	r1, r3
 8008a88:	f04f 0c0a 	mov.w	ip, #10
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a92:	3a30      	subs	r2, #48	; 0x30
 8008a94:	2a09      	cmp	r2, #9
 8008a96:	d903      	bls.n	8008aa0 <_svfiprintf_r+0x1a8>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0c5      	beq.n	8008a28 <_svfiprintf_r+0x130>
 8008a9c:	9105      	str	r1, [sp, #20]
 8008a9e:	e7c3      	b.n	8008a28 <_svfiprintf_r+0x130>
 8008aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e7f0      	b.n	8008a8c <_svfiprintf_r+0x194>
 8008aaa:	ab03      	add	r3, sp, #12
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	462a      	mov	r2, r5
 8008ab0:	4b0f      	ldr	r3, [pc, #60]	; (8008af0 <_svfiprintf_r+0x1f8>)
 8008ab2:	a904      	add	r1, sp, #16
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7fd fefb 	bl	80068b0 <_printf_float>
 8008aba:	1c42      	adds	r2, r0, #1
 8008abc:	4606      	mov	r6, r0
 8008abe:	d1d6      	bne.n	8008a6e <_svfiprintf_r+0x176>
 8008ac0:	89ab      	ldrh	r3, [r5, #12]
 8008ac2:	065b      	lsls	r3, r3, #25
 8008ac4:	f53f af2c 	bmi.w	8008920 <_svfiprintf_r+0x28>
 8008ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aca:	b01d      	add	sp, #116	; 0x74
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <_svfiprintf_r+0x1f8>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7fe f98c 	bl	8006df8 <_printf_i>
 8008ae0:	e7eb      	b.n	8008aba <_svfiprintf_r+0x1c2>
 8008ae2:	bf00      	nop
 8008ae4:	0800c0e4 	.word	0x0800c0e4
 8008ae8:	0800c0ee 	.word	0x0800c0ee
 8008aec:	080068b1 	.word	0x080068b1
 8008af0:	08008841 	.word	0x08008841
 8008af4:	0800c0ea 	.word	0x0800c0ea

08008af8 <__sfputc_r>:
 8008af8:	6893      	ldr	r3, [r2, #8]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	b410      	push	{r4}
 8008b00:	6093      	str	r3, [r2, #8]
 8008b02:	da08      	bge.n	8008b16 <__sfputc_r+0x1e>
 8008b04:	6994      	ldr	r4, [r2, #24]
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	db01      	blt.n	8008b0e <__sfputc_r+0x16>
 8008b0a:	290a      	cmp	r1, #10
 8008b0c:	d103      	bne.n	8008b16 <__sfputc_r+0x1e>
 8008b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b12:	f000 b99f 	b.w	8008e54 <__swbuf_r>
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	1c58      	adds	r0, r3, #1
 8008b1a:	6010      	str	r0, [r2, #0]
 8008b1c:	7019      	strb	r1, [r3, #0]
 8008b1e:	4608      	mov	r0, r1
 8008b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <__sfputs_r>:
 8008b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b28:	4606      	mov	r6, r0
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	18d5      	adds	r5, r2, r3
 8008b30:	42ac      	cmp	r4, r5
 8008b32:	d101      	bne.n	8008b38 <__sfputs_r+0x12>
 8008b34:	2000      	movs	r0, #0
 8008b36:	e007      	b.n	8008b48 <__sfputs_r+0x22>
 8008b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ffda 	bl	8008af8 <__sfputc_r>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d1f3      	bne.n	8008b30 <__sfputs_r+0xa>
 8008b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b4c <_vfiprintf_r>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	460d      	mov	r5, r1
 8008b52:	b09d      	sub	sp, #116	; 0x74
 8008b54:	4614      	mov	r4, r2
 8008b56:	4698      	mov	r8, r3
 8008b58:	4606      	mov	r6, r0
 8008b5a:	b118      	cbz	r0, 8008b64 <_vfiprintf_r+0x18>
 8008b5c:	6983      	ldr	r3, [r0, #24]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x18>
 8008b60:	f7ff f97a 	bl	8007e58 <__sinit>
 8008b64:	4b89      	ldr	r3, [pc, #548]	; (8008d8c <_vfiprintf_r+0x240>)
 8008b66:	429d      	cmp	r5, r3
 8008b68:	d11b      	bne.n	8008ba2 <_vfiprintf_r+0x56>
 8008b6a:	6875      	ldr	r5, [r6, #4]
 8008b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b6e:	07d9      	lsls	r1, r3, #31
 8008b70:	d405      	bmi.n	8008b7e <_vfiprintf_r+0x32>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	059a      	lsls	r2, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_vfiprintf_r+0x32>
 8008b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7a:	f7ff fa10 	bl	8007f9e <__retarget_lock_acquire_recursive>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	071b      	lsls	r3, r3, #28
 8008b82:	d501      	bpl.n	8008b88 <_vfiprintf_r+0x3c>
 8008b84:	692b      	ldr	r3, [r5, #16]
 8008b86:	b9eb      	cbnz	r3, 8008bc4 <_vfiprintf_r+0x78>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f000 f9c6 	bl	8008f1c <__swsetup_r>
 8008b90:	b1c0      	cbz	r0, 8008bc4 <_vfiprintf_r+0x78>
 8008b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b94:	07dc      	lsls	r4, r3, #31
 8008b96:	d50e      	bpl.n	8008bb6 <_vfiprintf_r+0x6a>
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	b01d      	add	sp, #116	; 0x74
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	4b7b      	ldr	r3, [pc, #492]	; (8008d90 <_vfiprintf_r+0x244>)
 8008ba4:	429d      	cmp	r5, r3
 8008ba6:	d101      	bne.n	8008bac <_vfiprintf_r+0x60>
 8008ba8:	68b5      	ldr	r5, [r6, #8]
 8008baa:	e7df      	b.n	8008b6c <_vfiprintf_r+0x20>
 8008bac:	4b79      	ldr	r3, [pc, #484]	; (8008d94 <_vfiprintf_r+0x248>)
 8008bae:	429d      	cmp	r5, r3
 8008bb0:	bf08      	it	eq
 8008bb2:	68f5      	ldreq	r5, [r6, #12]
 8008bb4:	e7da      	b.n	8008b6c <_vfiprintf_r+0x20>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	0598      	lsls	r0, r3, #22
 8008bba:	d4ed      	bmi.n	8008b98 <_vfiprintf_r+0x4c>
 8008bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bbe:	f7ff f9ef 	bl	8007fa0 <__retarget_lock_release_recursive>
 8008bc2:	e7e9      	b.n	8008b98 <_vfiprintf_r+0x4c>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd2:	2330      	movs	r3, #48	; 0x30
 8008bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d98 <_vfiprintf_r+0x24c>
 8008bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bdc:	f04f 0901 	mov.w	r9, #1
 8008be0:	4623      	mov	r3, r4
 8008be2:	469a      	mov	sl, r3
 8008be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be8:	b10a      	cbz	r2, 8008bee <_vfiprintf_r+0xa2>
 8008bea:	2a25      	cmp	r2, #37	; 0x25
 8008bec:	d1f9      	bne.n	8008be2 <_vfiprintf_r+0x96>
 8008bee:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf2:	d00b      	beq.n	8008c0c <_vfiprintf_r+0xc0>
 8008bf4:	465b      	mov	r3, fp
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff ff93 	bl	8008b26 <__sfputs_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	f000 80aa 	beq.w	8008d5a <_vfiprintf_r+0x20e>
 8008c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c08:	445a      	add	r2, fp
 8008c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80a2 	beq.w	8008d5a <_vfiprintf_r+0x20e>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c20:	f10a 0a01 	add.w	sl, sl, #1
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c2e:	4654      	mov	r4, sl
 8008c30:	2205      	movs	r2, #5
 8008c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c36:	4858      	ldr	r0, [pc, #352]	; (8008d98 <_vfiprintf_r+0x24c>)
 8008c38:	f7f7 fada 	bl	80001f0 <memchr>
 8008c3c:	9a04      	ldr	r2, [sp, #16]
 8008c3e:	b9d8      	cbnz	r0, 8008c78 <_vfiprintf_r+0x12c>
 8008c40:	06d1      	lsls	r1, r2, #27
 8008c42:	bf44      	itt	mi
 8008c44:	2320      	movmi	r3, #32
 8008c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4a:	0713      	lsls	r3, r2, #28
 8008c4c:	bf44      	itt	mi
 8008c4e:	232b      	movmi	r3, #43	; 0x2b
 8008c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c54:	f89a 3000 	ldrb.w	r3, [sl]
 8008c58:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5a:	d015      	beq.n	8008c88 <_vfiprintf_r+0x13c>
 8008c5c:	9a07      	ldr	r2, [sp, #28]
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2000      	movs	r0, #0
 8008c62:	f04f 0c0a 	mov.w	ip, #10
 8008c66:	4621      	mov	r1, r4
 8008c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6c:	3b30      	subs	r3, #48	; 0x30
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d94e      	bls.n	8008d10 <_vfiprintf_r+0x1c4>
 8008c72:	b1b0      	cbz	r0, 8008ca2 <_vfiprintf_r+0x156>
 8008c74:	9207      	str	r2, [sp, #28]
 8008c76:	e014      	b.n	8008ca2 <_vfiprintf_r+0x156>
 8008c78:	eba0 0308 	sub.w	r3, r0, r8
 8008c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	46a2      	mov	sl, r4
 8008c86:	e7d2      	b.n	8008c2e <_vfiprintf_r+0xe2>
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	1d19      	adds	r1, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	9103      	str	r1, [sp, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbb      	ittet	lt
 8008c94:	425b      	neglt	r3, r3
 8008c96:	f042 0202 	orrlt.w	r2, r2, #2
 8008c9a:	9307      	strge	r3, [sp, #28]
 8008c9c:	9307      	strlt	r3, [sp, #28]
 8008c9e:	bfb8      	it	lt
 8008ca0:	9204      	strlt	r2, [sp, #16]
 8008ca2:	7823      	ldrb	r3, [r4, #0]
 8008ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ca6:	d10c      	bne.n	8008cc2 <_vfiprintf_r+0x176>
 8008ca8:	7863      	ldrb	r3, [r4, #1]
 8008caa:	2b2a      	cmp	r3, #42	; 0x2a
 8008cac:	d135      	bne.n	8008d1a <_vfiprintf_r+0x1ce>
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	9203      	str	r2, [sp, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bfb8      	it	lt
 8008cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cbe:	3402      	adds	r4, #2
 8008cc0:	9305      	str	r3, [sp, #20]
 8008cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008da8 <_vfiprintf_r+0x25c>
 8008cc6:	7821      	ldrb	r1, [r4, #0]
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4650      	mov	r0, sl
 8008ccc:	f7f7 fa90 	bl	80001f0 <memchr>
 8008cd0:	b140      	cbz	r0, 8008ce4 <_vfiprintf_r+0x198>
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	eba0 000a 	sub.w	r0, r0, sl
 8008cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8008cdc:	9b04      	ldr	r3, [sp, #16]
 8008cde:	4303      	orrs	r3, r0
 8008ce0:	3401      	adds	r4, #1
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce8:	482c      	ldr	r0, [pc, #176]	; (8008d9c <_vfiprintf_r+0x250>)
 8008cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cee:	2206      	movs	r2, #6
 8008cf0:	f7f7 fa7e 	bl	80001f0 <memchr>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d03f      	beq.n	8008d78 <_vfiprintf_r+0x22c>
 8008cf8:	4b29      	ldr	r3, [pc, #164]	; (8008da0 <_vfiprintf_r+0x254>)
 8008cfa:	bb1b      	cbnz	r3, 8008d44 <_vfiprintf_r+0x1f8>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	3307      	adds	r3, #7
 8008d00:	f023 0307 	bic.w	r3, r3, #7
 8008d04:	3308      	adds	r3, #8
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	443b      	add	r3, r7
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	e767      	b.n	8008be0 <_vfiprintf_r+0x94>
 8008d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d14:	460c      	mov	r4, r1
 8008d16:	2001      	movs	r0, #1
 8008d18:	e7a5      	b.n	8008c66 <_vfiprintf_r+0x11a>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	3401      	adds	r4, #1
 8008d1e:	9305      	str	r3, [sp, #20]
 8008d20:	4619      	mov	r1, r3
 8008d22:	f04f 0c0a 	mov.w	ip, #10
 8008d26:	4620      	mov	r0, r4
 8008d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2c:	3a30      	subs	r2, #48	; 0x30
 8008d2e:	2a09      	cmp	r2, #9
 8008d30:	d903      	bls.n	8008d3a <_vfiprintf_r+0x1ee>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0c5      	beq.n	8008cc2 <_vfiprintf_r+0x176>
 8008d36:	9105      	str	r1, [sp, #20]
 8008d38:	e7c3      	b.n	8008cc2 <_vfiprintf_r+0x176>
 8008d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d3e:	4604      	mov	r4, r0
 8008d40:	2301      	movs	r3, #1
 8008d42:	e7f0      	b.n	8008d26 <_vfiprintf_r+0x1da>
 8008d44:	ab03      	add	r3, sp, #12
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <_vfiprintf_r+0x258>)
 8008d4c:	a904      	add	r1, sp, #16
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7fd fdae 	bl	80068b0 <_printf_float>
 8008d54:	4607      	mov	r7, r0
 8008d56:	1c78      	adds	r0, r7, #1
 8008d58:	d1d6      	bne.n	8008d08 <_vfiprintf_r+0x1bc>
 8008d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d5c:	07d9      	lsls	r1, r3, #31
 8008d5e:	d405      	bmi.n	8008d6c <_vfiprintf_r+0x220>
 8008d60:	89ab      	ldrh	r3, [r5, #12]
 8008d62:	059a      	lsls	r2, r3, #22
 8008d64:	d402      	bmi.n	8008d6c <_vfiprintf_r+0x220>
 8008d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d68:	f7ff f91a 	bl	8007fa0 <__retarget_lock_release_recursive>
 8008d6c:	89ab      	ldrh	r3, [r5, #12]
 8008d6e:	065b      	lsls	r3, r3, #25
 8008d70:	f53f af12 	bmi.w	8008b98 <_vfiprintf_r+0x4c>
 8008d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d76:	e711      	b.n	8008b9c <_vfiprintf_r+0x50>
 8008d78:	ab03      	add	r3, sp, #12
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <_vfiprintf_r+0x258>)
 8008d80:	a904      	add	r1, sp, #16
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7fe f838 	bl	8006df8 <_printf_i>
 8008d88:	e7e4      	b.n	8008d54 <_vfiprintf_r+0x208>
 8008d8a:	bf00      	nop
 8008d8c:	0800bf44 	.word	0x0800bf44
 8008d90:	0800bf64 	.word	0x0800bf64
 8008d94:	0800bf24 	.word	0x0800bf24
 8008d98:	0800c0e4 	.word	0x0800c0e4
 8008d9c:	0800c0ee 	.word	0x0800c0ee
 8008da0:	080068b1 	.word	0x080068b1
 8008da4:	08008b27 	.word	0x08008b27
 8008da8:	0800c0ea 	.word	0x0800c0ea

08008dac <_sbrk_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d06      	ldr	r5, [pc, #24]	; (8008dc8 <_sbrk_r+0x1c>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	f7fa f842 	bl	8002e40 <_sbrk>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_sbrk_r+0x1a>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_sbrk_r+0x1a>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	20000400 	.word	0x20000400

08008dcc <__sread>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	f000 fae6 	bl	80093a4 <_read_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	bfab      	itete	ge
 8008ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dde:	89a3      	ldrhlt	r3, [r4, #12]
 8008de0:	181b      	addge	r3, r3, r0
 8008de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008de6:	bfac      	ite	ge
 8008de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dea:	81a3      	strhlt	r3, [r4, #12]
 8008dec:	bd10      	pop	{r4, pc}

08008dee <__swrite>:
 8008dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	461f      	mov	r7, r3
 8008df4:	898b      	ldrh	r3, [r1, #12]
 8008df6:	05db      	lsls	r3, r3, #23
 8008df8:	4605      	mov	r5, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	d505      	bpl.n	8008e0c <__swrite+0x1e>
 8008e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e04:	2302      	movs	r3, #2
 8008e06:	2200      	movs	r2, #0
 8008e08:	f000 f9f8 	bl	80091fc <_lseek_r>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	4632      	mov	r2, r6
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e22:	f000 b869 	b.w	8008ef8 <_write_r>

08008e26 <__sseek>:
 8008e26:	b510      	push	{r4, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2e:	f000 f9e5 	bl	80091fc <_lseek_r>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	bf15      	itete	ne
 8008e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e42:	81a3      	strheq	r3, [r4, #12]
 8008e44:	bf18      	it	ne
 8008e46:	81a3      	strhne	r3, [r4, #12]
 8008e48:	bd10      	pop	{r4, pc}

08008e4a <__sclose>:
 8008e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e4e:	f000 b8f1 	b.w	8009034 <_close_r>
	...

08008e54 <__swbuf_r>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	460e      	mov	r6, r1
 8008e58:	4614      	mov	r4, r2
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	b118      	cbz	r0, 8008e66 <__swbuf_r+0x12>
 8008e5e:	6983      	ldr	r3, [r0, #24]
 8008e60:	b90b      	cbnz	r3, 8008e66 <__swbuf_r+0x12>
 8008e62:	f7fe fff9 	bl	8007e58 <__sinit>
 8008e66:	4b21      	ldr	r3, [pc, #132]	; (8008eec <__swbuf_r+0x98>)
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	d12b      	bne.n	8008ec4 <__swbuf_r+0x70>
 8008e6c:	686c      	ldr	r4, [r5, #4]
 8008e6e:	69a3      	ldr	r3, [r4, #24]
 8008e70:	60a3      	str	r3, [r4, #8]
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	071a      	lsls	r2, r3, #28
 8008e76:	d52f      	bpl.n	8008ed8 <__swbuf_r+0x84>
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	b36b      	cbz	r3, 8008ed8 <__swbuf_r+0x84>
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	6820      	ldr	r0, [r4, #0]
 8008e80:	1ac0      	subs	r0, r0, r3
 8008e82:	6963      	ldr	r3, [r4, #20]
 8008e84:	b2f6      	uxtb	r6, r6
 8008e86:	4283      	cmp	r3, r0
 8008e88:	4637      	mov	r7, r6
 8008e8a:	dc04      	bgt.n	8008e96 <__swbuf_r+0x42>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f966 	bl	8009160 <_fflush_r>
 8008e94:	bb30      	cbnz	r0, 8008ee4 <__swbuf_r+0x90>
 8008e96:	68a3      	ldr	r3, [r4, #8]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	60a3      	str	r3, [r4, #8]
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	6022      	str	r2, [r4, #0]
 8008ea2:	701e      	strb	r6, [r3, #0]
 8008ea4:	6963      	ldr	r3, [r4, #20]
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	4283      	cmp	r3, r0
 8008eaa:	d004      	beq.n	8008eb6 <__swbuf_r+0x62>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	07db      	lsls	r3, r3, #31
 8008eb0:	d506      	bpl.n	8008ec0 <__swbuf_r+0x6c>
 8008eb2:	2e0a      	cmp	r6, #10
 8008eb4:	d104      	bne.n	8008ec0 <__swbuf_r+0x6c>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f000 f951 	bl	8009160 <_fflush_r>
 8008ebe:	b988      	cbnz	r0, 8008ee4 <__swbuf_r+0x90>
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec4:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <__swbuf_r+0x9c>)
 8008ec6:	429c      	cmp	r4, r3
 8008ec8:	d101      	bne.n	8008ece <__swbuf_r+0x7a>
 8008eca:	68ac      	ldr	r4, [r5, #8]
 8008ecc:	e7cf      	b.n	8008e6e <__swbuf_r+0x1a>
 8008ece:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <__swbuf_r+0xa0>)
 8008ed0:	429c      	cmp	r4, r3
 8008ed2:	bf08      	it	eq
 8008ed4:	68ec      	ldreq	r4, [r5, #12]
 8008ed6:	e7ca      	b.n	8008e6e <__swbuf_r+0x1a>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f81e 	bl	8008f1c <__swsetup_r>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0cb      	beq.n	8008e7c <__swbuf_r+0x28>
 8008ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8008ee8:	e7ea      	b.n	8008ec0 <__swbuf_r+0x6c>
 8008eea:	bf00      	nop
 8008eec:	0800bf44 	.word	0x0800bf44
 8008ef0:	0800bf64 	.word	0x0800bf64
 8008ef4:	0800bf24 	.word	0x0800bf24

08008ef8 <_write_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d07      	ldr	r5, [pc, #28]	; (8008f18 <_write_r+0x20>)
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	2200      	movs	r2, #0
 8008f04:	602a      	str	r2, [r5, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f7f9 ff49 	bl	8002d9e <_write>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d102      	bne.n	8008f16 <_write_r+0x1e>
 8008f10:	682b      	ldr	r3, [r5, #0]
 8008f12:	b103      	cbz	r3, 8008f16 <_write_r+0x1e>
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	20000400 	.word	0x20000400

08008f1c <__swsetup_r>:
 8008f1c:	4b32      	ldr	r3, [pc, #200]	; (8008fe8 <__swsetup_r+0xcc>)
 8008f1e:	b570      	push	{r4, r5, r6, lr}
 8008f20:	681d      	ldr	r5, [r3, #0]
 8008f22:	4606      	mov	r6, r0
 8008f24:	460c      	mov	r4, r1
 8008f26:	b125      	cbz	r5, 8008f32 <__swsetup_r+0x16>
 8008f28:	69ab      	ldr	r3, [r5, #24]
 8008f2a:	b913      	cbnz	r3, 8008f32 <__swsetup_r+0x16>
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f7fe ff93 	bl	8007e58 <__sinit>
 8008f32:	4b2e      	ldr	r3, [pc, #184]	; (8008fec <__swsetup_r+0xd0>)
 8008f34:	429c      	cmp	r4, r3
 8008f36:	d10f      	bne.n	8008f58 <__swsetup_r+0x3c>
 8008f38:	686c      	ldr	r4, [r5, #4]
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f40:	0719      	lsls	r1, r3, #28
 8008f42:	d42c      	bmi.n	8008f9e <__swsetup_r+0x82>
 8008f44:	06dd      	lsls	r5, r3, #27
 8008f46:	d411      	bmi.n	8008f6c <__swsetup_r+0x50>
 8008f48:	2309      	movs	r3, #9
 8008f4a:	6033      	str	r3, [r6, #0]
 8008f4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295
 8008f56:	e03e      	b.n	8008fd6 <__swsetup_r+0xba>
 8008f58:	4b25      	ldr	r3, [pc, #148]	; (8008ff0 <__swsetup_r+0xd4>)
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	d101      	bne.n	8008f62 <__swsetup_r+0x46>
 8008f5e:	68ac      	ldr	r4, [r5, #8]
 8008f60:	e7eb      	b.n	8008f3a <__swsetup_r+0x1e>
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <__swsetup_r+0xd8>)
 8008f64:	429c      	cmp	r4, r3
 8008f66:	bf08      	it	eq
 8008f68:	68ec      	ldreq	r4, [r5, #12]
 8008f6a:	e7e6      	b.n	8008f3a <__swsetup_r+0x1e>
 8008f6c:	0758      	lsls	r0, r3, #29
 8008f6e:	d512      	bpl.n	8008f96 <__swsetup_r+0x7a>
 8008f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f72:	b141      	cbz	r1, 8008f86 <__swsetup_r+0x6a>
 8008f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d002      	beq.n	8008f82 <__swsetup_r+0x66>
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff fbb5 	bl	80086ec <_free_r>
 8008f82:	2300      	movs	r3, #0
 8008f84:	6363      	str	r3, [r4, #52]	; 0x34
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f043 0308 	orr.w	r3, r3, #8
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	b94b      	cbnz	r3, 8008fb6 <__swsetup_r+0x9a>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fac:	d003      	beq.n	8008fb6 <__swsetup_r+0x9a>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f959 	bl	8009268 <__smakebuf_r>
 8008fb6:	89a0      	ldrh	r0, [r4, #12]
 8008fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fbc:	f010 0301 	ands.w	r3, r0, #1
 8008fc0:	d00a      	beq.n	8008fd8 <__swsetup_r+0xbc>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60a3      	str	r3, [r4, #8]
 8008fc6:	6963      	ldr	r3, [r4, #20]
 8008fc8:	425b      	negs	r3, r3
 8008fca:	61a3      	str	r3, [r4, #24]
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	b943      	cbnz	r3, 8008fe2 <__swsetup_r+0xc6>
 8008fd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fd4:	d1ba      	bne.n	8008f4c <__swsetup_r+0x30>
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	0781      	lsls	r1, r0, #30
 8008fda:	bf58      	it	pl
 8008fdc:	6963      	ldrpl	r3, [r4, #20]
 8008fde:	60a3      	str	r3, [r4, #8]
 8008fe0:	e7f4      	b.n	8008fcc <__swsetup_r+0xb0>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e7f7      	b.n	8008fd6 <__swsetup_r+0xba>
 8008fe6:	bf00      	nop
 8008fe8:	20000024 	.word	0x20000024
 8008fec:	0800bf44 	.word	0x0800bf44
 8008ff0:	0800bf64 	.word	0x0800bf64
 8008ff4:	0800bf24 	.word	0x0800bf24

08008ff8 <__assert_func>:
 8008ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ffa:	4614      	mov	r4, r2
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <__assert_func+0x2c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4605      	mov	r5, r0
 8009004:	68d8      	ldr	r0, [r3, #12]
 8009006:	b14c      	cbz	r4, 800901c <__assert_func+0x24>
 8009008:	4b07      	ldr	r3, [pc, #28]	; (8009028 <__assert_func+0x30>)
 800900a:	9100      	str	r1, [sp, #0]
 800900c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009010:	4906      	ldr	r1, [pc, #24]	; (800902c <__assert_func+0x34>)
 8009012:	462b      	mov	r3, r5
 8009014:	f000 f8e0 	bl	80091d8 <fiprintf>
 8009018:	f000 f9e3 	bl	80093e2 <abort>
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <__assert_func+0x38>)
 800901e:	461c      	mov	r4, r3
 8009020:	e7f3      	b.n	800900a <__assert_func+0x12>
 8009022:	bf00      	nop
 8009024:	20000024 	.word	0x20000024
 8009028:	0800c0f5 	.word	0x0800c0f5
 800902c:	0800c102 	.word	0x0800c102
 8009030:	0800c130 	.word	0x0800c130

08009034 <_close_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d06      	ldr	r5, [pc, #24]	; (8009050 <_close_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7f9 fec9 	bl	8002dd6 <_close>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_close_r+0x1a>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_close_r+0x1a>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20000400 	.word	0x20000400

08009054 <__sflush_r>:
 8009054:	898a      	ldrh	r2, [r1, #12]
 8009056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905a:	4605      	mov	r5, r0
 800905c:	0710      	lsls	r0, r2, #28
 800905e:	460c      	mov	r4, r1
 8009060:	d458      	bmi.n	8009114 <__sflush_r+0xc0>
 8009062:	684b      	ldr	r3, [r1, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	dc05      	bgt.n	8009074 <__sflush_r+0x20>
 8009068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	dc02      	bgt.n	8009074 <__sflush_r+0x20>
 800906e:	2000      	movs	r0, #0
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009076:	2e00      	cmp	r6, #0
 8009078:	d0f9      	beq.n	800906e <__sflush_r+0x1a>
 800907a:	2300      	movs	r3, #0
 800907c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009080:	682f      	ldr	r7, [r5, #0]
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	d032      	beq.n	80090ec <__sflush_r+0x98>
 8009086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	075a      	lsls	r2, r3, #29
 800908c:	d505      	bpl.n	800909a <__sflush_r+0x46>
 800908e:	6863      	ldr	r3, [r4, #4]
 8009090:	1ac0      	subs	r0, r0, r3
 8009092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009094:	b10b      	cbz	r3, 800909a <__sflush_r+0x46>
 8009096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009098:	1ac0      	subs	r0, r0, r3
 800909a:	2300      	movs	r3, #0
 800909c:	4602      	mov	r2, r0
 800909e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090a0:	6a21      	ldr	r1, [r4, #32]
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b0      	blx	r6
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	d106      	bne.n	80090ba <__sflush_r+0x66>
 80090ac:	6829      	ldr	r1, [r5, #0]
 80090ae:	291d      	cmp	r1, #29
 80090b0:	d82c      	bhi.n	800910c <__sflush_r+0xb8>
 80090b2:	4a2a      	ldr	r2, [pc, #168]	; (800915c <__sflush_r+0x108>)
 80090b4:	40ca      	lsrs	r2, r1
 80090b6:	07d6      	lsls	r6, r2, #31
 80090b8:	d528      	bpl.n	800910c <__sflush_r+0xb8>
 80090ba:	2200      	movs	r2, #0
 80090bc:	6062      	str	r2, [r4, #4]
 80090be:	04d9      	lsls	r1, r3, #19
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	6022      	str	r2, [r4, #0]
 80090c4:	d504      	bpl.n	80090d0 <__sflush_r+0x7c>
 80090c6:	1c42      	adds	r2, r0, #1
 80090c8:	d101      	bne.n	80090ce <__sflush_r+0x7a>
 80090ca:	682b      	ldr	r3, [r5, #0]
 80090cc:	b903      	cbnz	r3, 80090d0 <__sflush_r+0x7c>
 80090ce:	6560      	str	r0, [r4, #84]	; 0x54
 80090d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090d2:	602f      	str	r7, [r5, #0]
 80090d4:	2900      	cmp	r1, #0
 80090d6:	d0ca      	beq.n	800906e <__sflush_r+0x1a>
 80090d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090dc:	4299      	cmp	r1, r3
 80090de:	d002      	beq.n	80090e6 <__sflush_r+0x92>
 80090e0:	4628      	mov	r0, r5
 80090e2:	f7ff fb03 	bl	80086ec <_free_r>
 80090e6:	2000      	movs	r0, #0
 80090e8:	6360      	str	r0, [r4, #52]	; 0x34
 80090ea:	e7c1      	b.n	8009070 <__sflush_r+0x1c>
 80090ec:	6a21      	ldr	r1, [r4, #32]
 80090ee:	2301      	movs	r3, #1
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b0      	blx	r6
 80090f4:	1c41      	adds	r1, r0, #1
 80090f6:	d1c7      	bne.n	8009088 <__sflush_r+0x34>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0c4      	beq.n	8009088 <__sflush_r+0x34>
 80090fe:	2b1d      	cmp	r3, #29
 8009100:	d001      	beq.n	8009106 <__sflush_r+0xb2>
 8009102:	2b16      	cmp	r3, #22
 8009104:	d101      	bne.n	800910a <__sflush_r+0xb6>
 8009106:	602f      	str	r7, [r5, #0]
 8009108:	e7b1      	b.n	800906e <__sflush_r+0x1a>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	e7ad      	b.n	8009070 <__sflush_r+0x1c>
 8009114:	690f      	ldr	r7, [r1, #16]
 8009116:	2f00      	cmp	r7, #0
 8009118:	d0a9      	beq.n	800906e <__sflush_r+0x1a>
 800911a:	0793      	lsls	r3, r2, #30
 800911c:	680e      	ldr	r6, [r1, #0]
 800911e:	bf08      	it	eq
 8009120:	694b      	ldreq	r3, [r1, #20]
 8009122:	600f      	str	r7, [r1, #0]
 8009124:	bf18      	it	ne
 8009126:	2300      	movne	r3, #0
 8009128:	eba6 0807 	sub.w	r8, r6, r7
 800912c:	608b      	str	r3, [r1, #8]
 800912e:	f1b8 0f00 	cmp.w	r8, #0
 8009132:	dd9c      	ble.n	800906e <__sflush_r+0x1a>
 8009134:	6a21      	ldr	r1, [r4, #32]
 8009136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009138:	4643      	mov	r3, r8
 800913a:	463a      	mov	r2, r7
 800913c:	4628      	mov	r0, r5
 800913e:	47b0      	blx	r6
 8009140:	2800      	cmp	r0, #0
 8009142:	dc06      	bgt.n	8009152 <__sflush_r+0xfe>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	e78e      	b.n	8009070 <__sflush_r+0x1c>
 8009152:	4407      	add	r7, r0
 8009154:	eba8 0800 	sub.w	r8, r8, r0
 8009158:	e7e9      	b.n	800912e <__sflush_r+0xda>
 800915a:	bf00      	nop
 800915c:	20400001 	.word	0x20400001

08009160 <_fflush_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	690b      	ldr	r3, [r1, #16]
 8009164:	4605      	mov	r5, r0
 8009166:	460c      	mov	r4, r1
 8009168:	b913      	cbnz	r3, 8009170 <_fflush_r+0x10>
 800916a:	2500      	movs	r5, #0
 800916c:	4628      	mov	r0, r5
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	b118      	cbz	r0, 800917a <_fflush_r+0x1a>
 8009172:	6983      	ldr	r3, [r0, #24]
 8009174:	b90b      	cbnz	r3, 800917a <_fflush_r+0x1a>
 8009176:	f7fe fe6f 	bl	8007e58 <__sinit>
 800917a:	4b14      	ldr	r3, [pc, #80]	; (80091cc <_fflush_r+0x6c>)
 800917c:	429c      	cmp	r4, r3
 800917e:	d11b      	bne.n	80091b8 <_fflush_r+0x58>
 8009180:	686c      	ldr	r4, [r5, #4]
 8009182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0ef      	beq.n	800916a <_fflush_r+0xa>
 800918a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800918c:	07d0      	lsls	r0, r2, #31
 800918e:	d404      	bmi.n	800919a <_fflush_r+0x3a>
 8009190:	0599      	lsls	r1, r3, #22
 8009192:	d402      	bmi.n	800919a <_fflush_r+0x3a>
 8009194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009196:	f7fe ff02 	bl	8007f9e <__retarget_lock_acquire_recursive>
 800919a:	4628      	mov	r0, r5
 800919c:	4621      	mov	r1, r4
 800919e:	f7ff ff59 	bl	8009054 <__sflush_r>
 80091a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091a4:	07da      	lsls	r2, r3, #31
 80091a6:	4605      	mov	r5, r0
 80091a8:	d4e0      	bmi.n	800916c <_fflush_r+0xc>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	059b      	lsls	r3, r3, #22
 80091ae:	d4dd      	bmi.n	800916c <_fflush_r+0xc>
 80091b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b2:	f7fe fef5 	bl	8007fa0 <__retarget_lock_release_recursive>
 80091b6:	e7d9      	b.n	800916c <_fflush_r+0xc>
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <_fflush_r+0x70>)
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d101      	bne.n	80091c2 <_fflush_r+0x62>
 80091be:	68ac      	ldr	r4, [r5, #8]
 80091c0:	e7df      	b.n	8009182 <_fflush_r+0x22>
 80091c2:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <_fflush_r+0x74>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	bf08      	it	eq
 80091c8:	68ec      	ldreq	r4, [r5, #12]
 80091ca:	e7da      	b.n	8009182 <_fflush_r+0x22>
 80091cc:	0800bf44 	.word	0x0800bf44
 80091d0:	0800bf64 	.word	0x0800bf64
 80091d4:	0800bf24 	.word	0x0800bf24

080091d8 <fiprintf>:
 80091d8:	b40e      	push	{r1, r2, r3}
 80091da:	b503      	push	{r0, r1, lr}
 80091dc:	4601      	mov	r1, r0
 80091de:	ab03      	add	r3, sp, #12
 80091e0:	4805      	ldr	r0, [pc, #20]	; (80091f8 <fiprintf+0x20>)
 80091e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e6:	6800      	ldr	r0, [r0, #0]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	f7ff fcaf 	bl	8008b4c <_vfiprintf_r>
 80091ee:	b002      	add	sp, #8
 80091f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091f4:	b003      	add	sp, #12
 80091f6:	4770      	bx	lr
 80091f8:	20000024 	.word	0x20000024

080091fc <_lseek_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	; (800921c <_lseek_r+0x20>)
 8009200:	4604      	mov	r4, r0
 8009202:	4608      	mov	r0, r1
 8009204:	4611      	mov	r1, r2
 8009206:	2200      	movs	r2, #0
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f9 fe0a 	bl	8002e24 <_lseek>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_lseek_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_lseek_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	20000400 	.word	0x20000400

08009220 <__swhatbuf_r>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	460e      	mov	r6, r1
 8009224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009228:	2900      	cmp	r1, #0
 800922a:	b096      	sub	sp, #88	; 0x58
 800922c:	4614      	mov	r4, r2
 800922e:	461d      	mov	r5, r3
 8009230:	da07      	bge.n	8009242 <__swhatbuf_r+0x22>
 8009232:	2300      	movs	r3, #0
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	89b3      	ldrh	r3, [r6, #12]
 8009238:	061a      	lsls	r2, r3, #24
 800923a:	d410      	bmi.n	800925e <__swhatbuf_r+0x3e>
 800923c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009240:	e00e      	b.n	8009260 <__swhatbuf_r+0x40>
 8009242:	466a      	mov	r2, sp
 8009244:	f000 f8d4 	bl	80093f0 <_fstat_r>
 8009248:	2800      	cmp	r0, #0
 800924a:	dbf2      	blt.n	8009232 <__swhatbuf_r+0x12>
 800924c:	9a01      	ldr	r2, [sp, #4]
 800924e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009256:	425a      	negs	r2, r3
 8009258:	415a      	adcs	r2, r3
 800925a:	602a      	str	r2, [r5, #0]
 800925c:	e7ee      	b.n	800923c <__swhatbuf_r+0x1c>
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	2000      	movs	r0, #0
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	b016      	add	sp, #88	; 0x58
 8009266:	bd70      	pop	{r4, r5, r6, pc}

08009268 <__smakebuf_r>:
 8009268:	898b      	ldrh	r3, [r1, #12]
 800926a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800926c:	079d      	lsls	r5, r3, #30
 800926e:	4606      	mov	r6, r0
 8009270:	460c      	mov	r4, r1
 8009272:	d507      	bpl.n	8009284 <__smakebuf_r+0x1c>
 8009274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	6123      	str	r3, [r4, #16]
 800927c:	2301      	movs	r3, #1
 800927e:	6163      	str	r3, [r4, #20]
 8009280:	b002      	add	sp, #8
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	ab01      	add	r3, sp, #4
 8009286:	466a      	mov	r2, sp
 8009288:	f7ff ffca 	bl	8009220 <__swhatbuf_r>
 800928c:	9900      	ldr	r1, [sp, #0]
 800928e:	4605      	mov	r5, r0
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff fa7b 	bl	800878c <_malloc_r>
 8009296:	b948      	cbnz	r0, 80092ac <__smakebuf_r+0x44>
 8009298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800929c:	059a      	lsls	r2, r3, #22
 800929e:	d4ef      	bmi.n	8009280 <__smakebuf_r+0x18>
 80092a0:	f023 0303 	bic.w	r3, r3, #3
 80092a4:	f043 0302 	orr.w	r3, r3, #2
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	e7e3      	b.n	8009274 <__smakebuf_r+0xc>
 80092ac:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <__smakebuf_r+0x7c>)
 80092ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	6020      	str	r0, [r4, #0]
 80092b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	9b00      	ldr	r3, [sp, #0]
 80092bc:	6163      	str	r3, [r4, #20]
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	6120      	str	r0, [r4, #16]
 80092c2:	b15b      	cbz	r3, 80092dc <__smakebuf_r+0x74>
 80092c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092c8:	4630      	mov	r0, r6
 80092ca:	f000 f8a3 	bl	8009414 <_isatty_r>
 80092ce:	b128      	cbz	r0, 80092dc <__smakebuf_r+0x74>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	f023 0303 	bic.w	r3, r3, #3
 80092d6:	f043 0301 	orr.w	r3, r3, #1
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	89a0      	ldrh	r0, [r4, #12]
 80092de:	4305      	orrs	r5, r0
 80092e0:	81a5      	strh	r5, [r4, #12]
 80092e2:	e7cd      	b.n	8009280 <__smakebuf_r+0x18>
 80092e4:	08007df1 	.word	0x08007df1

080092e8 <__ascii_mbtowc>:
 80092e8:	b082      	sub	sp, #8
 80092ea:	b901      	cbnz	r1, 80092ee <__ascii_mbtowc+0x6>
 80092ec:	a901      	add	r1, sp, #4
 80092ee:	b142      	cbz	r2, 8009302 <__ascii_mbtowc+0x1a>
 80092f0:	b14b      	cbz	r3, 8009306 <__ascii_mbtowc+0x1e>
 80092f2:	7813      	ldrb	r3, [r2, #0]
 80092f4:	600b      	str	r3, [r1, #0]
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	1e10      	subs	r0, r2, #0
 80092fa:	bf18      	it	ne
 80092fc:	2001      	movne	r0, #1
 80092fe:	b002      	add	sp, #8
 8009300:	4770      	bx	lr
 8009302:	4610      	mov	r0, r2
 8009304:	e7fb      	b.n	80092fe <__ascii_mbtowc+0x16>
 8009306:	f06f 0001 	mvn.w	r0, #1
 800930a:	e7f8      	b.n	80092fe <__ascii_mbtowc+0x16>

0800930c <memmove>:
 800930c:	4288      	cmp	r0, r1
 800930e:	b510      	push	{r4, lr}
 8009310:	eb01 0402 	add.w	r4, r1, r2
 8009314:	d902      	bls.n	800931c <memmove+0x10>
 8009316:	4284      	cmp	r4, r0
 8009318:	4623      	mov	r3, r4
 800931a:	d807      	bhi.n	800932c <memmove+0x20>
 800931c:	1e43      	subs	r3, r0, #1
 800931e:	42a1      	cmp	r1, r4
 8009320:	d008      	beq.n	8009334 <memmove+0x28>
 8009322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800932a:	e7f8      	b.n	800931e <memmove+0x12>
 800932c:	4402      	add	r2, r0
 800932e:	4601      	mov	r1, r0
 8009330:	428a      	cmp	r2, r1
 8009332:	d100      	bne.n	8009336 <memmove+0x2a>
 8009334:	bd10      	pop	{r4, pc}
 8009336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800933a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800933e:	e7f7      	b.n	8009330 <memmove+0x24>

08009340 <__malloc_lock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_lock+0x8>)
 8009342:	f7fe be2c 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	200003f8 	.word	0x200003f8

0800934c <__malloc_unlock>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__malloc_unlock+0x8>)
 800934e:	f7fe be27 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	200003f8 	.word	0x200003f8

08009358 <_realloc_r>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	4607      	mov	r7, r0
 800935c:	4614      	mov	r4, r2
 800935e:	460e      	mov	r6, r1
 8009360:	b921      	cbnz	r1, 800936c <_realloc_r+0x14>
 8009362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009366:	4611      	mov	r1, r2
 8009368:	f7ff ba10 	b.w	800878c <_malloc_r>
 800936c:	b922      	cbnz	r2, 8009378 <_realloc_r+0x20>
 800936e:	f7ff f9bd 	bl	80086ec <_free_r>
 8009372:	4625      	mov	r5, r4
 8009374:	4628      	mov	r0, r5
 8009376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009378:	f000 f85c 	bl	8009434 <_malloc_usable_size_r>
 800937c:	42a0      	cmp	r0, r4
 800937e:	d20f      	bcs.n	80093a0 <_realloc_r+0x48>
 8009380:	4621      	mov	r1, r4
 8009382:	4638      	mov	r0, r7
 8009384:	f7ff fa02 	bl	800878c <_malloc_r>
 8009388:	4605      	mov	r5, r0
 800938a:	2800      	cmp	r0, #0
 800938c:	d0f2      	beq.n	8009374 <_realloc_r+0x1c>
 800938e:	4631      	mov	r1, r6
 8009390:	4622      	mov	r2, r4
 8009392:	f7fe fe0f 	bl	8007fb4 <memcpy>
 8009396:	4631      	mov	r1, r6
 8009398:	4638      	mov	r0, r7
 800939a:	f7ff f9a7 	bl	80086ec <_free_r>
 800939e:	e7e9      	b.n	8009374 <_realloc_r+0x1c>
 80093a0:	4635      	mov	r5, r6
 80093a2:	e7e7      	b.n	8009374 <_realloc_r+0x1c>

080093a4 <_read_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_read_r+0x20>)
 80093a8:	4604      	mov	r4, r0
 80093aa:	4608      	mov	r0, r1
 80093ac:	4611      	mov	r1, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f7f9 fcd6 	bl	8002d64 <_read>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_read_r+0x1e>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_read_r+0x1e>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20000400 	.word	0x20000400

080093c8 <__ascii_wctomb>:
 80093c8:	b149      	cbz	r1, 80093de <__ascii_wctomb+0x16>
 80093ca:	2aff      	cmp	r2, #255	; 0xff
 80093cc:	bf85      	ittet	hi
 80093ce:	238a      	movhi	r3, #138	; 0x8a
 80093d0:	6003      	strhi	r3, [r0, #0]
 80093d2:	700a      	strbls	r2, [r1, #0]
 80093d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80093d8:	bf98      	it	ls
 80093da:	2001      	movls	r0, #1
 80093dc:	4770      	bx	lr
 80093de:	4608      	mov	r0, r1
 80093e0:	4770      	bx	lr

080093e2 <abort>:
 80093e2:	b508      	push	{r3, lr}
 80093e4:	2006      	movs	r0, #6
 80093e6:	f000 f855 	bl	8009494 <raise>
 80093ea:	2001      	movs	r0, #1
 80093ec:	f7f9 fcb0 	bl	8002d50 <_exit>

080093f0 <_fstat_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d07      	ldr	r5, [pc, #28]	; (8009410 <_fstat_r+0x20>)
 80093f4:	2300      	movs	r3, #0
 80093f6:	4604      	mov	r4, r0
 80093f8:	4608      	mov	r0, r1
 80093fa:	4611      	mov	r1, r2
 80093fc:	602b      	str	r3, [r5, #0]
 80093fe:	f7f9 fcf6 	bl	8002dee <_fstat>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	d102      	bne.n	800940c <_fstat_r+0x1c>
 8009406:	682b      	ldr	r3, [r5, #0]
 8009408:	b103      	cbz	r3, 800940c <_fstat_r+0x1c>
 800940a:	6023      	str	r3, [r4, #0]
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	bf00      	nop
 8009410:	20000400 	.word	0x20000400

08009414 <_isatty_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d06      	ldr	r5, [pc, #24]	; (8009430 <_isatty_r+0x1c>)
 8009418:	2300      	movs	r3, #0
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	f7f9 fcf5 	bl	8002e0e <_isatty>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_isatty_r+0x1a>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	b103      	cbz	r3, 800942e <_isatty_r+0x1a>
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	20000400 	.word	0x20000400

08009434 <_malloc_usable_size_r>:
 8009434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009438:	1f18      	subs	r0, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfbc      	itt	lt
 800943e:	580b      	ldrlt	r3, [r1, r0]
 8009440:	18c0      	addlt	r0, r0, r3
 8009442:	4770      	bx	lr

08009444 <_raise_r>:
 8009444:	291f      	cmp	r1, #31
 8009446:	b538      	push	{r3, r4, r5, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	d904      	bls.n	8009458 <_raise_r+0x14>
 800944e:	2316      	movs	r3, #22
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	f04f 30ff 	mov.w	r0, #4294967295
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800945a:	b112      	cbz	r2, 8009462 <_raise_r+0x1e>
 800945c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009460:	b94b      	cbnz	r3, 8009476 <_raise_r+0x32>
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f830 	bl	80094c8 <_getpid_r>
 8009468:	462a      	mov	r2, r5
 800946a:	4601      	mov	r1, r0
 800946c:	4620      	mov	r0, r4
 800946e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009472:	f000 b817 	b.w	80094a4 <_kill_r>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d00a      	beq.n	8009490 <_raise_r+0x4c>
 800947a:	1c59      	adds	r1, r3, #1
 800947c:	d103      	bne.n	8009486 <_raise_r+0x42>
 800947e:	2316      	movs	r3, #22
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	2001      	movs	r0, #1
 8009484:	e7e7      	b.n	8009456 <_raise_r+0x12>
 8009486:	2400      	movs	r4, #0
 8009488:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800948c:	4628      	mov	r0, r5
 800948e:	4798      	blx	r3
 8009490:	2000      	movs	r0, #0
 8009492:	e7e0      	b.n	8009456 <_raise_r+0x12>

08009494 <raise>:
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <raise+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f7ff bfd3 	b.w	8009444 <_raise_r>
 800949e:	bf00      	nop
 80094a0:	20000024 	.word	0x20000024

080094a4 <_kill_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	; (80094c4 <_kill_r+0x20>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f7f9 fc3d 	bl	8002d30 <_kill>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d102      	bne.n	80094c0 <_kill_r+0x1c>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	b103      	cbz	r3, 80094c0 <_kill_r+0x1c>
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
 80094c2:	bf00      	nop
 80094c4:	20000400 	.word	0x20000400

080094c8 <_getpid_r>:
 80094c8:	f7f9 bc2a 	b.w	8002d20 <_getpid>

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
