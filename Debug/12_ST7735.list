
12_ST7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e34  08009690  08009690  00019690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4c4  0800c4c4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4c4  0800c4c4  0001c4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4cc  0800c4cc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4cc  0800c4cc  0001c4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4d0  0800c4d0  0001c4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001f8  0800c6c8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800c6c8  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bca  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea9  00000000  00000000  00043dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00047c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  000491a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b220  00000000  00000000  0004a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd7f  00000000  00000000  00065760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000952c3  00000000  00000000  000824df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001177a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006994  00000000  00000000  001177f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009674 	.word	0x08009674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08009674 	.word	0x08009674

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000ece:	88f8      	ldrh	r0, [r7, #6]
 8000ed0:	88b9      	ldrh	r1, [r7, #4]
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	883c      	ldrh	r4, [r7, #0]
 8000ed6:	8b3b      	ldrh	r3, [r7, #24]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4623      	mov	r3, r4
 8000edc:	f000 fa88 	bl	80013f0 <ST7735_FillRectangle>
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <fillScreen+0x2c>)
 8000ef4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <fillScreen+0x30>)
 8000efa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	2100      	movs	r1, #0
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ffd2 	bl	8000eb0 <fillRect>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000024c 	.word	0x2000024c
 8000f18:	20000250 	.word	0x20000250

08000f1c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <ST7735_Select+0x14>)
 8000f26:	f002 fd6b 	bl	8003a00 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000

08000f34 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <ST7735_Unselect+0x14>)
 8000f3e:	f002 fd5f 	bl	8003a00 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000

08000f4c <ST7735_Reset>:

void ST7735_Reset()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <ST7735_Reset+0x24>)
 8000f56:	f002 fd53 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 fa04 	bl	8003368 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <ST7735_Reset+0x24>)
 8000f66:	f002 fd4b 	bl	8003a00 <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000

08000f74 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <ST7735_WriteCommand+0x2c>)
 8000f84:	f002 fd3c 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f88:	1df9      	adds	r1, r7, #7
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <ST7735_WriteCommand+0x30>)
 8000f92:	f004 fa0c 	bl	80053ae <HAL_SPI_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	2000030c 	.word	0x2000030c

08000fa8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <ST7735_WriteData+0x2c>)
 8000fb8:	f002 fd22 	bl	8003a00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <ST7735_WriteData+0x30>)
 8000fc8:	f004 f9f1 	bl	80053ae <HAL_SPI_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	2000030c 	.word	0x2000030c

08000fdc <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000fee:	e034      	b.n	800105a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffb9 	bl	8000f74 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800100c:	7abb      	ldrb	r3, [r7, #10]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800101c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffbd 	bl	8000fa8 <ST7735_WriteData>
            addr += numArgs;
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <DisplayInit+0x7e>
            ms = *addr++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	2bff      	cmp	r3, #255	; 0xff
 800104a:	d102      	bne.n	8001052 <DisplayInit+0x76>
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f987 	bl	8003368 <HAL_Delay>
    while(numCommands--) {
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	73fa      	strb	r2, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <DisplayInit+0x14>
        }
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4623      	mov	r3, r4
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	460b      	mov	r3, r1
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	4613      	mov	r3, r2
 800108c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800108e:	202a      	movs	r0, #42	; 0x2a
 8001090:	f7ff ff70 	bl	8000f74 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001094:	2300      	movs	r3, #0
 8001096:	733b      	strb	r3, [r7, #12]
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <ST7735_SetAddressWindow+0x88>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4413      	add	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	737b      	strb	r3, [r7, #13]
 80010a4:	2300      	movs	r3, #0
 80010a6:	73bb      	strb	r3, [r7, #14]
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <ST7735_SetAddressWindow+0x88>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff74 	bl	8000fa8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80010c0:	202b      	movs	r0, #43	; 0x2b
 80010c2:	f7ff ff57 	bl	8000f74 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <ST7735_SetAddressWindow+0x8c>)
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	4413      	add	r3, r2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <ST7735_SetAddressWindow+0x8c>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	793b      	ldrb	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80010ea:	202c      	movs	r0, #44	; 0x2c
 80010ec:	f7ff ff42 	bl	8000f74 <ST7735_WriteCommand>
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	20000244 	.word	0x20000244
 80010fc:	20000248 	.word	0x20000248

08001100 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800110a:	f7ff ff07 	bl	8000f1c <ST7735_Select>
    ST7735_Reset();
 800110e:	f7ff ff1d 	bl	8000f4c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <ST7735_Init+0x44>)
 8001114:	f7ff ff62 	bl	8000fdc <DisplayInit>
    DisplayInit(init_cmds2);
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <ST7735_Init+0x48>)
 800111a:	f7ff ff5f 	bl	8000fdc <DisplayInit>
    DisplayInit(init_cmds3);
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <ST7735_Init+0x4c>)
 8001120:	f7ff ff5c 	bl	8000fdc <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <ST7735_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <ST7735_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f810 	bl	8001158 <ST7735_SetRotation>
    ST7735_Unselect();
 8001138:	f7ff fefc 	bl	8000f34 <ST7735_Unselect>

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	08009840 	.word	0x08009840
 8001148:	08009878 	.word	0x08009878
 800114c:	08009888 	.word	0x08009888
 8001150:	20000245 	.word	0x20000245
 8001154:	20000249 	.word	0x20000249

08001158 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <ST7735_SetRotation+0xe4>)
 8001170:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <ST7735_SetRotation+0xe4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d84e      	bhi.n	8001218 <ST7735_SetRotation+0xc0>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <ST7735_SetRotation+0x28>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001191 	.word	0x08001191
 8001184:	080011b3 	.word	0x080011b3
 8001188:	080011d5 	.word	0x080011d5
 800118c:	080011f7 	.word	0x080011f7
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <ST7735_SetRotation+0xe8>)
 8001196:	22a0      	movs	r2, #160	; 0xa0
 8001198:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <ST7735_SetRotation+0xec>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <ST7735_SetRotation+0xf4>)
 80011a6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011b0:	e032      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <ST7735_SetRotation+0xec>)
 80011b8:	22a0      	movs	r2, #160	; 0xa0
 80011ba:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <ST7735_SetRotation+0xe8>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011c8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <ST7735_SetRotation+0xf4>)
 80011d0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011d2:	e021      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <ST7735_SetRotation+0xe8>)
 80011da:	22a0      	movs	r2, #160	; 0xa0
 80011dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <ST7735_SetRotation+0xec>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <ST7735_SetRotation+0xf4>)
 80011ea:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011f4:	e010      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <ST7735_SetRotation+0xec>)
 80011fc:	22a0      	movs	r2, #160	; 0xa0
 80011fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <ST7735_SetRotation+0xe8>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <ST7735_SetRotation+0xf0>)
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <ST7735_SetRotation+0xfc>)
 800120c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <ST7735_SetRotation+0xf8>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <ST7735_SetRotation+0xf4>)
 8001214:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001216:	bf00      	nop
  }
  ST7735_Select();
 8001218:	f7ff fe80 	bl	8000f1c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800121c:	2036      	movs	r0, #54	; 0x36
 800121e:	f7ff fea9 	bl	8000f74 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001222:	f107 030f 	add.w	r3, r7, #15
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff febd 	bl	8000fa8 <ST7735_WriteData>
  ST7735_Unselect();
 800122e:	f7ff fe81 	bl	8000f34 <ST7735_Unselect>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000024a 	.word	0x2000024a
 8001240:	20000250 	.word	0x20000250
 8001244:	2000024c 	.word	0x2000024c
 8001248:	20000245 	.word	0x20000245
 800124c:	20000244 	.word	0x20000244
 8001250:	20000249 	.word	0x20000249
 8001254:	20000248 	.word	0x20000248

08001258 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001258:	b082      	sub	sp, #8
 800125a:	b590      	push	{r4, r7, lr}
 800125c:	b089      	sub	sp, #36	; 0x24
 800125e:	af00      	add	r7, sp, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	460b      	mov	r3, r1
 8001268:	80bb      	strh	r3, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2d8      	uxtb	r0, r3
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b2dc      	uxtb	r4, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4622      	mov	r2, r4
 8001298:	f7ff feea 	bl	8001070 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e043      	b.n	800132a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	3b20      	subs	r3, #32
 80012a8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	440b      	add	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	e029      	b.n	8001318 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00e      	beq.n	80012f2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	743b      	strb	r3, [r7, #16]
 80012de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fe5c 	bl	8000fa8 <ST7735_WriteData>
 80012f0:	e00f      	b.n	8001312 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	733b      	strb	r3, [r7, #12]
 80012fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001302:	b2db      	uxtb	r3, r3
 8001304:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2102      	movs	r1, #2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe4b 	bl	8000fa8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	3301      	adds	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800131c:	461a      	mov	r2, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4293      	cmp	r3, r2
 8001322:	d3cf      	bcc.n	80012c4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3301      	adds	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800132e:	461a      	mov	r2, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4293      	cmp	r3, r2
 8001334:	d3b5      	bcc.n	80012a2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001342:	b002      	add	sp, #8
 8001344:	4770      	bx	lr
	...

08001348 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001348:	b082      	sub	sp, #8
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af04      	add	r7, sp, #16
 8001350:	603a      	str	r2, [r7, #0]
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	460b      	mov	r3, r1
 800135a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800135c:	f7ff fdde 	bl	8000f1c <ST7735_Select>

    while(*str) {
 8001360:	e033      	b.n	80013ca <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	7d3a      	ldrb	r2, [r7, #20]
 8001366:	4413      	add	r3, r2
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <ST7735_WriteString+0xa0>)
 800136a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800136e:	4293      	cmp	r3, r2
 8001370:	db16      	blt.n	80013a0 <ST7735_WriteString+0x58>
            x = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001376:	7d7b      	ldrb	r3, [r7, #21]
 8001378:	b29a      	uxth	r2, r3
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	7d7a      	ldrb	r2, [r7, #21]
 8001384:	4413      	add	r3, r2
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <ST7735_WriteString+0xa4>)
 8001388:	f9b2 2000 	ldrsh.w	r2, [r2]
 800138c:	4293      	cmp	r3, r2
 800138e:	da21      	bge.n	80013d4 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b20      	cmp	r3, #32
 8001396:	d103      	bne.n	80013a0 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	603b      	str	r3, [r7, #0]
                continue;
 800139e:	e014      	b.n	80013ca <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	88b9      	ldrh	r1, [r7, #4]
 80013a6:	88f8      	ldrh	r0, [r7, #6]
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	8bbb      	ldrh	r3, [r7, #28]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f7ff ff4f 	bl	8001258 <ST7735_WriteChar>
        x += font.width;
 80013ba:	7d3b      	ldrb	r3, [r7, #20]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4413      	add	r3, r2
 80013c2:	80fb      	strh	r3, [r7, #6]
        str++;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1c7      	bne.n	8001362 <ST7735_WriteString+0x1a>
 80013d2:	e000      	b.n	80013d6 <ST7735_WriteString+0x8e>
                break;
 80013d4:	bf00      	nop
    }

    ST7735_Unselect();
 80013d6:	f7ff fdad 	bl	8000f34 <ST7735_Unselect>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e4:	b002      	add	sp, #8
 80013e6:	4770      	bx	lr
 80013e8:	2000024c 	.word	0x2000024c
 80013ec:	20000250 	.word	0x20000250

080013f0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	4603      	mov	r3, r0
 8001404:	80bb      	strh	r3, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
 800140a:	4613      	mov	r3, r2
 800140c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4a37      	ldr	r2, [pc, #220]	; (80014f0 <ST7735_FillRectangle+0x100>)
 8001412:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001416:	4293      	cmp	r3, r2
 8001418:	da66      	bge.n	80014e8 <ST7735_FillRectangle+0xf8>
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	4a35      	ldr	r2, [pc, #212]	; (80014f4 <ST7735_FillRectangle+0x104>)
 800141e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001422:	4293      	cmp	r3, r2
 8001424:	da60      	bge.n	80014e8 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	4413      	add	r3, r2
 800142c:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <ST7735_FillRectangle+0x100>)
 800142e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001432:	4293      	cmp	r3, r2
 8001434:	dd06      	ble.n	8001444 <ST7735_FillRectangle+0x54>
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <ST7735_FillRectangle+0x100>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	b29a      	uxth	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001444:	88ba      	ldrh	r2, [r7, #4]
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	4a2a      	ldr	r2, [pc, #168]	; (80014f4 <ST7735_FillRectangle+0x104>)
 800144c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001450:	4293      	cmp	r3, r2
 8001452:	dd06      	ble.n	8001462 <ST7735_FillRectangle+0x72>
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <ST7735_FillRectangle+0x104>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	b29a      	uxth	r2, r3
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001462:	f7ff fd5b 	bl	8000f1c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2d8      	uxtb	r0, r3
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b2dc      	uxtb	r4, r3
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4622      	mov	r2, r4
 8001490:	f7ff fdee 	bl	8001070 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001494:	8c3b      	ldrh	r3, [r7, #32]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	733b      	strb	r3, [r7, #12]
 800149e:	8c3b      	ldrh	r3, [r7, #32]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <ST7735_FillRectangle+0x108>)
 80014aa:	f002 faa9 	bl	8003a00 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	e013      	b.n	80014dc <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	e00a      	b.n	80014d0 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	2202      	movs	r2, #2
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <ST7735_FillRectangle+0x10c>)
 80014c6:	f003 ff72 	bl	80053ae <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f1      	bne.n	80014ba <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	80bb      	strh	r3, [r7, #4]
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e8      	bne.n	80014b4 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80014e2:	f7ff fd27 	bl	8000f34 <ST7735_Unselect>
 80014e6:	e000      	b.n	80014ea <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80014e8:	bf00      	nop
}
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	2000024c 	.word	0x2000024c
 80014f4:	20000250 	.word	0x20000250
 80014f8:	40020400 	.word	0x40020400
 80014fc:	2000030c 	.word	0x2000030c

08001500 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	4613      	mov	r3, r2
 8001510:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fc90 	bl	8001e38 <null_ptr_check>
 8001518:	4603      	mov	r3, r0
 800151a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 800151c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11c      	bne.n	800155e <bmp280_get_regs+0x5e>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d019      	beq.n	800155e <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	789b      	ldrb	r3, [r3, #2]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001538:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685c      	ldr	r4, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7858      	ldrb	r0, [r3, #1]
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	b29b      	uxth	r3, r3
 8001546:	7bf9      	ldrb	r1, [r7, #15]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	47a0      	blx	r4
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8001558:	23fc      	movs	r3, #252	; 0xfc
 800155a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800155c:	e001      	b.n	8001562 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800155e:	23ff      	movs	r3, #255	; 0xff
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}

0800156e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b089      	sub	sp, #36	; 0x24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b04      	cmp	r3, #4
 8001582:	d901      	bls.n	8001588 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f000 fc55 	bl	8001e38 <null_ptr_check>
 800158e:	4603      	mov	r3, r0
 8001590:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d14d      	bne.n	8001636 <bmp280_set_regs+0xc8>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04a      	beq.n	8001636 <bmp280_set_regs+0xc8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d047      	beq.n	8001636 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d041      	beq.n	8001630 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	76fb      	strb	r3, [r7, #27]
 80015be:	e00d      	b.n	80015dc <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	7efb      	ldrb	r3, [r7, #27]
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	440b      	add	r3, r1
 80015ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015d6:	7efb      	ldrb	r3, [r7, #27]
 80015d8:	3301      	adds	r3, #1
 80015da:	76fb      	strb	r3, [r7, #27]
 80015dc:	7efa      	ldrb	r2, [r7, #27]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3ed      	bcc.n	80015c0 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d90d      	bls.n	8001606 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f107 0110 	add.w	r1, r7, #16
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fc40 	bl	8001e78 <interleave_data>
                temp_len = ((len * 2) - 1);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	83bb      	strh	r3, [r7, #28]
 8001604:	e001      	b.n	800160a <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689c      	ldr	r4, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	7858      	ldrb	r0, [r3, #1]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	8bbb      	ldrh	r3, [r7, #28]
 8001618:	f107 0210 	add.w	r2, r7, #16
 800161c:	47a0      	blx	r4
 800161e:	4603      	mov	r3, r0
 8001620:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001622:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800162a:	23fc      	movs	r3, #252	; 0xfc
 800162c:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800162e:	e005      	b.n	800163c <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001630:	23fd      	movs	r3, #253	; 0xfd
 8001632:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001634:	e002      	b.n	800163c <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001636:	23ff      	movs	r3, #255	; 0xff
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	e000      	b.n	800163e <bmp280_set_regs+0xd0>
        if (len != 0)
 800163c:	bf00      	nop
    }

    return rslt;
 800163e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}

0800164a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001652:	23e0      	movs	r3, #224	; 0xe0
 8001654:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001656:	23b6      	movs	r3, #182	; 0xb6
 8001658:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fbec 	bl	8001e38 <null_ptr_check>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800166c:	f107 010d 	add.w	r1, r7, #13
 8001670:	f107 000e 	add.w	r0, r7, #14
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f7ff ff79 	bl	800156e <bmp280_set_regs>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2002      	movs	r0, #2
 8001686:	4798      	blx	r3
    }

    return rslt;
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 800169c:	2305      	movs	r3, #5
 800169e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fbc9 	bl	8001e38 <null_ptr_check>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d150      	bne.n	8001754 <bmp280_init+0xc0>
    {
        while (try_count)
 80016b2:	e02d      	b.n	8001710 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	20d0      	movs	r0, #208	; 0xd0
 80016bc:	f7ff ff20 	bl	8001500 <bmp280_get_regs>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d11a      	bne.n	8001702 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80016d0:	2b56      	cmp	r3, #86	; 0x56
 80016d2:	d007      	beq.n	80016e4 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b57      	cmp	r3, #87	; 0x57
 80016da:	d003      	beq.n	80016e4 <bmp280_init+0x50>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b58      	cmp	r3, #88	; 0x58
 80016e2:	d10e      	bne.n	8001702 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffb0 	bl	800164a <bmp280_soft_reset>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d110      	bne.n	8001718 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fbea 	bl	8001ed0 <get_calib_param>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001700:	e00a      	b.n	8001718 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	200a      	movs	r0, #10
 8001708:	4798      	blx	r3
            --try_count;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3b01      	subs	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ce      	bne.n	80016b4 <bmp280_init+0x20>
 8001716:	e000      	b.n	800171a <bmp280_init+0x86>
                break;
 8001718:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001720:	23fe      	movs	r3, #254	; 0xfe
 8001722:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d113      	bne.n	8001754 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800176a:	2300      	movs	r3, #0
 800176c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f000 fb62 	bl	8001e38 <null_ptr_check>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d137      	bne.n	80017f0 <bmp280_get_config+0x90>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d034      	beq.n	80017f0 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	20f4      	movs	r0, #244	; 0xf4
 8001790:	f7ff feb6 	bl	8001500 <bmp280_get_regs>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d129      	bne.n	80017f4 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	109b      	asrs	r3, r3, #2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80017ba:	7b7b      	ldrb	r3, [r7, #13]
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	109b      	asrs	r3, r3, #2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80017d4:	7b7b      	ldrb	r3, [r7, #13]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	332c      	adds	r3, #44	; 0x2c
 80017e6:	6810      	ldr	r0, [r2, #0]
 80017e8:	6018      	str	r0, [r3, #0]
 80017ea:	7912      	ldrb	r2, [r2, #4]
 80017ec:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80017ee:	e001      	b.n	80017f4 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	2000      	movs	r0, #0
 8001810:	f000 fbfc 	bl	800200c <conf_sensor>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	6039      	str	r1, [r7, #0]
 8001828:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f000 fb04 	bl	8001e38 <null_ptr_check>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fbe0 	bl	800200c <conf_sensor>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	2300      	movs	r3, #0
 800186c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f000 fae2 	bl	8001e38 <null_ptr_check>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d133      	bne.n	80018e8 <bmp280_get_uncomp_data+0x8c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d030      	beq.n	80018e8 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001886:	f107 0108 	add.w	r1, r7, #8
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2206      	movs	r2, #6
 800188e:	20f7      	movs	r0, #247	; 0xf7
 8001890:	f7ff fe36 	bl	8001500 <bmp280_get_regs>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d120      	bne.n	80018e2 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80018a0:	7a3b      	ldrb	r3, [r7, #8]
 80018a2:	031a      	lsls	r2, r3, #12
 80018a4:	7a7b      	ldrb	r3, [r7, #9]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4313      	orrs	r3, r2
 80018aa:	7aba      	ldrb	r2, [r7, #10]
 80018ac:	0912      	lsrs	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	031a      	lsls	r2, r3, #12
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4313      	orrs	r3, r2
 80018c0:	7b7a      	ldrb	r2, [r7, #13]
 80018c2:	0912      	lsrs	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f000 fc4e 	bl	8002178 <st_check_boundaries>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018e0:	e004      	b.n	80018ec <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80018e2:	23f3      	movs	r3, #243	; 0xf3
 80018e4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018e6:	e001      	b.n	80018ec <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b08a      	sub	sp, #40	; 0x28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fa96 	bl	8001e38 <null_ptr_check>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80ac 	bne.w	8001a74 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7fe fe09 	bl	8000534 <__aeabi_i2d>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <bmp280_get_comp_temp_double+0x1a0>)
 8001928:	f7fe ff98 	bl	800085c <__aeabi_ddiv>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	8a1b      	ldrh	r3, [r3, #16]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdeb 	bl	8000514 <__aeabi_ui2d>
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <bmp280_get_comp_temp_double+0x1a4>)
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fca2 	bl	8000298 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
               ((double) dev->calib_param.dig_t2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_i2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fe4a 	bl	8000608 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800197c:	68b8      	ldr	r0, [r7, #8]
 800197e:	f7fe fdd9 	bl	8000534 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800198a:	f7fe ff67 	bl	800085c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8a1b      	ldrh	r3, [r3, #16]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdba 	bl	8000514 <__aeabi_ui2d>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <bmp280_get_comp_temp_double+0x1a8>)
 80019a6:	f7fe ff59 	bl	800085c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc71 	bl	8000298 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f7fe fdb8 	bl	8000534 <__aeabi_i2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019cc:	f7fe ff46 	bl	800085c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4690      	mov	r8, r2
 80019d6:	4699      	mov	r9, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	8a1b      	ldrh	r3, [r3, #16]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd99 	bl	8000514 <__aeabi_ui2d>
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <bmp280_get_comp_temp_double+0x1a8>)
 80019e8:	f7fe ff38 	bl	800085c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4640      	mov	r0, r8
 80019f2:	4649      	mov	r1, r9
 80019f4:	f7fe fc50 	bl	8000298 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fe02 	bl	8000608 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
            ((double) dev->calib_param.dig_t3);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd8e 	bl	8000534 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
        var2 =
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fdf2 	bl	8000608 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a34:	f7fe fc32 	bl	800029c <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f892 	bl	8000b68 <__aeabi_d2iz>
 8001a44:	4602      	mov	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001a4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a52:	f7fe fc23 	bl	800029c <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <bmp280_get_comp_temp_double+0x1ac>)
 8001a64:	f7fe fefa 	bl	800085c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	e9c1 2300 	strd	r2, r3, [r1]
 8001a72:	e009      	b.n	8001a88 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001a82:	23ef      	movs	r3, #239	; 0xef
 8001a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a96:	bf00      	nop
 8001a98:	40d00000 	.word	0x40d00000
 8001a9c:	40900000 	.word	0x40900000
 8001aa0:	40c00000 	.word	0x40c00000
 8001aa4:	40b40000 	.word	0x40b40000

08001aa8 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8001aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aac:	b08a      	sub	sp, #40	; 0x28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9be 	bl	8001e38 <null_ptr_check>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 8197 	bne.w	8001dfa <bmp280_get_comp_pres_double+0x352>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd2f 	bl	8000534 <__aeabi_i2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ade:	f7fe febd 	bl	800085c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4bc8      	ldr	r3, [pc, #800]	; (8001e10 <bmp280_get_comp_pres_double+0x368>)
 8001af0:	f7fe fbd2 	bl	8000298 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd0c 	bl	8000534 <__aeabi_i2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fd70 	bl	8000608 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4bb7      	ldr	r3, [pc, #732]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001b36:	f7fe fe91 	bl	800085c <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcf3 	bl	8000534 <__aeabi_i2d>
 8001b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b52:	f7fe fd59 	bl	8000608 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	f7fe fb9b 	bl	800029c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fb95 	bl	800029c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4ba6      	ldr	r3, [pc, #664]	; (8001e18 <bmp280_get_comp_pres_double+0x370>)
 8001b80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b84:	f7fe fe6a 	bl	800085c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fccc 	bl	8000534 <__aeabi_i2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b9e      	ldr	r3, [pc, #632]	; (8001e1c <bmp280_get_comp_pres_double+0x374>)
 8001ba2:	f7fe fd31 	bl	8000608 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fb75 	bl	800029c <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcb7 	bl	8000534 <__aeabi_i2d>
 8001bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bca:	f7fe fd1d 	bl	8000608 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	f7fe fd15 	bl	8000608 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <bmp280_get_comp_pres_double+0x378>)
 8001bec:	f7fe fe36 	bl	800085c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc98 	bl	8000534 <__aeabi_i2d>
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	f7fe fcfe 	bl	8000608 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fb42 	bl	800029c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <bmp280_get_comp_pres_double+0x378>)
 8001c26:	f7fe fe19 	bl	800085c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001c38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c3c:	f7fe fe0e 	bl	800085c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <bmp280_get_comp_pres_double+0x37c>)
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8adb      	ldrh	r3, [r3, #22]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc58 	bl	8000514 <__aeabi_ui2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fccc 	bl	8000608 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	f7fe fc4b 	bl	8000514 <__aeabi_ui2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	4968      	ldr	r1, [pc, #416]	; (8001e28 <bmp280_get_comp_pres_double+0x380>)
 8001c88:	f7fe fb06 	bl	8000298 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	e9c1 2300 	strd	r2, r3, [r1]
        if (var1 < 0 || var1 > 0)
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca2:	f7fe ff23 	bl	8000aec <__aeabi_dcmplt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <bmp280_get_comp_pres_double+0x21c>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb8:	f7fe ff36 	bl	8000b28 <__aeabi_dcmpgt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8091 	beq.w	8001de6 <bmp280_get_comp_pres_double+0x33e>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <bmp280_get_comp_pres_double+0x384>)
 8001cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd4:	f7fe fdc2 	bl	800085c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fada 	bl	8000298 <__aeabi_dsub>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	a346      	add	r3, pc, #280	; (adr r3, 8001e08 <bmp280_get_comp_pres_double+0x360>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fc89 	bl	8000608 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc0c 	bl	8000534 <__aeabi_i2d>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <bmp280_get_comp_pres_double+0x388>)
 8001d46:	f7fe fd89 	bl	800085c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbe8 	bl	8000534 <__aeabi_i2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fc4c 	bl	8000608 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001d7e:	f7fe fd6d 	bl	800085c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 2304 	strd	r2, r3, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe fa80 	bl	800029c <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4690      	mov	r8, r2
 8001da2:	4699      	mov	r9, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbc2 	bl	8000534 <__aeabi_i2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4640      	mov	r0, r8
 8001db6:	4649      	mov	r1, r9
 8001db8:	f7fe fa70 	bl	800029c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <bmp280_get_comp_pres_double+0x38c>)
 8001dca:	f7fe fd47 	bl	800085c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa61 	bl	800029c <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
 8001de4:	e009      	b.n	8001dfa <bmp280_get_comp_pres_double+0x352>
        }
        else
        {
            *pressure = 0;
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9c1 2300 	strd	r2, r3, [r1]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8001df4:	23ee      	movs	r3, #238	; 0xee
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8001dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40b86a00 	.word	0x40b86a00
 8001e10:	40ef4000 	.word	0x40ef4000
 8001e14:	40e00000 	.word	0x40e00000
 8001e18:	40100000 	.word	0x40100000
 8001e1c:	40f00000 	.word	0x40f00000
 8001e20:	41200000 	.word	0x41200000
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	41300000 	.word	0x41300000
 8001e2c:	40b00000 	.word	0x40b00000
 8001e30:	41e00000 	.word	0x41e00000
 8001e34:	40300000 	.word	0x40300000

08001e38 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8001e5e:	23ff      	movs	r3, #255	; 0xff
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e001      	b.n	8001e68 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	e016      	b.n	8001eba <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	441a      	add	r2, r3
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	440b      	add	r3, r1
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
 8001eba:	7dfa      	ldrb	r2, [r7, #23]
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3e4      	bcc.n	8001e8c <interleave_data+0x14>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffa3 	bl	8001e38 <null_ptr_check>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d17f      	bne.n	8002000 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2218      	movs	r2, #24
 8001f08:	2088      	movs	r0, #136	; 0x88
 8001f0a:	f7ff faf9 	bl	8001500 <bmp280_get_regs>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d171      	bne.n	8002000 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001f1c:	7b7b      	ldrb	r3, [r7, #13]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001f42:	7c7b      	ldrb	r3, [r7, #17]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	7c3b      	ldrb	r3, [r7, #16]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	7cbb      	ldrb	r3, [r7, #18]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001f68:	7d7b      	ldrb	r3, [r7, #21]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	7d3b      	ldrb	r3, [r7, #20]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001f8c:	7e7b      	ldrb	r3, [r7, #25]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	7e3b      	ldrb	r3, [r7, #24]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001f9e:	7efb      	ldrb	r3, [r7, #27]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	7ebb      	ldrb	r3, [r7, #26]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001fb0:	7f7b      	ldrb	r3, [r7, #29]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7f3b      	ldrb	r3, [r7, #28]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	7fbb      	ldrb	r3, [r7, #30]
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001fd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8002000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800201a:	2300      	movs	r3, #0
 800201c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 800201e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8002022:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff07 	bl	8001e38 <null_ptr_check>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800202e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8095 	bne.w	8002162 <conf_sensor+0x156>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8091 	beq.w	8002162 <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8002040:	f107 0114 	add.w	r1, r7, #20
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	20f4      	movs	r0, #244	; 0xf4
 800204a:	f7ff fa59 	bl	8001500 <bmp280_get_regs>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8086 	bne.w	8002168 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff faf4 	bl	800164a <bmp280_soft_reset>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8002066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17c      	bne.n	8002168 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 800206e:	7d3b      	ldrb	r3, [r7, #20]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	b25a      	sxtb	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b25b      	sxtb	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8002088:	7d3b      	ldrb	r3, [r7, #20]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	f023 031c 	bic.w	r3, r3, #28
 8002090:	b25a      	sxtb	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	b25b      	sxtb	r3, r3
 800209a:	f003 031c 	and.w	r3, r3, #28
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 80020a8:	7d7b      	ldrb	r3, [r7, #21]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	b25a      	sxtb	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 80020c2:	7d7b      	ldrb	r3, [r7, #21]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	f023 031c 	bic.w	r3, r3, #28
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	f003 031c 	and.w	r3, r3, #28
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 80020e2:	7d7b      	ldrb	r3, [r7, #21]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	b25a      	sxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8002100:	f107 0114 	add.w	r1, r7, #20
 8002104:	f107 0010 	add.w	r0, r7, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f7ff fa2f 	bl	800156e <bmp280_set_regs>
 8002110:	4603      	mov	r3, r0
 8002112:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8002114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d125      	bne.n	8002168 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	332c      	adds	r3, #44	; 0x2c
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	6018      	str	r0, [r3, #0]
 8002126:	7912      	ldrb	r2, [r2, #4]
 8002128:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8002130:	7d3b      	ldrb	r3, [r7, #20]
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f023 0303 	bic.w	r3, r3, #3
 8002138:	b25a      	sxtb	r2, r3
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	b25b      	sxtb	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b25b      	sxtb	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 800214c:	f107 0114 	add.w	r1, r7, #20
 8002150:	f107 0010 	add.w	r0, r7, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f7ff fa09 	bl	800156e <bmp280_set_regs>
 800215c:	4603      	mov	r3, r0
 800215e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002160:	e002      	b.n	8002168 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8002162:	23ff      	movs	r3, #255	; 0xff
 8002164:	75fb      	strb	r3, [r7, #23]
 8002166:	e000      	b.n	800216a <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8002168:	bf00      	nop
    }

    return rslt;
 800216a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dd03      	ble.n	8002194 <st_check_boundaries+0x1c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <st_check_boundaries+0x6c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	dd09      	ble.n	80021a8 <st_check_boundaries+0x30>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	dd03      	ble.n	80021a2 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <st_check_boundaries+0x6c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	dd02      	ble.n	80021a8 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80021a2:	23f4      	movs	r3, #244	; 0xf4
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e015      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dd03      	ble.n	80021b6 <st_check_boundaries+0x3e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <st_check_boundaries+0x6c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	dd02      	ble.n	80021bc <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 80021b6:	23f6      	movs	r3, #246	; 0xf6
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e00b      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd03      	ble.n	80021ca <st_check_boundaries+0x52>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <st_check_boundaries+0x6c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	dd02      	ble.n	80021d0 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 80021ca:	23f5      	movs	r3, #245	; 0xf5
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e001      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	000fffef 	.word	0x000fffef

080021e8 <BMP280_init>:

/*
 * Funkcja inicjalizująca czujnik bmp280
 * Zwracana wartość rslt to kod błędu w przypadku błędu inicjalizacji
 */
int8_t BMP280_init(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
	int8_t rslt;
	struct bmp280_config conf;

	/* Map the delay function pointer with the function responsible for implementing the delay */
	bmp.delay_ms = delay_ms;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <BMP280_init+0x74>)
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <BMP280_init+0x78>)
 80021f2:	60da      	str	r2, [r3, #12]

	/* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
	bmp.dev_id = (BMP280_I2C_ADDR_PRIM << 1);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <BMP280_init+0x74>)
 80021f6:	22ec      	movs	r2, #236	; 0xec
 80021f8:	705a      	strb	r2, [r3, #1]

	/* Select the interface mode as I2C */
	bmp.intf = BMP280_I2C_INTF;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <BMP280_init+0x74>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	709a      	strb	r2, [r3, #2]

	/* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
	bmp.read = i2c_reg_read;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <BMP280_init+0x74>)
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <BMP280_init+0x7c>)
 8002204:	605a      	str	r2, [r3, #4]
	bmp.write = i2c_reg_write;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <BMP280_init+0x74>)
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <BMP280_init+0x80>)
 800220a:	609a      	str	r2, [r3, #8]

	rslt = bmp280_init(&bmp);
 800220c:	4813      	ldr	r0, [pc, #76]	; (800225c <BMP280_init+0x74>)
 800220e:	f7ff fa41 	bl	8001694 <bmp280_init>
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]

	/* Always read the current settings before writing, especially when
	 * all the configuration is not modified
	 */
	rslt = bmp280_get_config(&conf, &bmp);
 8002216:	463b      	mov	r3, r7
 8002218:	4910      	ldr	r1, [pc, #64]	; (800225c <BMP280_init+0x74>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff faa0 	bl	8001760 <bmp280_get_config>
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]

	/* configuring the temperature oversampling, filter coefficient and output data rate */
	/* Overwrite the desired settings */
	conf.filter = BMP280_FILTER_COEFF_2;
 8002224:	2301      	movs	r3, #1
 8002226:	70fb      	strb	r3, [r7, #3]

	/* Pressure oversampling set at 4x */
	conf.os_pres = BMP280_OS_4X;
 8002228:	2303      	movs	r3, #3
 800222a:	707b      	strb	r3, [r7, #1]

	/* Temperature oversampling set at 4x */
	conf.os_temp = BMP280_OS_4X;
 800222c:	2303      	movs	r3, #3
 800222e:	703b      	strb	r3, [r7, #0]

	/* Setting the output data rate as 1HZ(1000ms) */
	conf.odr = BMP280_ODR_1000_MS;
 8002230:	2305      	movs	r3, #5
 8002232:	70bb      	strb	r3, [r7, #2]
	rslt = bmp280_set_config(&conf, &bmp);
 8002234:	463b      	mov	r3, r7
 8002236:	4909      	ldr	r1, [pc, #36]	; (800225c <BMP280_init+0x74>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fae1 	bl	8001800 <bmp280_set_config>
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]

	/* Always set the power mode after setting the configuration */
	rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8002242:	4906      	ldr	r1, [pc, #24]	; (800225c <BMP280_init+0x74>)
 8002244:	2003      	movs	r0, #3
 8002246:	f7ff faea 	bl	800181e <bmp280_set_power_mode>
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]

	return rslt;
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000254 	.word	0x20000254
 8002260:	08002365 	.word	0x08002365
 8002264:	080023bd 	.word	0x080023bd
 8002268:	0800237d 	.word	0x0800237d

0800226c <BMP280_TempRead>:
/*
 * Funkcja odczytuje temperature z czujnika i przypisuje je do zmiennej globalnej
 * Zwracana wartość rslt to kod błędu przy złym odczycie
 */
int8_t BMP280_TempRead(double *temperature) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	int8_t errGet = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	77fb      	strb	r3, [r7, #31]
	int8_t errComp = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	77bb      	strb	r3, [r7, #30]
	struct bmp280_uncomp_data ucomp_data;
	double temp;
	/* Pobranie danych z czujnika */
	if (errGet = bmp280_get_uncomp_data(&ucomp_data, &bmp) != BMP280_OK) {
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <BMP280_TempRead+0x78>)
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff faea 	bl	800185c <bmp280_get_uncomp_data>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	77fb      	strb	r3, [r7, #31]
 8002296:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <BMP280_TempRead+0x38>
		return errGet;
 800229e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a2:	e01b      	b.n	80022dc <BMP280_TempRead+0x70>
	}

	/* Konwersja na liczby zmiennoprzecinkowe */
	if (errComp = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp,
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <BMP280_TempRead+0x78>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb23 	bl	80018f8 <bmp280_get_comp_temp_double>
 80022b2:	4603      	mov	r3, r0
			&bmp) != BMP280_OK) {
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
	if (errComp = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp,
 80022be:	77bb      	strb	r3, [r7, #30]
 80022c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <BMP280_TempRead+0x62>
		return errComp;
 80022c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022cc:	e006      	b.n	80022dc <BMP280_TempRead+0x70>
	}
	/*przypisanie wartości temperatury do zmiennej globalnej*/
	*temperature = temp;
 80022ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	e9c1 2300 	strd	r2, r3, [r1]
	return errComp;
 80022d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000254 	.word	0x20000254

080022e8 <BMP280_PressRead>:

/*
 * Funkcja odczytuje cisnienie z czujnika i przypisuje je do zmiennej globalnej
 * Zwracana wartość rslt to kod błędu przy złym odczycie
 */
int8_t BMP280_PressRead(double *pressure) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	int8_t errGet = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	77fb      	strb	r3, [r7, #31]
	int8_t errComp = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	77bb      	strb	r3, [r7, #30]
	struct bmp280_uncomp_data ucomp_data;

	double pres;

	/* Pobranie danych z czujnika */
	if (errGet = bmp280_get_uncomp_data(&ucomp_data, &bmp) != BMP280_OK) {
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4918      	ldr	r1, [pc, #96]	; (8002360 <BMP280_PressRead+0x78>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff faac 	bl	800185c <bmp280_get_uncomp_data>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	77fb      	strb	r3, [r7, #31]
 8002312:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <BMP280_PressRead+0x38>
		return errGet;
 800231a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800231e:	e01b      	b.n	8002358 <BMP280_PressRead+0x70>
	}
	/* Konwersja na liczby zmiennoprzecinkowe */
	if (errComp = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press,
 8002320:	69b9      	ldr	r1, [r7, #24]
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <BMP280_PressRead+0x78>)
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fbbd 	bl	8001aa8 <bmp280_get_comp_pres_double>
 800232e:	4603      	mov	r3, r0
			&bmp) != BMP280_OK) {
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
	if (errComp = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press,
 800233a:	77bb      	strb	r3, [r7, #30]
 800233c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <BMP280_PressRead+0x62>
		return errComp;
 8002344:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002348:	e006      	b.n	8002358 <BMP280_PressRead+0x70>
	}
	/*przypisanie wartości ciśnienia do zmiennej globalnej*/
	*pressure = pres;
 800234a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	e9c1 2300 	strd	r2, r3, [r1]

	return errComp;
 8002354:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000254 	.word	0x20000254

08002364 <delay_ms>:
 *
 *  @param[in] period_ms  : the required wait time in milliseconds.
 *  @return void.
 *
 */
void delay_ms(uint32_t period_ms) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	/* Implement the delay routine according to the target machine */
	HAL_Delay(period_ms);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fffb 	bl	8003368 <HAL_Delay>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t length) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af04      	add	r7, sp, #16
 8002382:	603a      	str	r2, [r7, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	460b      	mov	r3, r1
 800238c:	71bb      	strb	r3, [r7, #6]
 800238e:	4613      	mov	r3, r2
 8002390:	80bb      	strh	r3, [r7, #4]

	/* Implement the I2C write routine according to the target machine. */
	HAL_I2C_Mem_Write(&hi2c1, i2c_addr, reg_addr, 1, reg_data, length, 100);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	b299      	uxth	r1, r3
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	b29a      	uxth	r2, r3
 800239a:	2364      	movs	r3, #100	; 0x64
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2301      	movs	r3, #1
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <i2c_reg_write+0x3c>)
 80023aa:	f001 fc87 	bl	8003cbc <HAL_I2C_Mem_Write>
	return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000288 	.word	0x20000288

080023bc <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t length) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	603a      	str	r2, [r7, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
 80023ca:	460b      	mov	r3, r1
 80023cc:	71bb      	strb	r3, [r7, #6]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80bb      	strh	r3, [r7, #4]

	/* Implement the I2C read routine according to the target machine. */
	HAL_I2C_Mem_Read(&hi2c1, i2c_addr, reg_addr, 1, reg_data, length, 100);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	b299      	uxth	r1, r3
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	2364      	movs	r3, #100	; 0x64
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	88bb      	ldrh	r3, [r7, #4]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2301      	movs	r3, #1
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <i2c_reg_read+0x3c>)
 80023ea:	f001 fd61 	bl	8003eb0 <HAL_I2C_Mem_Read>
	return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000288 	.word	0x20000288

080023fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a35      	ldr	r2, [pc, #212]	; (80024f0 <MX_GPIO_Init+0xf4>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b2c      	ldr	r3, [pc, #176]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <MX_GPIO_Init+0xf4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <MX_GPIO_Init+0xf4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <MX_GPIO_Init+0xf4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	21e0      	movs	r1, #224	; 0xe0
 8002486:	481b      	ldr	r0, [pc, #108]	; (80024f4 <MX_GPIO_Init+0xf8>)
 8002488:	f001 faba 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	4819      	ldr	r0, [pc, #100]	; (80024f8 <MX_GPIO_Init+0xfc>)
 8002492:	f001 fab5 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <MX_GPIO_Init+0x100>)
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	4815      	ldr	r0, [pc, #84]	; (8002500 <MX_GPIO_Init+0x104>)
 80024ac:	f001 f924 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80024b0:	23e0      	movs	r3, #224	; 0xe0
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <MX_GPIO_Init+0xf8>)
 80024c8:	f001 f916 	bl	80036f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80024cc:	2340      	movs	r3, #64	; 0x40
 80024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_GPIO_Init+0xfc>)
 80024e4:	f001 f908 	bl	80036f8 <HAL_GPIO_Init>

}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	10210000 	.word	0x10210000
 8002500:	40020800 	.word	0x40020800

08002504 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_I2C1_Init+0x50>)
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <MX_I2C1_Init+0x54>)
 800250c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_I2C1_Init+0x50>)
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <MX_I2C1_Init+0x58>)
 8002512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_I2C1_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_I2C1_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_I2C1_Init+0x50>)
 8002522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <MX_I2C1_Init+0x50>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_I2C1_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <MX_I2C1_Init+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_I2C1_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_I2C1_Init+0x50>)
 8002542:	f001 fa77 	bl	8003a34 <HAL_I2C_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800254c:	f000 f9de 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000288 	.word	0x20000288
 8002558:	40005400 	.word	0x40005400
 800255c:	000186a0 	.word	0x000186a0

08002560 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_I2C_MspInit+0x84>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d12c      	bne.n	80025dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_I2C_MspInit+0x88>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_I2C_MspInit+0x88>)
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_I2C_MspInit+0x88>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800259e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a4:	2312      	movs	r3, #18
 80025a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b0:	2304      	movs	r3, #4
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	480c      	ldr	r0, [pc, #48]	; (80025ec <HAL_I2C_MspInit+0x8c>)
 80025bc:	f001 f89c 	bl	80036f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_I2C_MspInit+0x88>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_I2C_MspInit+0x88>)
 80025ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ce:	6413      	str	r3, [r2, #64]	; 0x40
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_I2C_MspInit+0x88>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025dc:	bf00      	nop
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40005400 	.word	0x40005400
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020400 	.word	0x40020400

080025f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025f4:	f000 fe46 	bl	8003284 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025f8:	f000 f8fa 	bl	80027f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025fc:	f7ff fefe 	bl	80023fc <MX_GPIO_Init>
	MX_SPI2_Init();
 8002600:	f000 fb0a 	bl	8002c18 <MX_SPI2_Init>
	MX_I2C1_Init();
 8002604:	f7ff ff7e 	bl	8002504 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8002608:	f000 fd40 	bl	800308c <MX_USART2_UART_Init>
	MX_TIM10_Init();
 800260c:	f000 fce0 	bl	8002fd0 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize TIMER10 */
	HAL_TIM_Base_Start_IT(&htim10);
 8002610:	486c      	ldr	r0, [pc, #432]	; (80027c4 <main+0x1d4>)
 8002612:	f003 f923 	bl	800585c <HAL_TIM_Base_Start_IT>
	/*Initialize BMP280 sensor*/

	BMP280_init();
 8002616:	f7ff fde7 	bl	80021e8 <BMP280_init>
	/*Initialize and test TFT display ST7735*/
	ST7735_Init(0);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fd70 	bl	8001100 <ST7735_Init>
	fillScreen(BLACK);
 8002620:	2000      	movs	r0, #0
 8002622:	f7fe fc61 	bl	8000ee8 <fillScreen>
	ST7735_SetRotation(3);
 8002626:	2003      	movs	r0, #3
 8002628:	f7fe fd96 	bl	8001158 <ST7735_SetRotation>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 800262c:	4866      	ldr	r0, [pc, #408]	; (80027c8 <main+0x1d8>)
 800262e:	f7ff fe1d 	bl	800226c <BMP280_TempRead>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b65      	ldr	r3, [pc, #404]	; (80027cc <main+0x1dc>)
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <main+0x1dc>)
 800263c:	f993 3000 	ldrsb.w	r3, [r3]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 809f 	bne.w	8002784 <main+0x194>
				BMP280_PressRead(&pres)) == BMP280_OK) {
 8002646:	4862      	ldr	r0, [pc, #392]	; (80027d0 <main+0x1e0>)
 8002648:	f7ff fe4e 	bl	80022e8 <BMP280_PressRead>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 8002650:	4b60      	ldr	r3, [pc, #384]	; (80027d4 <main+0x1e4>)
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <main+0x1e4>)
 8002656:	f993 3000 	ldrsb.w	r3, [r3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 8092 	bne.w	8002784 <main+0x194>

			//jeśli funkcje nie zwróciły błędów zostanie wykonana ta część funkcji- BMP280_OK = 0;
			if (temp > TEMP_MAX) {
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <main+0x1d8>)
 8002662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <main+0x1e8>)
 800266c:	f7fe fa5c 	bl	8000b28 <__aeabi_dcmpgt>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01d      	beq.n	80026b2 <main+0xc2>
				if (refreshScreen1 == 0) {
 8002676:	4b59      	ldr	r3, [pc, #356]	; (80027dc <main+0x1ec>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <main+0xae>
					refreshScreen1 = 1;
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <main+0x1ec>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 0;
 8002684:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <main+0x1f0>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 0;
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <main+0x1f4>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <main+0x1f8>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
					fillScreen(RED);
 8002696:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800269a:	f7fe fc25 	bl	8000ee8 <fillScreen>
				}
				writeTempHighWarn(temp);
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <main+0x1d8>)
 80026a0:	ed93 7b00 	vldr	d7, [r3]
 80026a4:	eeb0 0a47 	vmov.f32	s0, s14
 80026a8:	eef0 0a67 	vmov.f32	s1, s15
 80026ac:	f000 fa0e 	bl	8002acc <writeTempHighWarn>
			if (temp > TEMP_MAX) {
 80026b0:	e086      	b.n	80027c0 <main+0x1d0>
			} else if (temp < TEMP_MIN) {
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <main+0x1d8>)
 80026b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <main+0x1fc>)
 80026be:	f7fe fa15 	bl	8000aec <__aeabi_dcmplt>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01d      	beq.n	8002704 <main+0x114>
				if (refreshScreen2 == 0) {
 80026c8:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <main+0x1f0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10f      	bne.n	80026f0 <main+0x100>
					refreshScreen1 = 0;
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <main+0x1ec>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 1;
 80026d6:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <main+0x1f0>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 0;
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <main+0x1f4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <main+0x1f8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
					fillScreen(RED);
 80026e8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026ec:	f7fe fbfc 	bl	8000ee8 <fillScreen>
				}
				writeTempLowWarn(temp);
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <main+0x1d8>)
 80026f2:	ed93 7b00 	vldr	d7, [r3]
 80026f6:	eeb0 0a47 	vmov.f32	s0, s14
 80026fa:	eef0 0a67 	vmov.f32	s1, s15
 80026fe:	f000 fa2d 	bl	8002b5c <writeTempLowWarn>
			if (temp > TEMP_MAX) {
 8002702:	e05d      	b.n	80027c0 <main+0x1d0>
			} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <main+0x1d8>)
 8002706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <main+0x1fc>)
 8002710:	f7fe fa0a 	bl	8000b28 <__aeabi_dcmpgt>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d100      	bne.n	800271c <main+0x12c>
			if (temp > TEMP_MAX) {
 800271a:	e051      	b.n	80027c0 <main+0x1d0>
			} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <main+0x1d8>)
 800271e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <main+0x1e8>)
 8002728:	f7fe f9e0 	bl	8000aec <__aeabi_dcmplt>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d100      	bne.n	8002734 <main+0x144>
			if (temp > TEMP_MAX) {
 8002732:	e045      	b.n	80027c0 <main+0x1d0>
				if (refreshScreen3 == 0) {
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <main+0x1f4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10e      	bne.n	800275a <main+0x16a>
					refreshScreen1 = 0;
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <main+0x1ec>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 0;
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <main+0x1f0>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 1;
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <main+0x1f4>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <main+0x1f8>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
					fillScreen(BLACK);
 8002754:	2000      	movs	r0, #0
 8002756:	f7fe fbc7 	bl	8000ee8 <fillScreen>
					//jednokrotne odświeżenie wyświetlacza
				}
				writeMenu();
 800275a:	f000 f925 	bl	80029a8 <writeMenu>
				writeTemp(temp);
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <main+0x1d8>)
 8002760:	ed93 7b00 	vldr	d7, [r3]
 8002764:	eeb0 0a47 	vmov.f32	s0, s14
 8002768:	eef0 0a67 	vmov.f32	s1, s15
 800276c:	f000 f8d4 	bl	8002918 <writeTemp>
				writePress(pres);
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <main+0x1e0>)
 8002772:	ed93 7b00 	vldr	d7, [r3]
 8002776:	eeb0 0a47 	vmov.f32	s0, s14
 800277a:	eef0 0a67 	vmov.f32	s1, s15
 800277e:	f000 f8ef 	bl	8002960 <writePress>
			if (temp > TEMP_MAX) {
 8002782:	e01d      	b.n	80027c0 <main+0x1d0>
			}
		} else {
			if (refreshScreen4 == 0) {
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <main+0x1f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10e      	bne.n	80027aa <main+0x1ba>
				refreshScreen1 = 0;
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <main+0x1ec>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
				refreshScreen2 = 0;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <main+0x1f0>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
				refreshScreen3 = 0;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <main+0x1f4>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
				refreshScreen4 = 1;
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <main+0x1f8>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
				fillScreen(BLACK);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fb9f 	bl	8000ee8 <fillScreen>
				//jednokrotne odświeżenie wyświetlacza
			}
			errMenu(errTemp, errPres);
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <main+0x1dc>)
 80027ac:	f993 3000 	ldrsb.w	r3, [r3]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <main+0x1e4>)
 80027b4:	f993 3000 	ldrsb.w	r3, [r3]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f000 f92c 	bl	8002a18 <errMenu>
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 80027c0:	e734      	b.n	800262c <main+0x3c>
 80027c2:	bf00      	nop
 80027c4:	20000364 	.word	0x20000364
 80027c8:	20000218 	.word	0x20000218
 80027cc:	20000214 	.word	0x20000214
 80027d0:	20000220 	.word	0x20000220
 80027d4:	20000215 	.word	0x20000215
 80027d8:	403e0000 	.word	0x403e0000
 80027dc:	20000228 	.word	0x20000228
 80027e0:	2000022c 	.word	0x2000022c
 80027e4:	20000230 	.word	0x20000230
 80027e8:	20000234 	.word	0x20000234
 80027ec:	402e0000 	.word	0x402e0000

080027f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b094      	sub	sp, #80	; 0x50
 80027f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027f6:	f107 0320 	add.w	r3, r7, #32
 80027fa:	2230      	movs	r2, #48	; 0x30
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 f884 	bl	800690c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <SystemClock_Config+0xcc>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <SystemClock_Config+0xcc>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
 8002824:	4b25      	ldr	r3, [pc, #148]	; (80028bc <SystemClock_Config+0xcc>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <SystemClock_Config+0xd0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <SystemClock_Config+0xd0>)
 800283e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <SystemClock_Config+0xd0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002854:	2301      	movs	r3, #1
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002858:	2310      	movs	r3, #16
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285c:	2302      	movs	r3, #2
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002860:	2300      	movs	r3, #0
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002864:	2308      	movs	r3, #8
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002868:	2354      	movs	r3, #84	; 0x54
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800286c:	2302      	movs	r3, #2
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002870:	2307      	movs	r3, #7
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002874:	f107 0320 	add.w	r3, r7, #32
 8002878:	4618      	mov	r0, r3
 800287a:	f002 f89b 	bl	80049b4 <HAL_RCC_OscConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0x98>
		Error_Handler();
 8002884:	f000 f842 	bl	800290c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002888:	230f      	movs	r3, #15
 800288a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800288c:	2302      	movs	r3, #2
 800288e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002898:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fafd 	bl	8004ea4 <HAL_RCC_ClockConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <SystemClock_Config+0xc4>
		Error_Handler();
 80028b0:	f000 f82c 	bl	800290c <Error_Handler>
	}
}
 80028b4:	bf00      	nop
 80028b6:	3750      	adds	r7, #80	; 0x50
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40007000 	.word	0x40007000

080028c4 <returnTemp>:
/* USER CODE BEGIN 4 */
/*!
 * @name functions to return global variables temp
 *
 */
double returnTemp(void){
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
	return temp;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <returnTemp+0x20>)
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80028d2:	eeb0 0a47 	vmov.f32	s0, s14
 80028d6:	eef0 0a67 	vmov.f32	s1, s15
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000218 	.word	0x20000218

080028e8 <returnPres>:

/*!
 * @name function to return global variables pres
 *
 */
double returnPres(void){
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	return pres;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <returnPres+0x20>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80028f6:	eeb0 0a47 	vmov.f32	s0, s14
 80028fa:	eef0 0a67 	vmov.f32	s1, s15
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000220 	.word	0x20000220

0800290c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002914:	e7fe      	b.n	8002914 <Error_Handler+0x8>
	...

08002918 <writeTemp>:
char TEMP_BUF[MAX_BUF_SIZE];
char PRES_BUF[MAX_BUF_SIZE];
char ERR_TEMP_BUF[MAX_BUF_SIZE];
char ERR_PRES_BUF[MAX_BUF_SIZE];

void writeTemp(double temperature){
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af04      	add	r7, sp, #16
 800291e:	ed87 0b00 	vstr	d0, [r7]
	sprintf(TEMP_BUF, "%.2f", temperature);
 8002922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002926:	490b      	ldr	r1, [pc, #44]	; (8002954 <writeTemp+0x3c>)
 8002928:	480b      	ldr	r0, [pc, #44]	; (8002958 <writeTemp+0x40>)
 800292a:	f004 fc79 	bl	8007220 <siprintf>
	ST7735_WriteString(50, 16, TEMP_BUF, Font_11x18, GREEN, BLACK);
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <writeTemp+0x44>)
 8002930:	2200      	movs	r2, #0
 8002932:	9202      	str	r2, [sp, #8]
 8002934:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002938:	9201      	str	r2, [sp, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	9200      	str	r2, [sp, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a05      	ldr	r2, [pc, #20]	; (8002958 <writeTemp+0x40>)
 8002942:	2110      	movs	r1, #16
 8002944:	2032      	movs	r0, #50	; 0x32
 8002946:	f7fe fcff 	bl	8001348 <ST7735_WriteString>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	08009690 	.word	0x08009690
 8002958:	200002f4 	.word	0x200002f4
 800295c:	20000008 	.word	0x20000008

08002960 <writePress>:

void writePress(double pressure){
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af04      	add	r7, sp, #16
 8002966:	ed87 0b00 	vstr	d0, [r7]
    sprintf(PRES_BUF, "%.2f", pressure);
 800296a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800296e:	490b      	ldr	r1, [pc, #44]	; (800299c <writePress+0x3c>)
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <writePress+0x40>)
 8002972:	f004 fc55 	bl	8007220 <siprintf>
    ST7735_WriteString(25, 46, PRES_BUF, Font_11x18, GREEN, BLACK);
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <writePress+0x44>)
 8002978:	2200      	movs	r2, #0
 800297a:	9202      	str	r2, [sp, #8]
 800297c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002980:	9201      	str	r2, [sp, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	9200      	str	r2, [sp, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <writePress+0x40>)
 800298a:	212e      	movs	r1, #46	; 0x2e
 800298c:	2019      	movs	r0, #25
 800298e:	f7fe fcdb 	bl	8001348 <ST7735_WriteString>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	08009690 	.word	0x08009690
 80029a0:	200002e8 	.word	0x200002e8
 80029a4:	20000008 	.word	0x20000008

080029a8 <writeMenu>:

void writeMenu(void){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af04      	add	r7, sp, #16
	ST7735_WriteString(5, 5, "Temperatura [st. C]", Font_7x10, YELLOW,BLACK);
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <writeMenu+0x60>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <writeMenu+0x64>)
 80029c2:	2105      	movs	r1, #5
 80029c4:	2005      	movs	r0, #5
 80029c6:	f7fe fcbf 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Cisnienie [Pa]", Font_7x10, YELLOW,BLACK);
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <writeMenu+0x60>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	9202      	str	r2, [sp, #8]
 80029d0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <writeMenu+0x68>)
 80029de:	2123      	movs	r1, #35	; 0x23
 80029e0:	2005      	movs	r0, #5
 80029e2:	f7fe fcb1 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 65, "Stezenie PM10", Font_7x10, YELLOW,BLACK);
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <writeMenu+0x60>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	9202      	str	r2, [sp, #8]
 80029ec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80029f0:	9201      	str	r2, [sp, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	9200      	str	r2, [sp, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <writeMenu+0x6c>)
 80029fa:	2141      	movs	r1, #65	; 0x41
 80029fc:	2005      	movs	r0, #5
 80029fe:	f7fe fca3 	bl	8001348 <ST7735_WriteString>
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	08009698 	.word	0x08009698
 8002a10:	080096ac 	.word	0x080096ac
 8002a14:	080096bc 	.word	0x080096bc

08002a18 <errMenu>:

void errMenu(int errTemp, int errPres){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af04      	add	r7, sp, #16
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	sprintf(ERR_TEMP_BUF, "%d", errTemp);
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4922      	ldr	r1, [pc, #136]	; (8002ab0 <errMenu+0x98>)
 8002a26:	4823      	ldr	r0, [pc, #140]	; (8002ab4 <errMenu+0x9c>)
 8002a28:	f004 fbfa 	bl	8007220 <siprintf>
	sprintf(ERR_PRES_BUF, "%d", errPres);
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4920      	ldr	r1, [pc, #128]	; (8002ab0 <errMenu+0x98>)
 8002a30:	4821      	ldr	r0, [pc, #132]	; (8002ab8 <errMenu+0xa0>)
 8002a32:	f004 fbf5 	bl	8007220 <siprintf>
	ST7735_WriteString(0, 10, "Blad odczytu czujnika BMP280 - kody bledow:", Font_7x10, YELLOW,BLACK);
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <errMenu+0xa4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	9202      	str	r2, [sp, #8]
 8002a3c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a40:	9201      	str	r2, [sp, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <errMenu+0xa8>)
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe fc7b 	bl	8001348 <ST7735_WriteString>

	ST7735_WriteString(65, 30, ERR_TEMP_BUF, Font_16x26, RED, BLACK);
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <errMenu+0xac>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	9202      	str	r2, [sp, #8]
 8002a58:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a5c:	9201      	str	r2, [sp, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <errMenu+0x9c>)
 8002a66:	211e      	movs	r1, #30
 8002a68:	2041      	movs	r0, #65	; 0x41
 8002a6a:	f7fe fc6d 	bl	8001348 <ST7735_WriteString>
    ST7735_WriteString(65, 56, ERR_PRES_BUF, Font_16x26, RED, BLACK);
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <errMenu+0xac>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	9202      	str	r2, [sp, #8]
 8002a74:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a78:	9201      	str	r2, [sp, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	9200      	str	r2, [sp, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <errMenu+0xa0>)
 8002a82:	2138      	movs	r1, #56	; 0x38
 8002a84:	2041      	movs	r0, #65	; 0x41
 8002a86:	f7fe fc5f 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(0, 80, "Sprawdz czujnik oraz  zresetuj urzadzenie", Font_7x10, YELLOW,BLACK);
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <errMenu+0xa4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	9202      	str	r2, [sp, #8]
 8002a90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a94:	9201      	str	r2, [sp, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <errMenu+0xb0>)
 8002a9e:	2150      	movs	r1, #80	; 0x50
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fe fc51 	bl	8001348 <ST7735_WriteString>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	080096cc 	.word	0x080096cc
 8002ab4:	200002dc 	.word	0x200002dc
 8002ab8:	20000300 	.word	0x20000300
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	080096d0 	.word	0x080096d0
 8002ac4:	20000010 	.word	0x20000010
 8002ac8:	080096fc 	.word	0x080096fc

08002acc <writeTempHighWarn>:


void writeTempHighWarn(double temperature){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af04      	add	r7, sp, #16
 8002ad2:	ed87 0b00 	vstr	d0, [r7]
	ST7735_WriteString(2, 5, "Wywietrz miejsce pracy", Font_7x10, BLACK,RED);
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <writeTempHighWarn+0x78>)
 8002ad8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002adc:	9202      	str	r2, [sp, #8]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	9200      	str	r2, [sp, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <writeTempHighWarn+0x7c>)
 8002aea:	2105      	movs	r1, #5
 8002aec:	2002      	movs	r0, #2
 8002aee:	f7fe fc2b 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Aktualna temperatura:", Font_7x10, YELLOW ,RED);
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <writeTempHighWarn+0x78>)
 8002af4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002af8:	9202      	str	r2, [sp, #8]
 8002afa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	9200      	str	r2, [sp, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <writeTempHighWarn+0x80>)
 8002b08:	2114      	movs	r1, #20
 8002b0a:	2005      	movs	r0, #5
 8002b0c:	f7fe fc1c 	bl	8001348 <ST7735_WriteString>
	sprintf(TEMP_BUF, "%.2f", temperature);
 8002b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <writeTempHighWarn+0x84>)
 8002b16:	480f      	ldr	r0, [pc, #60]	; (8002b54 <writeTempHighWarn+0x88>)
 8002b18:	f004 fb82 	bl	8007220 <siprintf>
	ST7735_WriteString(35, 35, TEMP_BUF, Font_16x26, GREEN, RED);
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <writeTempHighWarn+0x8c>)
 8002b1e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b22:	9202      	str	r2, [sp, #8]
 8002b24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b28:	9201      	str	r2, [sp, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	9200      	str	r2, [sp, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <writeTempHighWarn+0x88>)
 8002b32:	2123      	movs	r1, #35	; 0x23
 8002b34:	2023      	movs	r0, #35	; 0x23
 8002b36:	f7fe fc07 	bl	8001348 <ST7735_WriteString>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000000 	.word	0x20000000
 8002b48:	08009728 	.word	0x08009728
 8002b4c:	08009740 	.word	0x08009740
 8002b50:	08009690 	.word	0x08009690
 8002b54:	200002f4 	.word	0x200002f4
 8002b58:	20000010 	.word	0x20000010

08002b5c <writeTempLowWarn>:
void writeTempLowWarn(double temperature){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af04      	add	r7, sp, #16
 8002b62:	ed87 0b00 	vstr	d0, [r7]
	ST7735_WriteString(2, 5, "Za niska temperatura", Font_7x10, BLACK,RED);
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <writeTempLowWarn+0x78>)
 8002b68:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b6c:	9202      	str	r2, [sp, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	9201      	str	r2, [sp, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <writeTempLowWarn+0x7c>)
 8002b7a:	2105      	movs	r1, #5
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f7fe fbe3 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Aktualna temperatura:", Font_7x10, YELLOW ,RED);
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <writeTempLowWarn+0x78>)
 8002b84:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b88:	9202      	str	r2, [sp, #8]
 8002b8a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b8e:	9201      	str	r2, [sp, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <writeTempLowWarn+0x80>)
 8002b98:	2114      	movs	r1, #20
 8002b9a:	2005      	movs	r0, #5
 8002b9c:	f7fe fbd4 	bl	8001348 <ST7735_WriteString>
	sprintf(TEMP_BUF, "%.2f", temperature);
 8002ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba4:	490e      	ldr	r1, [pc, #56]	; (8002be0 <writeTempLowWarn+0x84>)
 8002ba6:	480f      	ldr	r0, [pc, #60]	; (8002be4 <writeTempLowWarn+0x88>)
 8002ba8:	f004 fb3a 	bl	8007220 <siprintf>
	ST7735_WriteString(35, 35, TEMP_BUF, Font_16x26, GREEN, RED);
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <writeTempLowWarn+0x8c>)
 8002bae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002bb2:	9202      	str	r2, [sp, #8]
 8002bb4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	9200      	str	r2, [sp, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <writeTempLowWarn+0x88>)
 8002bc2:	2123      	movs	r1, #35	; 0x23
 8002bc4:	2023      	movs	r0, #35	; 0x23
 8002bc6:	f7fe fbbf 	bl	8001348 <ST7735_WriteString>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	08009758 	.word	0x08009758
 8002bdc:	08009740 	.word	0x08009740
 8002be0:	08009690 	.word	0x08009690
 8002be4:	200002f4 	.word	0x200002f4
 8002be8:	20000010 	.word	0x20000010

08002bec <__io_putchar>:
 *  Created on: Jun 15, 2021
 *      Author: KUBA
 */
#include "usart.h"

int __io_putchar(int ch) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8002bfa:	f107 010c 	add.w	r1, r7, #12
 8002bfe:	230a      	movs	r3, #10
 8002c00:	2201      	movs	r2, #1
 8002c02:	4804      	ldr	r0, [pc, #16]	; (8002c14 <__io_putchar+0x28>)
 8002c04:	f003 f89d 	bl	8005d42 <HAL_UART_Transmit>
	return ch;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200003ac 	.word	0x200003ac

08002c18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c1e:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <MX_SPI2_Init+0x68>)
 8002c20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c64:	220a      	movs	r2, #10
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c68:	4804      	ldr	r0, [pc, #16]	; (8002c7c <MX_SPI2_Init+0x64>)
 8002c6a:	f002 fb17 	bl	800529c <HAL_SPI_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c74:	f7ff fe4a 	bl	800290c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	2000030c 	.word	0x2000030c
 8002c80:	40003800 	.word	0x40003800

08002c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_SPI_MspInit+0xc0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d14a      	bne.n	8002d3c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_SPI_MspInit+0xc4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d0a:	2305      	movs	r3, #5
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <HAL_SPI_MspInit+0xc8>)
 8002d16:	f000 fcef 	bl	80036f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d2c:	2305      	movs	r3, #5
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4806      	ldr	r0, [pc, #24]	; (8002d50 <HAL_SPI_MspInit+0xcc>)
 8002d38:	f000 fcde 	bl	80036f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40003800 	.word	0x40003800
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020400 	.word	0x40020400

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_MspInit+0x4c>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <HAL_MspInit+0x4c>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_MspInit+0x4c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_MspInit+0x4c>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_MspInit+0x4c>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_MspInit+0x4c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d92:	2007      	movs	r0, #7
 8002d94:	f000 fbdc 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <NMI_Handler+0x4>

08002daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <HardFault_Handler+0x4>

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <MemManage_Handler+0x4>

08002db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <BusFault_Handler+0x4>

08002dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <UsageFault_Handler+0x4>

08002dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df0:	f000 fa9a 	bl	8003328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002dfe:	f002 fd8f 	bl	8005920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000364 	.word	0x20000364

08002e0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <USART2_IRQHandler+0x10>)
 8002e12:	f003 f829 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	200003ac 	.word	0x200003ac

08002e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_kill>:

int _kill(int pid, int sig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e3a:	f003 fd3d 	bl	80068b8 <__errno>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2216      	movs	r2, #22
 8002e42:	601a      	str	r2, [r3, #0]
	return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_exit>:

void _exit (int status)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffe7 	bl	8002e30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e62:	e7fe      	b.n	8002e62 <_exit+0x12>

08002e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e00a      	b.n	8002e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e76:	f3af 8000 	nop.w
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60ba      	str	r2, [r7, #8]
 8002e82:	b2ca      	uxtb	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	dbf0      	blt.n	8002e76 <_read+0x12>
	}

return len;
 8002e94:	687b      	ldr	r3, [r7, #4]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e009      	b.n	8002ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fe97 	bl	8002bec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	dbf1      	blt.n	8002eb0 <_write+0x12>
	}
	return len;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_close>:

int _close(int file)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efe:	605a      	str	r2, [r3, #4]
	return 0;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <_isatty>:

int _isatty(int file)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
	return 1;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <_sbrk+0x5c>)
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <_sbrk+0x60>)
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <_sbrk+0x64>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <_sbrk+0x64>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <_sbrk+0x68>)
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <_sbrk+0x64>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d207      	bcs.n	8002f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f70:	f003 fca2 	bl	80068b8 <__errno>
 8002f74:	4603      	mov	r3, r0
 8002f76:	220c      	movs	r2, #12
 8002f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	e009      	b.n	8002f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <_sbrk+0x64>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <_sbrk+0x64>)
 8002f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20018000 	.word	0x20018000
 8002fa0:	00000400 	.word	0x00000400
 8002fa4:	20000238 	.word	0x20000238
 8002fa8:	20000408 	.word	0x20000408

08002fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <SystemInit+0x20>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <SystemInit+0x20>)
 8002fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <MX_TIM10_Init>:
/* USER CODE END 0 */

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <MX_TIM10_Init+0x40>)
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	; (8003014 <MX_TIM10_Init+0x44>)
 8002fd8:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 9999;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <MX_TIM10_Init+0x40>)
 8002fdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002fe0:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <MX_TIM10_Init+0x40>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 8399;
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_TIM10_Init+0x40>)
 8002fea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002fee:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <MX_TIM10_Init+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <MX_TIM10_Init+0x40>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <MX_TIM10_Init+0x40>)
 8002ffe:	f002 fbdd 	bl	80057bc <HAL_TIM_Base_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM10_Init+0x3c>
		Error_Handler();
 8003008:	f7ff fc80 	bl	800290c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000364 	.word	0x20000364
 8003014:	40014400 	.word	0x40014400

08003018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM10) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_TIM_Base_MspInit+0x48>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d115      	bne.n	8003056 <HAL_TIM_Base_MspInit+0x3e>
		/* USER CODE BEGIN TIM10_MspInit 0 */

		/* USER CODE END TIM10_MspInit 0 */
		/* TIM10 clock enable */
		__HAL_RCC_TIM10_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_TIM_Base_MspInit+0x4c>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <HAL_TIM_Base_MspInit+0x4c>)
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_TIM_Base_MspInit+0x4c>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

		/* TIM10 interrupt Init */
		HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	2019      	movs	r0, #25
 800304c:	f000 fa8b 	bl	8003566 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003050:	2019      	movs	r0, #25
 8003052:	f000 faa4 	bl	800359e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM10_MspInit 1 */

		/* USER CODE END TIM10_MspInit 1 */
	}
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40014400 	.word	0x40014400
 8003064:	40023800 	.word	0x40023800

08003068 <HAL_TIM_PeriodElapsedCallback>:
		/* USER CODE END TIM10_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) { // Jeżeli przerwanie pochodzi od timera 10
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_TIM_PeriodElapsedCallback+0x16>
		sendMessage();
 800307a:	f000 f881 	bl	8003180 <sendMessage>
	}
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40014400 	.word	0x40014400

0800308c <MX_USART2_UART_Init>:

UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <MX_USART2_UART_Init+0x50>)
 8003094:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 8003098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800309c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030b2:	220c      	movs	r2, #12
 80030b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <MX_USART2_UART_Init+0x4c>)
 80030c4:	f002 fdf0 	bl	8005ca8 <HAL_UART_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80030ce:	f7ff fc1d 	bl	800290c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200003ac 	.word	0x200003ac
 80030dc:	40004400 	.word	0x40004400

080030e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART2) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_UART_MspInit+0x94>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d133      	bne.n	800316a <HAL_UART_MspInit+0x8a>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_UART_MspInit+0x98>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_UART_MspInit+0x98>)
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_UART_MspInit+0x98>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HAL_UART_MspInit+0x98>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <HAL_UART_MspInit+0x98>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_UART_MspInit+0x98>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800313a:	230c      	movs	r3, #12
 800313c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800314a:	2307      	movs	r3, #7
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4809      	ldr	r0, [pc, #36]	; (800317c <HAL_UART_MspInit+0x9c>)
 8003156:	f000 facf 	bl	80036f8 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	2026      	movs	r0, #38	; 0x26
 8003160:	f000 fa01 	bl	8003566 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003164:	2026      	movs	r0, #38	; 0x26
 8003166:	f000 fa1a 	bl	800359e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}
}
 800316a:	bf00      	nop
 800316c:	3728      	adds	r7, #40	; 0x28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40004400 	.word	0x40004400
 8003178:	40023800 	.word	0x40023800
 800317c:	40020000 	.word	0x40020000

08003180 <sendMessage>:
		/* USER CODE END USART2_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void sendMessage(void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af02      	add	r7, sp, #8
	double temp = returnTemp();
 8003186:	f7ff fb9d 	bl	80028c4 <returnTemp>
 800318a:	ed87 0b02 	vstr	d0, [r7, #8]
	double pres = returnPres();
 800318e:	f7ff fbab 	bl	80028e8 <returnPres>
 8003192:	ed87 0b00 	vstr	d0, [r7]

	if (temp > TEMP_MAX) {
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	4b20      	ldr	r3, [pc, #128]	; (800321c <sendMessage+0x9c>)
 800319c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a0:	f7fd fcc2 	bl	8000b28 <__aeabi_dcmpgt>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <sendMessage+0x36>
		printf("ZA WYSOKA TEMPERATURA W POMIESZCZENIU WYWIETRZ MIEJSCE PRACY -> TEMP: %.2f \r\n", temp);
 80031aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ae:	481c      	ldr	r0, [pc, #112]	; (8003220 <sendMessage+0xa0>)
 80031b0:	f004 f81e 	bl	80071f0 <iprintf>
	} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
		printf("Aktualna temperatura w pokoju: %.2f [st. C] \t cisnienie: %.2f [Pa] \r\n",
				temp, pres);

	}
}
 80031b4:	e02e      	b.n	8003214 <sendMessage+0x94>
	} else if (temp < TEMP_MIN) {
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <sendMessage+0xa4>)
 80031bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c0:	f7fd fc94 	bl	8000aec <__aeabi_dcmplt>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <sendMessage+0x56>
		printf("ZA NISKA TEMPERATURA W POMIESZCZENIU  -> TEMP: %.2f\r\n", temp);
 80031ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ce:	4816      	ldr	r0, [pc, #88]	; (8003228 <sendMessage+0xa8>)
 80031d0:	f004 f80e 	bl	80071f0 <iprintf>
}
 80031d4:	e01e      	b.n	8003214 <sendMessage+0x94>
	} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <sendMessage+0xa4>)
 80031dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e0:	f7fd fca2 	bl	8000b28 <__aeabi_dcmpgt>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d100      	bne.n	80031ec <sendMessage+0x6c>
}
 80031ea:	e013      	b.n	8003214 <sendMessage+0x94>
	} else if (temp > TEMP_MIN && temp < TEMP_MAX) {
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <sendMessage+0x9c>)
 80031f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031f6:	f7fd fc79 	bl	8000aec <__aeabi_dcmplt>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d100      	bne.n	8003202 <sendMessage+0x82>
}
 8003200:	e008      	b.n	8003214 <sendMessage+0x94>
		printf("Aktualna temperatura w pokoju: %.2f [st. C] \t cisnienie: %.2f [Pa] \r\n",
 8003202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003206:	e9cd 2300 	strd	r2, r3, [sp]
 800320a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800320e:	4807      	ldr	r0, [pc, #28]	; (800322c <sendMessage+0xac>)
 8003210:	f003 ffee 	bl	80071f0 <iprintf>
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	403e0000 	.word	0x403e0000
 8003220:	08009770 	.word	0x08009770
 8003224:	402e0000 	.word	0x402e0000
 8003228:	080097c0 	.word	0x080097c0
 800322c:	080097f8 	.word	0x080097f8

08003230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003234:	480d      	ldr	r0, [pc, #52]	; (800326c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003236:	490e      	ldr	r1, [pc, #56]	; (8003270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800323c:	e002      	b.n	8003244 <LoopCopyDataInit>

0800323e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003242:	3304      	adds	r3, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003248:	d3f9      	bcc.n	800323e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800324c:	4c0b      	ldr	r4, [pc, #44]	; (800327c <LoopFillZerobss+0x26>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003250:	e001      	b.n	8003256 <LoopFillZerobss>

08003252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003254:	3204      	adds	r2, #4

08003256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003258:	d3fb      	bcc.n	8003252 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800325a:	f7ff fea7 	bl	8002fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800325e:	f003 fb31 	bl	80068c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003262:	f7ff f9c5 	bl	80025f0 <main>
  bx  lr    
 8003266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003268:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800326c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003270:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003274:	0800c4d4 	.word	0x0800c4d4
  ldr r2, =_sbss
 8003278:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800327c:	20000404 	.word	0x20000404

08003280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003280:	e7fe      	b.n	8003280 <ADC_IRQHandler>
	...

08003284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_Init+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <HAL_Init+0x40>)
 800328e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_Init+0x40>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <HAL_Init+0x40>)
 800329a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_Init+0x40>)
 80032a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ac:	2003      	movs	r0, #3
 80032ae:	f000 f94f 	bl	8003550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 f808 	bl	80032c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b8:	f7ff fd4c 	bl	8002d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40023c00 	.word	0x40023c00

080032c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_InitTick+0x54>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_InitTick+0x58>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032de:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f967 	bl	80035ba <HAL_SYSTICK_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e00e      	b.n	8003314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d80a      	bhi.n	8003312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fc:	2200      	movs	r2, #0
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	f000 f92f 	bl	8003566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003308:	4a06      	ldr	r2, [pc, #24]	; (8003324 <HAL_InitTick+0x5c>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000018 	.word	0x20000018
 8003320:	20000020 	.word	0x20000020
 8003324:	2000001c 	.word	0x2000001c

08003328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_IncTick+0x20>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_IncTick+0x24>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <HAL_IncTick+0x24>)
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000020 	.word	0x20000020
 800334c:	200003f0 	.word	0x200003f0

08003350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_GetTick+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	200003f0 	.word	0x200003f0

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff ffee 	bl	8003350 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_Delay+0x44>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800338e:	bf00      	nop
 8003390:	f7ff ffde 	bl	8003350 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000020 	.word	0x20000020

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e2:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	60d3      	str	r3, [r2, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	; (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	; (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	; (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	; 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351c:	d301      	bcc.n	8003522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351e:	2301      	movs	r3, #1
 8003520:	e00f      	b.n	8003542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <SysTick_Config+0x40>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352a:	210f      	movs	r1, #15
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f7ff ff8e 	bl	8003450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <SysTick_Config+0x40>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353a:	4b04      	ldr	r3, [pc, #16]	; (800354c <SysTick_Config+0x40>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	e000e010 	.word	0xe000e010

08003550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff29 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
 8003572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003578:	f7ff ff3e 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 800357c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff8e 	bl	80034a4 <NVIC_EncodePriority>
 8003588:	4602      	mov	r2, r0
 800358a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff5d 	bl	8003450 <__NVIC_SetPriority>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff31 	bl	8003414 <__NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffa2 	bl	800350c <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7ff feb6 	bl	8003350 <HAL_GetTick>
 80035e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d008      	beq.n	8003604 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e052      	b.n	80036aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0216 	bic.w	r2, r2, #22
 8003612:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003622:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <HAL_DMA_Abort+0x62>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0208 	bic.w	r2, r2, #8
 8003642:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003654:	e013      	b.n	800367e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003656:	f7ff fe7b 	bl	8003350 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b05      	cmp	r3, #5
 8003662:	d90c      	bls.n	800367e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e015      	b.n	80036aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e4      	bne.n	8003656 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	223f      	movs	r2, #63	; 0x3f
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d004      	beq.n	80036d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e00c      	b.n	80036ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2205      	movs	r2, #5
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	e159      	b.n	80039c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003714:	2201      	movs	r2, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	f040 8148 	bne.w	80039c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d005      	beq.n	800374a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	2b02      	cmp	r3, #2
 8003748:	d130      	bne.n	80037ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003780:	2201      	movs	r2, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 0201 	and.w	r2, r3, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d017      	beq.n	80037e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d123      	bne.n	800383c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	08da      	lsrs	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3208      	adds	r2, #8
 80037fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	69b9      	ldr	r1, [r7, #24]
 8003838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0203 	and.w	r2, r3, #3
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80a2 	beq.w	80039c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b57      	ldr	r3, [pc, #348]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800388c:	6453      	str	r3, [r2, #68]	; 0x44
 800388e:	4b54      	ldr	r3, [pc, #336]	; (80039e0 <HAL_GPIO_Init+0x2e8>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389a:	4a52      	ldr	r2, [pc, #328]	; (80039e4 <HAL_GPIO_Init+0x2ec>)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a49      	ldr	r2, [pc, #292]	; (80039e8 <HAL_GPIO_Init+0x2f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d019      	beq.n	80038fa <HAL_GPIO_Init+0x202>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a48      	ldr	r2, [pc, #288]	; (80039ec <HAL_GPIO_Init+0x2f4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0x1fe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a47      	ldr	r2, [pc, #284]	; (80039f0 <HAL_GPIO_Init+0x2f8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x1fa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a46      	ldr	r2, [pc, #280]	; (80039f4 <HAL_GPIO_Init+0x2fc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x1f6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <HAL_GPIO_Init+0x300>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x1f2>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038ea:	2307      	movs	r3, #7
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x204>
 80038fa:	2300      	movs	r3, #0
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390c:	4935      	ldr	r1, [pc, #212]	; (80039e4 <HAL_GPIO_Init+0x2ec>)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_GPIO_Init+0x304>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800393e:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003944:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003968:	4a24      	ldr	r2, [pc, #144]	; (80039fc <HAL_GPIO_Init+0x304>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003992:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x304>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_GPIO_Init+0x304>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039bc:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <HAL_GPIO_Init+0x304>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f aea2 	bls.w	8003714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a1c:	e003      	b.n	8003a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e12b      	b.n	8003c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe fd80 	bl	8002560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a98:	f001 fbd8 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 8003a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a81      	ldr	r2, [pc, #516]	; (8003ca8 <HAL_I2C_Init+0x274>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d807      	bhi.n	8003ab8 <HAL_I2C_Init+0x84>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a80      	ldr	r2, [pc, #512]	; (8003cac <HAL_I2C_Init+0x278>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bf94      	ite	ls
 8003ab0:	2301      	movls	r3, #1
 8003ab2:	2300      	movhi	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e006      	b.n	8003ac6 <HAL_I2C_Init+0x92>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a7d      	ldr	r2, [pc, #500]	; (8003cb0 <HAL_I2C_Init+0x27c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bf94      	ite	ls
 8003ac0:	2301      	movls	r3, #1
 8003ac2:	2300      	movhi	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0e7      	b.n	8003c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a78      	ldr	r2, [pc, #480]	; (8003cb4 <HAL_I2C_Init+0x280>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	0c9b      	lsrs	r3, r3, #18
 8003ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a6a      	ldr	r2, [pc, #424]	; (8003ca8 <HAL_I2C_Init+0x274>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d802      	bhi.n	8003b08 <HAL_I2C_Init+0xd4>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	3301      	adds	r3, #1
 8003b06:	e009      	b.n	8003b1c <HAL_I2C_Init+0xe8>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a69      	ldr	r2, [pc, #420]	; (8003cb8 <HAL_I2C_Init+0x284>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	099b      	lsrs	r3, r3, #6
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	495c      	ldr	r1, [pc, #368]	; (8003ca8 <HAL_I2C_Init+0x274>)
 8003b38:	428b      	cmp	r3, r1
 8003b3a:	d819      	bhi.n	8003b70 <HAL_I2C_Init+0x13c>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1e59      	subs	r1, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b50:	400b      	ands	r3, r1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_I2C_Init+0x138>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1e59      	subs	r1, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b64:	3301      	adds	r3, #1
 8003b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6a:	e051      	b.n	8003c10 <HAL_I2C_Init+0x1dc>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	e04f      	b.n	8003c10 <HAL_I2C_Init+0x1dc>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d111      	bne.n	8003b9c <HAL_I2C_Init+0x168>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	440b      	add	r3, r1
 8003b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e012      	b.n	8003bc2 <HAL_I2C_Init+0x18e>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	1e58      	subs	r0, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6859      	ldr	r1, [r3, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	0099      	lsls	r1, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Init+0x196>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e022      	b.n	8003c10 <HAL_I2C_Init+0x1dc>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_I2C_Init+0x1bc>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1e58      	subs	r0, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	440b      	add	r3, r1
 8003be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be4:	3301      	adds	r3, #1
 8003be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bee:	e00f      	b.n	8003c10 <HAL_I2C_Init+0x1dc>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e58      	subs	r0, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	0099      	lsls	r1, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c06:	3301      	adds	r3, #1
 8003c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	6809      	ldr	r1, [r1, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6911      	ldr	r1, [r2, #16]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68d2      	ldr	r2, [r2, #12]
 8003c4a:	4311      	orrs	r1, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6812      	ldr	r2, [r2, #0]
 8003c50:	430b      	orrs	r3, r1
 8003c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	000186a0 	.word	0x000186a0
 8003cac:	001e847f 	.word	0x001e847f
 8003cb0:	003d08ff 	.word	0x003d08ff
 8003cb4:	431bde83 	.word	0x431bde83
 8003cb8:	10624dd3 	.word	0x10624dd3

08003cbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	813b      	strh	r3, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cd6:	f7ff fb3b 	bl	8003350 <HAL_GetTick>
 8003cda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	f040 80d9 	bne.w	8003e9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2319      	movs	r3, #25
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	496d      	ldr	r1, [pc, #436]	; (8003ea8 <HAL_I2C_Mem_Write+0x1ec>)
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fc7f 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
 8003d02:	e0cc      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_Mem_Write+0x56>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e0c5      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1e2>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d007      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2221      	movs	r2, #33	; 0x21
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a4d      	ldr	r2, [pc, #308]	; (8003eac <HAL_I2C_Mem_Write+0x1f0>)
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d7a:	88f8      	ldrh	r0, [r7, #6]
 8003d7c:	893a      	ldrh	r2, [r7, #8]
 8003d7e:	8979      	ldrh	r1, [r7, #10]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4603      	mov	r3, r0
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fab6 	bl	80042fc <I2C_RequestMemoryWrite>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d052      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e081      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fd00 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e06b      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d11b      	bne.n	8003e3c <HAL_I2C_Mem_Write+0x180>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d017      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1aa      	bne.n	8003d9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fcec 	bl	8004826 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d107      	bne.n	8003e6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e016      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	00100002 	.word	0x00100002
 8003eac:	ffff0000 	.word	0xffff0000

08003eb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	817b      	strh	r3, [r7, #10]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	813b      	strh	r3, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eca:	f7ff fa41 	bl	8003350 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	f040 8208 	bne.w	80042ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2319      	movs	r3, #25
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	497b      	ldr	r1, [pc, #492]	; (80040d4 <HAL_I2C_Mem_Read+0x224>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fb85 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e1fb      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Mem_Read+0x56>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e1f4      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2222      	movs	r2, #34	; 0x22
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2240      	movs	r2, #64	; 0x40
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a5b      	ldr	r2, [pc, #364]	; (80040d8 <HAL_I2C_Mem_Read+0x228>)
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6e:	88f8      	ldrh	r0, [r7, #6]
 8003f70:	893a      	ldrh	r2, [r7, #8]
 8003f72:	8979      	ldrh	r1, [r7, #10]
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa52 	bl	8004428 <I2C_RequestMemoryRead>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e1b0      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d113      	bne.n	8003fbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e184      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d11b      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e164      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	2b02      	cmp	r3, #2
 8004004:	d11b      	bne.n	800403e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	e144      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004054:	e138      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	2b03      	cmp	r3, #3
 800405c:	f200 80f1 	bhi.w	8004242 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b01      	cmp	r3, #1
 8004066:	d123      	bne.n	80040b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fc1b 	bl	80048a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e139      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ae:	e10b      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d14e      	bne.n	8004156 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040be:	2200      	movs	r2, #0
 80040c0:	4906      	ldr	r1, [pc, #24]	; (80040dc <HAL_I2C_Mem_Read+0x22c>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa98 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e10e      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
 80040d2:	bf00      	nop
 80040d4:	00100002 	.word	0x00100002
 80040d8:	ffff0000 	.word	0xffff0000
 80040dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004154:	e0b8      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	2200      	movs	r2, #0
 800415e:	4966      	ldr	r1, [pc, #408]	; (80042f8 <HAL_I2C_Mem_Read+0x448>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fa49 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0bf      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	2200      	movs	r2, #0
 80041ba:	494f      	ldr	r1, [pc, #316]	; (80042f8 <HAL_I2C_Mem_Read+0x448>)
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fa1b 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e091      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004240:	e042      	b.n	80042c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fb2e 	bl	80048a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e04c      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d118      	bne.n	80042c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f47f aec2 	bne.w	8004056 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
  }
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	00010004 	.word	0x00010004

080042fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	4603      	mov	r3, r0
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	460b      	mov	r3, r1
 8004310:	813b      	strh	r3, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	2200      	movs	r2, #0
 800432e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f960 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434c:	d103      	bne.n	8004356 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e05f      	b.n	800441a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800435a:	897b      	ldrh	r3, [r7, #10]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	492d      	ldr	r1, [pc, #180]	; (8004424 <I2C_RequestMemoryWrite+0x128>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f998 	bl	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e04c      	b.n	800441a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	6a39      	ldr	r1, [r7, #32]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa02 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d107      	bne.n	80043be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02b      	b.n	800441a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c8:	893b      	ldrh	r3, [r7, #8]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	e021      	b.n	8004418 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043d4:	893b      	ldrh	r3, [r7, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f9dc 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d107      	bne.n	800440a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e005      	b.n	800441a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800440e:	893b      	ldrh	r3, [r7, #8]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	00010002 	.word	0x00010002

08004428 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	4603      	mov	r3, r0
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	460b      	mov	r3, r1
 800443c:	813b      	strh	r3, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004450:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004460:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2200      	movs	r2, #0
 800446a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f8c2 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004488:	d103      	bne.n	8004492 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0aa      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004496:	897b      	ldrh	r3, [r7, #10]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	4952      	ldr	r1, [pc, #328]	; (80045f4 <I2C_RequestMemoryRead+0x1cc>)
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f8fa 	bl	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e097      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	6a39      	ldr	r1, [r7, #32]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f964 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d107      	bne.n	80044fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e076      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	e021      	b.n	8004554 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004510:	893b      	ldrh	r3, [r7, #8]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	b29b      	uxth	r3, r3
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f93e 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e050      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800454a:	893b      	ldrh	r3, [r7, #8]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	6a39      	ldr	r1, [r7, #32]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f923 	bl	80047a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b04      	cmp	r3, #4
 800456a:	d107      	bne.n	800457c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e035      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	2200      	movs	r2, #0
 8004598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f82b 	bl	80045f8 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d103      	bne.n	80045c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e013      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045c4:	897b      	ldrh	r3, [r7, #10]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	4906      	ldr	r1, [pc, #24]	; (80045f4 <I2C_RequestMemoryRead+0x1cc>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f863 	bl	80046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	00010002 	.word	0x00010002

080045f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004608:	e025      	b.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d021      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004612:	f7fe fe9d 	bl	8003350 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d116      	bne.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e023      	b.n	800469e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10d      	bne.n	800467c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	43da      	mvns	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	e00c      	b.n	8004696 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	43da      	mvns	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	429a      	cmp	r2, r3
 800469a:	d0b6      	beq.n	800460a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046b4:	e051      	b.n	800475a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c4:	d123      	bne.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e046      	b.n	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d021      	beq.n	800475a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fe fe1b 	bl	8003350 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d116      	bne.n	800475a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e020      	b.n	800479c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10c      	bne.n	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	43da      	mvns	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	bf14      	ite	ne
 8004776:	2301      	movne	r3, #1
 8004778:	2300      	moveq	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e00b      	b.n	8004796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	43da      	mvns	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4013      	ands	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d18d      	bne.n	80046b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b0:	e02d      	b.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f8ce 	bl	8004954 <I2C_IsAcknowledgeFailed>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02d      	b.n	800481e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d021      	beq.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fe fdc1 	bl	8003350 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d116      	bne.n	800480e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f043 0220 	orr.w	r2, r3, #32
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e007      	b.n	800481e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d1ca      	bne.n	80047b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004832:	e02d      	b.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f88d 	bl	8004954 <I2C_IsAcknowledgeFailed>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e02d      	b.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d021      	beq.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484c:	f7fe fd80 	bl	8003350 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	d302      	bcc.n	8004862 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e007      	b.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b04      	cmp	r3, #4
 800489c:	d1ca      	bne.n	8004834 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048b4:	e042      	b.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d119      	bne.n	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0210 	mvn.w	r2, #16
 80048cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e029      	b.n	800494c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f8:	f7fe fd2a 	bl	8003350 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e007      	b.n	800494c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d1b5      	bne.n	80048b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496a:	d11b      	bne.n	80049a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004974:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 0204 	orr.w	r2, r3, #4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e264      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d075      	beq.n	8004abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d2:	4ba3      	ldr	r3, [pc, #652]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d00c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049de:	4ba0      	ldr	r3, [pc, #640]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d112      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ea:	4b9d      	ldr	r3, [pc, #628]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f6:	d10b      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	4b99      	ldr	r3, [pc, #612]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05b      	beq.n	8004abc <HAL_RCC_OscConfig+0x108>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d157      	bne.n	8004abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e23f      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_OscConfig+0x74>
 8004a1a:	4b91      	ldr	r3, [pc, #580]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a90      	ldr	r2, [pc, #576]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x98>
 8004a32:	4b8b      	ldr	r3, [pc, #556]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a8a      	ldr	r2, [pc, #552]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a87      	ldr	r2, [pc, #540]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a4c:	4b84      	ldr	r3, [pc, #528]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a83      	ldr	r2, [pc, #524]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a80      	ldr	r2, [pc, #512]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fc70 	bl	8003350 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fe fc6c 	bl	8003350 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e204      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b76      	ldr	r3, [pc, #472]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xc0>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fe fc5c 	bl	8003350 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fe fc58 	bl	8003350 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1f0      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0xe8>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d063      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aca:	4b65      	ldr	r3, [pc, #404]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad6:	4b62      	ldr	r3, [pc, #392]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d11c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d116      	bne.n	8004b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x152>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1c4      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4952      	ldr	r1, [pc, #328]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	e03a      	b.n	8004b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b24:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <HAL_RCC_OscConfig+0x2b0>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fe fc11 	bl	8003350 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fe fc0d 	bl	8003350 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1a5      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4940      	ldr	r1, [pc, #256]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	e015      	b.n	8004b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <HAL_RCC_OscConfig+0x2b0>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fbf0 	bl	8003350 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fe fbec 	bl	8003350 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e184      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d030      	beq.n	8004c00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba6:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <HAL_RCC_OscConfig+0x2b4>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fe fbd0 	bl	8003350 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fe fbcc 	bl	8003350 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e164      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x200>
 8004bd2:	e015      	b.n	8004c00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RCC_OscConfig+0x2b4>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fe fbb9 	bl	8003350 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fe fbb5 	bl	8003350 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e14d      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f0      	bne.n	8004be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80a0 	beq.w	8004d4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10f      	bne.n	8004c3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2e:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_OscConfig+0x2b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d121      	bne.n	8004c8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_RCC_OscConfig+0x2b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_RCC_OscConfig+0x2b8>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c56:	f7fe fb7b 	bl	8003350 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	e011      	b.n	8004c82 <HAL_RCC_OscConfig+0x2ce>
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470000 	.word	0x42470000
 8004c68:	42470e80 	.word	0x42470e80
 8004c6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c70:	f7fe fb6e 	bl	8003350 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e106      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b85      	ldr	r3, [pc, #532]	; (8004e98 <HAL_RCC_OscConfig+0x4e4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d106      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x2f0>
 8004c96:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	4a80      	ldr	r2, [pc, #512]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca2:	e01c      	b.n	8004cde <HAL_RCC_OscConfig+0x32a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b05      	cmp	r3, #5
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x312>
 8004cac:	4b7b      	ldr	r3, [pc, #492]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a7a      	ldr	r2, [pc, #488]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb8:	4b78      	ldr	r3, [pc, #480]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a77      	ldr	r2, [pc, #476]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc4:	e00b      	b.n	8004cde <HAL_RCC_OscConfig+0x32a>
 8004cc6:	4b75      	ldr	r3, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a74      	ldr	r2, [pc, #464]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd2:	4b72      	ldr	r3, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4a71      	ldr	r2, [pc, #452]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004cd8:	f023 0304 	bic.w	r3, r3, #4
 8004cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d015      	beq.n	8004d12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fe fb33 	bl	8003350 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fe fb2f 	bl	8003350 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0c5      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d04:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0ee      	beq.n	8004cee <HAL_RCC_OscConfig+0x33a>
 8004d10:	e014      	b.n	8004d3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d12:	f7fe fb1d 	bl	8003350 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1a:	f7fe fb19 	bl	8003350 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e0af      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d30:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ee      	bne.n	8004d1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d42:	4b56      	ldr	r3, [pc, #344]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	4a55      	ldr	r2, [pc, #340]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 809b 	beq.w	8004e8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d05c      	beq.n	8004e1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d141      	bne.n	8004df0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b4c      	ldr	r3, [pc, #304]	; (8004ea0 <HAL_RCC_OscConfig+0x4ec>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d72:	f7fe faed 	bl	8003350 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fe fae9 	bl	8003350 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e081      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8c:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	019b      	lsls	r3, r3, #6
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	3b01      	subs	r3, #1
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_OscConfig+0x4ec>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fe fac2 	bl	8003350 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fe fabe 	bl	8003350 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e056      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de2:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x41c>
 8004dee:	e04e      	b.n	8004e8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df0:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCC_OscConfig+0x4ec>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df6:	f7fe faab 	bl	8003350 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfe:	f7fe faa7 	bl	8003350 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e03f      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e10:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <HAL_RCC_OscConfig+0x44a>
 8004e1c:	e037      	b.n	8004e8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e032      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e2a:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_RCC_OscConfig+0x4e8>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d028      	beq.n	8004e8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d121      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d11a      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d111      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	3b01      	subs	r3, #1
 8004e74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470060 	.word	0x42470060

08004ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cc      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90c      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b8      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d119      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e06f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e067      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4934      	ldr	r1, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fe f9dc 	bl	8003350 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fe f9d8 	bl	8003350 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d20c      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e032      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4916      	ldr	r1, [pc, #88]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe f93c 	bl	80032c8 <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	0800c0c8 	.word	0x0800c0c8
 8005068:	20000018 	.word	0x20000018
 800506c:	2000001c 	.word	0x2000001c

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	2300      	movs	r3, #0
 8005082:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	4b67      	ldr	r3, [pc, #412]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d00d      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005094:	2b08      	cmp	r3, #8
 8005096:	f200 80bd 	bhi.w	8005214 <HAL_RCC_GetSysClockFreq+0x1a4>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x3a>
 80050a2:	e0b7      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b61      	ldr	r3, [pc, #388]	; (800522c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050a6:	60bb      	str	r3, [r7, #8]
       break;
 80050a8:	e0b7      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4b61      	ldr	r3, [pc, #388]	; (8005230 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050ac:	60bb      	str	r3, [r7, #8]
      break;
 80050ae:	e0b4      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4b5d      	ldr	r3, [pc, #372]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ba:	4b5b      	ldr	r3, [pc, #364]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04d      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b58      	ldr	r3, [pc, #352]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	461a      	mov	r2, r3
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050d6:	f04f 0100 	mov.w	r1, #0
 80050da:	ea02 0800 	and.w	r8, r2, r0
 80050de:	ea03 0901 	and.w	r9, r3, r1
 80050e2:	4640      	mov	r0, r8
 80050e4:	4649      	mov	r1, r9
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	014b      	lsls	r3, r1, #5
 80050f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050f4:	0142      	lsls	r2, r0, #5
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	ebb0 0008 	subs.w	r0, r0, r8
 80050fe:	eb61 0109 	sbc.w	r1, r1, r9
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	018b      	lsls	r3, r1, #6
 800510c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005110:	0182      	lsls	r2, r0, #6
 8005112:	1a12      	subs	r2, r2, r0
 8005114:	eb63 0301 	sbc.w	r3, r3, r1
 8005118:	f04f 0000 	mov.w	r0, #0
 800511c:	f04f 0100 	mov.w	r1, #0
 8005120:	00d9      	lsls	r1, r3, #3
 8005122:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005126:	00d0      	lsls	r0, r2, #3
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	eb12 0208 	adds.w	r2, r2, r8
 8005130:	eb43 0309 	adc.w	r3, r3, r9
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f04f 0100 	mov.w	r1, #0
 800513c:	0259      	lsls	r1, r3, #9
 800513e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005142:	0250      	lsls	r0, r2, #9
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4610      	mov	r0, r2
 800514a:	4619      	mov	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	461a      	mov	r2, r3
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	f7fb fd30 	bl	8000bb8 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e04a      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4b31      	ldr	r3, [pc, #196]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	ea02 0400 	and.w	r4, r2, r0
 800517a:	ea03 0501 	and.w	r5, r3, r1
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	014b      	lsls	r3, r1, #5
 800518c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005190:	0142      	lsls	r2, r0, #5
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	1b00      	subs	r0, r0, r4
 8005198:	eb61 0105 	sbc.w	r1, r1, r5
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	018b      	lsls	r3, r1, #6
 80051a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051aa:	0182      	lsls	r2, r0, #6
 80051ac:	1a12      	subs	r2, r2, r0
 80051ae:	eb63 0301 	sbc.w	r3, r3, r1
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	00d9      	lsls	r1, r3, #3
 80051bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c0:	00d0      	lsls	r0, r2, #3
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	1912      	adds	r2, r2, r4
 80051c8:	eb45 0303 	adc.w	r3, r5, r3
 80051cc:	f04f 0000 	mov.w	r0, #0
 80051d0:	f04f 0100 	mov.w	r1, #0
 80051d4:	0299      	lsls	r1, r3, #10
 80051d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051da:	0290      	lsls	r0, r2, #10
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f7fb fce4 	bl	8000bb8 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4613      	mov	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	3301      	adds	r3, #1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	60bb      	str	r3, [r7, #8]
      break;
 8005212:	e002      	b.n	800521a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005216:	60bb      	str	r3, [r7, #8]
      break;
 8005218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521a:	68bb      	ldr	r3, [r7, #8]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	00f42400 	.word	0x00f42400
 8005230:	007a1200 	.word	0x007a1200

08005234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCC_GetHCLKFreq+0x14>)
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000018 	.word	0x20000018

0800524c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005250:	f7ff fff0 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 8005254:	4602      	mov	r2, r0
 8005256:	4b05      	ldr	r3, [pc, #20]	; (800526c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	0a9b      	lsrs	r3, r3, #10
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	4903      	ldr	r1, [pc, #12]	; (8005270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005262:	5ccb      	ldrb	r3, [r1, r3]
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005268:	4618      	mov	r0, r3
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	0800c0d8 	.word	0x0800c0d8

08005274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005278:	f7ff ffdc 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0b5b      	lsrs	r3, r3, #13
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	0800c0d8 	.word	0x0800c0d8

0800529c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e07b      	b.n	80053a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d108      	bne.n	80052c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052be:	d009      	beq.n	80052d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
 80052c6:	e005      	b.n	80052d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fd fcc8 	bl	8002c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	ea42 0103 	orr.w	r1, r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 0104 	and.w	r1, r3, #4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0210 	and.w	r2, r3, #16
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b088      	sub	sp, #32
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_SPI_Transmit+0x22>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e126      	b.n	800561e <HAL_SPI_Transmit+0x270>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053d8:	f7fd ffba 	bl	8003350 <HAL_GetTick>
 80053dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
 80053f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f2:	e10b      	b.n	800560c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_Transmit+0x52>
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005404:	e102      	b.n	800560c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2203      	movs	r2, #3
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544c:	d10f      	bne.n	800546e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d007      	beq.n	800548c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800548a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005494:	d14b      	bne.n	800552e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_SPI_Transmit+0xf6>
 800549e:	8afb      	ldrh	r3, [r7, #22]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d13e      	bne.n	8005522 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054c8:	e02b      	b.n	8005522 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d112      	bne.n	80054fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	1c9a      	adds	r2, r3, #2
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80054fc:	e011      	b.n	8005522 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054fe:	f7fd ff27 	bl	8003350 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d803      	bhi.n	8005516 <HAL_SPI_Transmit+0x168>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005514:	d102      	bne.n	800551c <HAL_SPI_Transmit+0x16e>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005520:	e074      	b.n	800560c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1ce      	bne.n	80054ca <HAL_SPI_Transmit+0x11c>
 800552c:	e04c      	b.n	80055c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_SPI_Transmit+0x18e>
 8005536:	8afb      	ldrh	r3, [r7, #22]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d140      	bne.n	80055be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	7812      	ldrb	r2, [r2, #0]
 8005548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005562:	e02c      	b.n	80055be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b02      	cmp	r3, #2
 8005570:	d113      	bne.n	800559a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	86da      	strh	r2, [r3, #54]	; 0x36
 8005598:	e011      	b.n	80055be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559a:	f7fd fed9 	bl	8003350 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d803      	bhi.n	80055b2 <HAL_SPI_Transmit+0x204>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d102      	bne.n	80055b8 <HAL_SPI_Transmit+0x20a>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055bc:	e026      	b.n	800560c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1cd      	bne.n	8005564 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f8b3 	bl	8005738 <SPI_EndRxTxTransaction>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e000      	b.n	800560c <HAL_SPI_Transmit+0x25e>
  }

error:
 800560a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800561c:	7ffb      	ldrb	r3, [r7, #31]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005638:	f7fd fe8a 	bl	8003350 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005648:	f7fd fe82 	bl	8003350 <HAL_GetTick>
 800564c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565e:	e054      	b.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d050      	beq.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005668:	f7fd fe72 	bl	8003350 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d13d      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800568c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005696:	d111      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d004      	beq.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d107      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d10f      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e017      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d19b      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000018 	.word	0x20000018

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <SPI_EndRxTxTransaction+0x7c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <SPI_EndRxTxTransaction+0x80>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0d5b      	lsrs	r3, r3, #21
 8005750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d112      	bne.n	800578a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff5a 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e00f      	b.n	80057aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d0f2      	beq.n	800578a <SPI_EndRxTxTransaction+0x52>
 80057a4:	e000      	b.n	80057a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80057a6:	bf00      	nop
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000018 	.word	0x20000018
 80057b8:	165e9f81 	.word	0x165e9f81

080057bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e041      	b.n	8005852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fd fc18 	bl	8003018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4619      	mov	r1, r3
 80057fa:	4610      	mov	r0, r2
 80057fc:	f000 f9c0 	bl	8005b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d001      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e044      	b.n	80058fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1e      	ldr	r2, [pc, #120]	; (800590c <HAL_TIM_Base_Start_IT+0xb0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d013      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x6c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1a      	ldr	r2, [pc, #104]	; (8005910 <HAL_TIM_Base_Start_IT+0xb4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x6c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a19      	ldr	r2, [pc, #100]	; (8005914 <HAL_TIM_Base_Start_IT+0xb8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x6c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a17      	ldr	r2, [pc, #92]	; (8005918 <HAL_TIM_Base_Start_IT+0xbc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_TIM_Base_Start_IT+0x6c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <HAL_TIM_Base_Start_IT+0xc0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d111      	bne.n	80058ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	d010      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	e007      	b.n	80058fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800
 8005918:	40000c00 	.word	0x40000c00
 800591c:	40014000 	.word	0x40014000

08005920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d122      	bne.n	800597c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d11b      	bne.n	800597c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0202 	mvn.w	r2, #2
 800594c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8ee 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8e0 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f8f1 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b04      	cmp	r3, #4
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0204 	mvn.w	r2, #4
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8c4 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8b6 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8c7 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0208 	mvn.w	r2, #8
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2204      	movs	r2, #4
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f89a 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f88c 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f89d 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0210 	mvn.w	r2, #16
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f870 	bl	8005b44 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f862 	bl	8005b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f873 	bl	8005b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d10e      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0201 	mvn.w	r2, #1
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fd fae2 	bl	8003068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	2b80      	cmp	r3, #128	; 0x80
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8e2 	bl	8005c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b40      	cmp	r3, #64	; 0x40
 8005adc:	d10e      	bne.n	8005afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d107      	bne.n	8005afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f838 	bl	8005b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d10e      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d107      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0220 	mvn.w	r2, #32
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f8ac 	bl	8005c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b28:	bf00      	nop
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a34      	ldr	r2, [pc, #208]	; (8005c64 <TIM_Base_SetConfig+0xe4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00f      	beq.n	8005bb8 <TIM_Base_SetConfig+0x38>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0x38>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a31      	ldr	r2, [pc, #196]	; (8005c68 <TIM_Base_SetConfig+0xe8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0x38>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a30      	ldr	r2, [pc, #192]	; (8005c6c <TIM_Base_SetConfig+0xec>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0x38>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2f      	ldr	r2, [pc, #188]	; (8005c70 <TIM_Base_SetConfig+0xf0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a25      	ldr	r2, [pc, #148]	; (8005c64 <TIM_Base_SetConfig+0xe4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01b      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d017      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a22      	ldr	r2, [pc, #136]	; (8005c68 <TIM_Base_SetConfig+0xe8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a21      	ldr	r2, [pc, #132]	; (8005c6c <TIM_Base_SetConfig+0xec>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00f      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a20      	ldr	r2, [pc, #128]	; (8005c70 <TIM_Base_SetConfig+0xf0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	; (8005c74 <TIM_Base_SetConfig+0xf4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <TIM_Base_SetConfig+0xf8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_Base_SetConfig+0x8a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1d      	ldr	r2, [pc, #116]	; (8005c7c <TIM_Base_SetConfig+0xfc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d108      	bne.n	8005c1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a08      	ldr	r2, [pc, #32]	; (8005c64 <TIM_Base_SetConfig+0xe4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d103      	bne.n	8005c50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	615a      	str	r2, [r3, #20]
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40000800 	.word	0x40000800
 8005c70:	40000c00 	.word	0x40000c00
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800

08005c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e03f      	b.n	8005d3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fd fa06 	bl	80030e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2224      	movs	r2, #36	; 0x24
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fc1b 	bl	8006528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b08a      	sub	sp, #40	; 0x28
 8005d46:	af02      	add	r7, sp, #8
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d17c      	bne.n	8005e5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_UART_Transmit+0x2c>
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e075      	b.n	8005e5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_UART_Transmit+0x3e>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e06e      	b.n	8005e5e <HAL_UART_Transmit+0x11c>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2221      	movs	r2, #33	; 0x21
 8005d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d96:	f7fd fadb 	bl	8003350 <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	d108      	bne.n	8005dc4 <HAL_UART_Transmit+0x82>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e003      	b.n	8005dcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dd4:	e02a      	b.n	8005e2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2180      	movs	r1, #128	; 0x80
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 fa17 	bl	8006214 <UART_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e036      	b.n	8005e5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10b      	bne.n	8005e0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	3302      	adds	r3, #2
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	e007      	b.n	8005e1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1cf      	bne.n	8005dd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2140      	movs	r1, #64	; 0x40
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f9e7 	bl	8006214 <UART_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e006      	b.n	8005e5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3720      	adds	r7, #32
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <HAL_UART_IRQHandler+0x52>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 faa1 	bl	80063fa <UART_Receive_IT>
      return;
 8005eb8:	e17c      	b.n	80061b4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 80b1 	beq.w	8006024 <HAL_UART_IRQHandler+0x1bc>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d105      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x70>
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80a6 	beq.w	8006024 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x90>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_UART_IRQHandler+0xb0>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	f043 0202 	orr.w	r2, r3, #2
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_UART_IRQHandler+0xd0>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00f      	beq.n	8005f62 <HAL_UART_IRQHandler+0xfa>
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <HAL_UART_IRQHandler+0xee>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f043 0208 	orr.w	r2, r3, #8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 811f 	beq.w	80061aa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_UART_IRQHandler+0x11e>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa3a 	bl	80063fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	bf0c      	ite	eq
 8005f94:	2301      	moveq	r3, #1
 8005f96:	2300      	movne	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_UART_IRQHandler+0x146>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d031      	beq.n	8006012 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f97a 	bl	80062a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d123      	bne.n	800600a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4a77      	ldr	r2, [pc, #476]	; (80061bc <HAL_UART_IRQHandler+0x354>)
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fd fb63 	bl	80036b2 <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d016      	beq.n	8006020 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00e      	b.n	8006020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8f0 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00a      	b.n	8006020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8ec 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e006      	b.n	8006020 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8e8 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800601e:	e0c4      	b.n	80061aa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	bf00      	nop
    return;
 8006022:	e0c2      	b.n	80061aa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	f040 80a2 	bne.w	8006172 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 809c 	beq.w	8006172 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f003 0310 	and.w	r3, r3, #16
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8096 	beq.w	8006172 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	d14f      	bne.n	800610a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006074:	8a3b      	ldrh	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8099 	beq.w	80061ae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006080:	8a3a      	ldrh	r2, [r7, #16]
 8006082:	429a      	cmp	r2, r3
 8006084:	f080 8093 	bcs.w	80061ae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8a3a      	ldrh	r2, [r7, #16]
 800608c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006098:	d02b      	beq.n	80060f2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060a8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060c8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0210 	bic.w	r2, r2, #16
 80060e6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fd fa70 	bl	80035d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f87a 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006108:	e051      	b.n	80061ae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006112:	b29b      	uxth	r3, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d047      	beq.n	80061b2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006122:	8a7b      	ldrh	r3, [r7, #18]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d044      	beq.n	80061b2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006136:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0210 	bic.w	r2, r2, #16
 8006164:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006166:	8a7b      	ldrh	r3, [r7, #18]
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f846 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006170:	e01f      	b.n	80061b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_UART_IRQHandler+0x326>
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f8cf 	bl	800632a <UART_Transmit_IT>
    return;
 800618c:	e012      	b.n	80061b4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00d      	beq.n	80061b4 <HAL_UART_IRQHandler+0x34c>
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f911 	bl	80063ca <UART_EndTransmit_IT>
    return;
 80061a8:	e004      	b.n	80061b4 <HAL_UART_IRQHandler+0x34c>
    return;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_UART_IRQHandler+0x34c>
      return;
 80061b2:	bf00      	nop
  }
}
 80061b4:	3728      	adds	r7, #40	; 0x28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	08006303 	.word	0x08006303

080061c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006224:	e02c      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d028      	beq.n	8006280 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <UART_WaitOnFlagUntilTimeout+0x30>
 8006234:	f7fd f88c 	bl	8003350 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	429a      	cmp	r2, r3
 8006242:	d21d      	bcs.n	8006280 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006252:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695a      	ldr	r2, [r3, #20]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e00f      	b.n	80062a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	429a      	cmp	r2, r3
 800629c:	d0c3      	beq.n	8006226 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0201 	bic.w	r2, r2, #1
 80062ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d107      	bne.n	80062e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0210 	bic.w	r2, r2, #16
 80062e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff ff63 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b21      	cmp	r3, #33	; 0x21
 800633c:	d13e      	bne.n	80063bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d114      	bne.n	8006372 <UART_Transmit_IT+0x48>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d110      	bne.n	8006372 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1c9a      	adds	r2, r3, #2
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	621a      	str	r2, [r3, #32]
 8006370:	e008      	b.n	8006384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1c59      	adds	r1, r3, #1
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6211      	str	r1, [r2, #32]
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29b      	uxth	r3, r3
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4619      	mov	r1, r3
 8006392:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10f      	bne.n	80063b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fee8 	bl	80061c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b22      	cmp	r3, #34	; 0x22
 800640c:	f040 8087 	bne.w	800651e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006418:	d117      	bne.n	800644a <UART_Receive_IT+0x50>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d113      	bne.n	800644a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006438:	b29a      	uxth	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	1c9a      	adds	r2, r3, #2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
 8006448:	e026      	b.n	8006498 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645c:	d007      	beq.n	800646e <UART_Receive_IT+0x74>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <UART_Receive_IT+0x82>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e008      	b.n	800648e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006488:	b2da      	uxtb	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4619      	mov	r1, r3
 80064a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d136      	bne.n	800651a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0220 	bic.w	r2, r2, #32
 80064ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695a      	ldr	r2, [r3, #20]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10e      	bne.n	800650a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0210 	bic.w	r2, r2, #16
 80064fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fe7a 	bl	80061fc <HAL_UARTEx_RxEventCallback>
 8006508:	e002      	b.n	8006510 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fe62 	bl	80061d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	e002      	b.n	8006520 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e000      	b.n	8006520 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800651e:	2302      	movs	r3, #2
  }
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	b09f      	sub	sp, #124	; 0x7c
 800652e:	af00      	add	r7, sp, #0
 8006530:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	68d9      	ldr	r1, [r3, #12]
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	ea40 0301 	orr.w	r3, r0, r1
 8006548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800654a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	431a      	orrs	r2, r3
 8006554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	431a      	orrs	r2, r3
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	4313      	orrs	r3, r2
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800656c:	f021 010c 	bic.w	r1, r1, #12
 8006570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006576:	430b      	orrs	r3, r1
 8006578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800657a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006586:	6999      	ldr	r1, [r3, #24]
 8006588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	ea40 0301 	orr.w	r3, r0, r1
 8006590:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4bc5      	ldr	r3, [pc, #788]	; (80068ac <UART_SetConfig+0x384>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d004      	beq.n	80065a6 <UART_SetConfig+0x7e>
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4bc3      	ldr	r3, [pc, #780]	; (80068b0 <UART_SetConfig+0x388>)
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d103      	bne.n	80065ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a6:	f7fe fe65 	bl	8005274 <HAL_RCC_GetPCLK2Freq>
 80065aa:	6778      	str	r0, [r7, #116]	; 0x74
 80065ac:	e002      	b.n	80065b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7fe fe4d 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 80065b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065bc:	f040 80b6 	bne.w	800672c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c2:	461c      	mov	r4, r3
 80065c4:	f04f 0500 	mov.w	r5, #0
 80065c8:	4622      	mov	r2, r4
 80065ca:	462b      	mov	r3, r5
 80065cc:	1891      	adds	r1, r2, r2
 80065ce:	6439      	str	r1, [r7, #64]	; 0x40
 80065d0:	415b      	adcs	r3, r3
 80065d2:	647b      	str	r3, [r7, #68]	; 0x44
 80065d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065d8:	1912      	adds	r2, r2, r4
 80065da:	eb45 0303 	adc.w	r3, r5, r3
 80065de:	f04f 0000 	mov.w	r0, #0
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	00d9      	lsls	r1, r3, #3
 80065e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ec:	00d0      	lsls	r0, r2, #3
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	1911      	adds	r1, r2, r4
 80065f4:	6639      	str	r1, [r7, #96]	; 0x60
 80065f6:	416b      	adcs	r3, r5
 80065f8:	667b      	str	r3, [r7, #100]	; 0x64
 80065fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	461a      	mov	r2, r3
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	1891      	adds	r1, r2, r2
 8006606:	63b9      	str	r1, [r7, #56]	; 0x38
 8006608:	415b      	adcs	r3, r3
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006610:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006614:	f7fa fad0 	bl	8000bb8 <__aeabi_uldivmod>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4ba5      	ldr	r3, [pc, #660]	; (80068b4 <UART_SetConfig+0x38c>)
 800661e:	fba3 2302 	umull	r2, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	011e      	lsls	r6, r3, #4
 8006626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006628:	461c      	mov	r4, r3
 800662a:	f04f 0500 	mov.w	r5, #0
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	1891      	adds	r1, r2, r2
 8006634:	6339      	str	r1, [r7, #48]	; 0x30
 8006636:	415b      	adcs	r3, r3
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800663e:	1912      	adds	r2, r2, r4
 8006640:	eb45 0303 	adc.w	r3, r5, r3
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	00d9      	lsls	r1, r3, #3
 800664e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006652:	00d0      	lsls	r0, r2, #3
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	1911      	adds	r1, r2, r4
 800665a:	65b9      	str	r1, [r7, #88]	; 0x58
 800665c:	416b      	adcs	r3, r5
 800665e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	1891      	adds	r1, r2, r2
 800666c:	62b9      	str	r1, [r7, #40]	; 0x28
 800666e:	415b      	adcs	r3, r3
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006676:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800667a:	f7fa fa9d 	bl	8000bb8 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4b8c      	ldr	r3, [pc, #560]	; (80068b4 <UART_SetConfig+0x38c>)
 8006684:	fba3 1302 	umull	r1, r3, r3, r2
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	2164      	movs	r1, #100	; 0x64
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	3332      	adds	r3, #50	; 0x32
 8006696:	4a87      	ldr	r2, [pc, #540]	; (80068b4 <UART_SetConfig+0x38c>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066a4:	441e      	add	r6, r3
 80066a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a8:	4618      	mov	r0, r3
 80066aa:	f04f 0100 	mov.w	r1, #0
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	1894      	adds	r4, r2, r2
 80066b4:	623c      	str	r4, [r7, #32]
 80066b6:	415b      	adcs	r3, r3
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066be:	1812      	adds	r2, r2, r0
 80066c0:	eb41 0303 	adc.w	r3, r1, r3
 80066c4:	f04f 0400 	mov.w	r4, #0
 80066c8:	f04f 0500 	mov.w	r5, #0
 80066cc:	00dd      	lsls	r5, r3, #3
 80066ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066d2:	00d4      	lsls	r4, r2, #3
 80066d4:	4622      	mov	r2, r4
 80066d6:	462b      	mov	r3, r5
 80066d8:	1814      	adds	r4, r2, r0
 80066da:	653c      	str	r4, [r7, #80]	; 0x50
 80066dc:	414b      	adcs	r3, r1
 80066de:	657b      	str	r3, [r7, #84]	; 0x54
 80066e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	1891      	adds	r1, r2, r2
 80066ec:	61b9      	str	r1, [r7, #24]
 80066ee:	415b      	adcs	r3, r3
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066fa:	f7fa fa5d 	bl	8000bb8 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b6c      	ldr	r3, [pc, #432]	; (80068b4 <UART_SetConfig+0x38c>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	; 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	3332      	adds	r3, #50	; 0x32
 8006716:	4a67      	ldr	r2, [pc, #412]	; (80068b4 <UART_SetConfig+0x38c>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 0207 	and.w	r2, r3, #7
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4432      	add	r2, r6
 8006728:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800672a:	e0b9      	b.n	80068a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800672c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672e:	461c      	mov	r4, r3
 8006730:	f04f 0500 	mov.w	r5, #0
 8006734:	4622      	mov	r2, r4
 8006736:	462b      	mov	r3, r5
 8006738:	1891      	adds	r1, r2, r2
 800673a:	6139      	str	r1, [r7, #16]
 800673c:	415b      	adcs	r3, r3
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006744:	1912      	adds	r2, r2, r4
 8006746:	eb45 0303 	adc.w	r3, r5, r3
 800674a:	f04f 0000 	mov.w	r0, #0
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	00d9      	lsls	r1, r3, #3
 8006754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006758:	00d0      	lsls	r0, r2, #3
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	eb12 0804 	adds.w	r8, r2, r4
 8006762:	eb43 0905 	adc.w	r9, r3, r5
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	008b      	lsls	r3, r1, #2
 800677a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800677e:	0082      	lsls	r2, r0, #2
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa fa18 	bl	8000bb8 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4b49      	ldr	r3, [pc, #292]	; (80068b4 <UART_SetConfig+0x38c>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	011e      	lsls	r6, r3, #4
 8006796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006798:	4618      	mov	r0, r3
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	1894      	adds	r4, r2, r2
 80067a4:	60bc      	str	r4, [r7, #8]
 80067a6:	415b      	adcs	r3, r3
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067ae:	1812      	adds	r2, r2, r0
 80067b0:	eb41 0303 	adc.w	r3, r1, r3
 80067b4:	f04f 0400 	mov.w	r4, #0
 80067b8:	f04f 0500 	mov.w	r5, #0
 80067bc:	00dd      	lsls	r5, r3, #3
 80067be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067c2:	00d4      	lsls	r4, r2, #3
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	1814      	adds	r4, r2, r0
 80067ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80067cc:	414b      	adcs	r3, r1
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	008b      	lsls	r3, r1, #2
 80067e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067e8:	0082      	lsls	r2, r0, #2
 80067ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80067ee:	f7fa f9e3 	bl	8000bb8 <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4b2f      	ldr	r3, [pc, #188]	; (80068b4 <UART_SetConfig+0x38c>)
 80067f8:	fba3 1302 	umull	r1, r3, r3, r2
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	2164      	movs	r1, #100	; 0x64
 8006800:	fb01 f303 	mul.w	r3, r1, r3
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	3332      	adds	r3, #50	; 0x32
 800680a:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <UART_SetConfig+0x38c>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006816:	441e      	add	r6, r3
 8006818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681a:	4618      	mov	r0, r3
 800681c:	f04f 0100 	mov.w	r1, #0
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	1894      	adds	r4, r2, r2
 8006826:	603c      	str	r4, [r7, #0]
 8006828:	415b      	adcs	r3, r3
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	1812      	adds	r2, r2, r0
 8006832:	eb41 0303 	adc.w	r3, r1, r3
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	f04f 0500 	mov.w	r5, #0
 800683e:	00dd      	lsls	r5, r3, #3
 8006840:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006844:	00d4      	lsls	r4, r2, #3
 8006846:	4622      	mov	r2, r4
 8006848:	462b      	mov	r3, r5
 800684a:	eb12 0a00 	adds.w	sl, r2, r0
 800684e:	eb43 0b01 	adc.w	fp, r3, r1
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	f04f 0100 	mov.w	r1, #0
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	008b      	lsls	r3, r1, #2
 8006866:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800686a:	0082      	lsls	r2, r0, #2
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	f7fa f9a2 	bl	8000bb8 <__aeabi_uldivmod>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <UART_SetConfig+0x38c>)
 800687a:	fba3 1302 	umull	r1, r3, r3, r2
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	2164      	movs	r1, #100	; 0x64
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	3332      	adds	r3, #50	; 0x32
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <UART_SetConfig+0x38c>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	f003 020f 	and.w	r2, r3, #15
 8006898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4432      	add	r2, r6
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	377c      	adds	r7, #124	; 0x7c
 80068a4:	46bd      	mov	sp, r7
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	bf00      	nop
 80068ac:	40011000 	.word	0x40011000
 80068b0:	40011400 	.word	0x40011400
 80068b4:	51eb851f 	.word	0x51eb851f

080068b8 <__errno>:
 80068b8:	4b01      	ldr	r3, [pc, #4]	; (80068c0 <__errno+0x8>)
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000024 	.word	0x20000024

080068c4 <__libc_init_array>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	4d0d      	ldr	r5, [pc, #52]	; (80068fc <__libc_init_array+0x38>)
 80068c8:	4c0d      	ldr	r4, [pc, #52]	; (8006900 <__libc_init_array+0x3c>)
 80068ca:	1b64      	subs	r4, r4, r5
 80068cc:	10a4      	asrs	r4, r4, #2
 80068ce:	2600      	movs	r6, #0
 80068d0:	42a6      	cmp	r6, r4
 80068d2:	d109      	bne.n	80068e8 <__libc_init_array+0x24>
 80068d4:	4d0b      	ldr	r5, [pc, #44]	; (8006904 <__libc_init_array+0x40>)
 80068d6:	4c0c      	ldr	r4, [pc, #48]	; (8006908 <__libc_init_array+0x44>)
 80068d8:	f002 fecc 	bl	8009674 <_init>
 80068dc:	1b64      	subs	r4, r4, r5
 80068de:	10a4      	asrs	r4, r4, #2
 80068e0:	2600      	movs	r6, #0
 80068e2:	42a6      	cmp	r6, r4
 80068e4:	d105      	bne.n	80068f2 <__libc_init_array+0x2e>
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ec:	4798      	blx	r3
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7ee      	b.n	80068d0 <__libc_init_array+0xc>
 80068f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f6:	4798      	blx	r3
 80068f8:	3601      	adds	r6, #1
 80068fa:	e7f2      	b.n	80068e2 <__libc_init_array+0x1e>
 80068fc:	0800c4cc 	.word	0x0800c4cc
 8006900:	0800c4cc 	.word	0x0800c4cc
 8006904:	0800c4cc 	.word	0x0800c4cc
 8006908:	0800c4d0 	.word	0x0800c4d0

0800690c <memset>:
 800690c:	4402      	add	r2, r0
 800690e:	4603      	mov	r3, r0
 8006910:	4293      	cmp	r3, r2
 8006912:	d100      	bne.n	8006916 <memset+0xa>
 8006914:	4770      	bx	lr
 8006916:	f803 1b01 	strb.w	r1, [r3], #1
 800691a:	e7f9      	b.n	8006910 <memset+0x4>

0800691c <__cvt>:
 800691c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	ec55 4b10 	vmov	r4, r5, d0
 8006924:	2d00      	cmp	r5, #0
 8006926:	460e      	mov	r6, r1
 8006928:	4619      	mov	r1, r3
 800692a:	462b      	mov	r3, r5
 800692c:	bfbb      	ittet	lt
 800692e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006932:	461d      	movlt	r5, r3
 8006934:	2300      	movge	r3, #0
 8006936:	232d      	movlt	r3, #45	; 0x2d
 8006938:	700b      	strb	r3, [r1, #0]
 800693a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800693c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006940:	4691      	mov	r9, r2
 8006942:	f023 0820 	bic.w	r8, r3, #32
 8006946:	bfbc      	itt	lt
 8006948:	4622      	movlt	r2, r4
 800694a:	4614      	movlt	r4, r2
 800694c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006950:	d005      	beq.n	800695e <__cvt+0x42>
 8006952:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006956:	d100      	bne.n	800695a <__cvt+0x3e>
 8006958:	3601      	adds	r6, #1
 800695a:	2102      	movs	r1, #2
 800695c:	e000      	b.n	8006960 <__cvt+0x44>
 800695e:	2103      	movs	r1, #3
 8006960:	ab03      	add	r3, sp, #12
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	ab02      	add	r3, sp, #8
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	ec45 4b10 	vmov	d0, r4, r5
 800696c:	4653      	mov	r3, sl
 800696e:	4632      	mov	r2, r6
 8006970:	f000 fd02 	bl	8007378 <_dtoa_r>
 8006974:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006978:	4607      	mov	r7, r0
 800697a:	d102      	bne.n	8006982 <__cvt+0x66>
 800697c:	f019 0f01 	tst.w	r9, #1
 8006980:	d022      	beq.n	80069c8 <__cvt+0xac>
 8006982:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006986:	eb07 0906 	add.w	r9, r7, r6
 800698a:	d110      	bne.n	80069ae <__cvt+0x92>
 800698c:	783b      	ldrb	r3, [r7, #0]
 800698e:	2b30      	cmp	r3, #48	; 0x30
 8006990:	d10a      	bne.n	80069a8 <__cvt+0x8c>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f7fa f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800699e:	b918      	cbnz	r0, 80069a8 <__cvt+0x8c>
 80069a0:	f1c6 0601 	rsb	r6, r6, #1
 80069a4:	f8ca 6000 	str.w	r6, [sl]
 80069a8:	f8da 3000 	ldr.w	r3, [sl]
 80069ac:	4499      	add	r9, r3
 80069ae:	2200      	movs	r2, #0
 80069b0:	2300      	movs	r3, #0
 80069b2:	4620      	mov	r0, r4
 80069b4:	4629      	mov	r1, r5
 80069b6:	f7fa f88f 	bl	8000ad8 <__aeabi_dcmpeq>
 80069ba:	b108      	cbz	r0, 80069c0 <__cvt+0xa4>
 80069bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80069c0:	2230      	movs	r2, #48	; 0x30
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	454b      	cmp	r3, r9
 80069c6:	d307      	bcc.n	80069d8 <__cvt+0xbc>
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069cc:	1bdb      	subs	r3, r3, r7
 80069ce:	4638      	mov	r0, r7
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	b004      	add	sp, #16
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	1c59      	adds	r1, r3, #1
 80069da:	9103      	str	r1, [sp, #12]
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	e7f0      	b.n	80069c2 <__cvt+0xa6>

080069e0 <__exponent>:
 80069e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e2:	4603      	mov	r3, r0
 80069e4:	2900      	cmp	r1, #0
 80069e6:	bfb8      	it	lt
 80069e8:	4249      	neglt	r1, r1
 80069ea:	f803 2b02 	strb.w	r2, [r3], #2
 80069ee:	bfb4      	ite	lt
 80069f0:	222d      	movlt	r2, #45	; 0x2d
 80069f2:	222b      	movge	r2, #43	; 0x2b
 80069f4:	2909      	cmp	r1, #9
 80069f6:	7042      	strb	r2, [r0, #1]
 80069f8:	dd2a      	ble.n	8006a50 <__exponent+0x70>
 80069fa:	f10d 0407 	add.w	r4, sp, #7
 80069fe:	46a4      	mov	ip, r4
 8006a00:	270a      	movs	r7, #10
 8006a02:	46a6      	mov	lr, r4
 8006a04:	460a      	mov	r2, r1
 8006a06:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a0a:	fb07 1516 	mls	r5, r7, r6, r1
 8006a0e:	3530      	adds	r5, #48	; 0x30
 8006a10:	2a63      	cmp	r2, #99	; 0x63
 8006a12:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	dcf1      	bgt.n	8006a02 <__exponent+0x22>
 8006a1e:	3130      	adds	r1, #48	; 0x30
 8006a20:	f1ae 0502 	sub.w	r5, lr, #2
 8006a24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a28:	1c44      	adds	r4, r0, #1
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	4561      	cmp	r1, ip
 8006a2e:	d30a      	bcc.n	8006a46 <__exponent+0x66>
 8006a30:	f10d 0209 	add.w	r2, sp, #9
 8006a34:	eba2 020e 	sub.w	r2, r2, lr
 8006a38:	4565      	cmp	r5, ip
 8006a3a:	bf88      	it	hi
 8006a3c:	2200      	movhi	r2, #0
 8006a3e:	4413      	add	r3, r2
 8006a40:	1a18      	subs	r0, r3, r0
 8006a42:	b003      	add	sp, #12
 8006a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006a4e:	e7ed      	b.n	8006a2c <__exponent+0x4c>
 8006a50:	2330      	movs	r3, #48	; 0x30
 8006a52:	3130      	adds	r1, #48	; 0x30
 8006a54:	7083      	strb	r3, [r0, #2]
 8006a56:	70c1      	strb	r1, [r0, #3]
 8006a58:	1d03      	adds	r3, r0, #4
 8006a5a:	e7f1      	b.n	8006a40 <__exponent+0x60>

08006a5c <_printf_float>:
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	ed2d 8b02 	vpush	{d8}
 8006a64:	b08d      	sub	sp, #52	; 0x34
 8006a66:	460c      	mov	r4, r1
 8006a68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a6c:	4616      	mov	r6, r2
 8006a6e:	461f      	mov	r7, r3
 8006a70:	4605      	mov	r5, r0
 8006a72:	f001 fb63 	bl	800813c <_localeconv_r>
 8006a76:	f8d0 a000 	ldr.w	sl, [r0]
 8006a7a:	4650      	mov	r0, sl
 8006a7c:	f7f9 fbb0 	bl	80001e0 <strlen>
 8006a80:	2300      	movs	r3, #0
 8006a82:	930a      	str	r3, [sp, #40]	; 0x28
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a90:	3307      	adds	r3, #7
 8006a92:	f023 0307 	bic.w	r3, r3, #7
 8006a96:	f103 0208 	add.w	r2, r3, #8
 8006a9a:	f8c8 2000 	str.w	r2, [r8]
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006aa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006aaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006aae:	9307      	str	r3, [sp, #28]
 8006ab0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ab4:	ee08 0a10 	vmov	s16, r0
 8006ab8:	4b9f      	ldr	r3, [pc, #636]	; (8006d38 <_printf_float+0x2dc>)
 8006aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006abe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac2:	f7fa f83b 	bl	8000b3c <__aeabi_dcmpun>
 8006ac6:	bb88      	cbnz	r0, 8006b2c <_printf_float+0xd0>
 8006ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006acc:	4b9a      	ldr	r3, [pc, #616]	; (8006d38 <_printf_float+0x2dc>)
 8006ace:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad2:	f7fa f815 	bl	8000b00 <__aeabi_dcmple>
 8006ad6:	bb48      	cbnz	r0, 8006b2c <_printf_float+0xd0>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	4640      	mov	r0, r8
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f7fa f804 	bl	8000aec <__aeabi_dcmplt>
 8006ae4:	b110      	cbz	r0, 8006aec <_printf_float+0x90>
 8006ae6:	232d      	movs	r3, #45	; 0x2d
 8006ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aec:	4b93      	ldr	r3, [pc, #588]	; (8006d3c <_printf_float+0x2e0>)
 8006aee:	4894      	ldr	r0, [pc, #592]	; (8006d40 <_printf_float+0x2e4>)
 8006af0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006af4:	bf94      	ite	ls
 8006af6:	4698      	movls	r8, r3
 8006af8:	4680      	movhi	r8, r0
 8006afa:	2303      	movs	r3, #3
 8006afc:	6123      	str	r3, [r4, #16]
 8006afe:	9b05      	ldr	r3, [sp, #20]
 8006b00:	f023 0204 	bic.w	r2, r3, #4
 8006b04:	6022      	str	r2, [r4, #0]
 8006b06:	f04f 0900 	mov.w	r9, #0
 8006b0a:	9700      	str	r7, [sp, #0]
 8006b0c:	4633      	mov	r3, r6
 8006b0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b10:	4621      	mov	r1, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 f9d8 	bl	8006ec8 <_printf_common>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f040 8090 	bne.w	8006c3e <_printf_float+0x1e2>
 8006b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b22:	b00d      	add	sp, #52	; 0x34
 8006b24:	ecbd 8b02 	vpop	{d8}
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	4649      	mov	r1, r9
 8006b34:	f7fa f802 	bl	8000b3c <__aeabi_dcmpun>
 8006b38:	b140      	cbz	r0, 8006b4c <_printf_float+0xf0>
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	bfbc      	itt	lt
 8006b40:	232d      	movlt	r3, #45	; 0x2d
 8006b42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b46:	487f      	ldr	r0, [pc, #508]	; (8006d44 <_printf_float+0x2e8>)
 8006b48:	4b7f      	ldr	r3, [pc, #508]	; (8006d48 <_printf_float+0x2ec>)
 8006b4a:	e7d1      	b.n	8006af0 <_printf_float+0x94>
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b52:	9206      	str	r2, [sp, #24]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	d13f      	bne.n	8006bd8 <_printf_float+0x17c>
 8006b58:	2306      	movs	r3, #6
 8006b5a:	6063      	str	r3, [r4, #4]
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b64:	2300      	movs	r3, #0
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	ab0a      	add	r3, sp, #40	; 0x28
 8006b6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b6e:	ab09      	add	r3, sp, #36	; 0x24
 8006b70:	ec49 8b10 	vmov	d0, r8, r9
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	6022      	str	r2, [r4, #0]
 8006b78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f7ff fecd 	bl	800691c <__cvt>
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b86:	2b47      	cmp	r3, #71	; 0x47
 8006b88:	4680      	mov	r8, r0
 8006b8a:	d108      	bne.n	8006b9e <_printf_float+0x142>
 8006b8c:	1cc8      	adds	r0, r1, #3
 8006b8e:	db02      	blt.n	8006b96 <_printf_float+0x13a>
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	4299      	cmp	r1, r3
 8006b94:	dd41      	ble.n	8006c1a <_printf_float+0x1be>
 8006b96:	f1ab 0b02 	sub.w	fp, fp, #2
 8006b9a:	fa5f fb8b 	uxtb.w	fp, fp
 8006b9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ba2:	d820      	bhi.n	8006be6 <_printf_float+0x18a>
 8006ba4:	3901      	subs	r1, #1
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bac:	9109      	str	r1, [sp, #36]	; 0x24
 8006bae:	f7ff ff17 	bl	80069e0 <__exponent>
 8006bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bb4:	1813      	adds	r3, r2, r0
 8006bb6:	2a01      	cmp	r2, #1
 8006bb8:	4681      	mov	r9, r0
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	dc02      	bgt.n	8006bc4 <_printf_float+0x168>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	07d2      	lsls	r2, r2, #31
 8006bc2:	d501      	bpl.n	8006bc8 <_printf_float+0x16c>
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d09c      	beq.n	8006b0a <_printf_float+0xae>
 8006bd0:	232d      	movs	r3, #45	; 0x2d
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd6:	e798      	b.n	8006b0a <_printf_float+0xae>
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	2a47      	cmp	r2, #71	; 0x47
 8006bdc:	d1be      	bne.n	8006b5c <_printf_float+0x100>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1bc      	bne.n	8006b5c <_printf_float+0x100>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e7b9      	b.n	8006b5a <_printf_float+0xfe>
 8006be6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bea:	d118      	bne.n	8006c1e <_printf_float+0x1c2>
 8006bec:	2900      	cmp	r1, #0
 8006bee:	6863      	ldr	r3, [r4, #4]
 8006bf0:	dd0b      	ble.n	8006c0a <_printf_float+0x1ae>
 8006bf2:	6121      	str	r1, [r4, #16]
 8006bf4:	b913      	cbnz	r3, 8006bfc <_printf_float+0x1a0>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d0      	lsls	r0, r2, #31
 8006bfa:	d502      	bpl.n	8006c02 <_printf_float+0x1a6>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	440b      	add	r3, r1
 8006c00:	6123      	str	r3, [r4, #16]
 8006c02:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c04:	f04f 0900 	mov.w	r9, #0
 8006c08:	e7de      	b.n	8006bc8 <_printf_float+0x16c>
 8006c0a:	b913      	cbnz	r3, 8006c12 <_printf_float+0x1b6>
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	07d2      	lsls	r2, r2, #31
 8006c10:	d501      	bpl.n	8006c16 <_printf_float+0x1ba>
 8006c12:	3302      	adds	r3, #2
 8006c14:	e7f4      	b.n	8006c00 <_printf_float+0x1a4>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e7f2      	b.n	8006c00 <_printf_float+0x1a4>
 8006c1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	4299      	cmp	r1, r3
 8006c22:	db05      	blt.n	8006c30 <_printf_float+0x1d4>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	6121      	str	r1, [r4, #16]
 8006c28:	07d8      	lsls	r0, r3, #31
 8006c2a:	d5ea      	bpl.n	8006c02 <_printf_float+0x1a6>
 8006c2c:	1c4b      	adds	r3, r1, #1
 8006c2e:	e7e7      	b.n	8006c00 <_printf_float+0x1a4>
 8006c30:	2900      	cmp	r1, #0
 8006c32:	bfd4      	ite	le
 8006c34:	f1c1 0202 	rsble	r2, r1, #2
 8006c38:	2201      	movgt	r2, #1
 8006c3a:	4413      	add	r3, r2
 8006c3c:	e7e0      	b.n	8006c00 <_printf_float+0x1a4>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	055a      	lsls	r2, r3, #21
 8006c42:	d407      	bmi.n	8006c54 <_printf_float+0x1f8>
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	4642      	mov	r2, r8
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d12c      	bne.n	8006cac <_printf_float+0x250>
 8006c52:	e764      	b.n	8006b1e <_printf_float+0xc2>
 8006c54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c58:	f240 80e0 	bls.w	8006e1c <_printf_float+0x3c0>
 8006c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c60:	2200      	movs	r2, #0
 8006c62:	2300      	movs	r3, #0
 8006c64:	f7f9 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d034      	beq.n	8006cd6 <_printf_float+0x27a>
 8006c6c:	4a37      	ldr	r2, [pc, #220]	; (8006d4c <_printf_float+0x2f0>)
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f af51 	beq.w	8006b1e <_printf_float+0xc2>
 8006c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c80:	429a      	cmp	r2, r3
 8006c82:	db02      	blt.n	8006c8a <_printf_float+0x22e>
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	07d8      	lsls	r0, r3, #31
 8006c88:	d510      	bpl.n	8006cac <_printf_float+0x250>
 8006c8a:	ee18 3a10 	vmov	r3, s16
 8006c8e:	4652      	mov	r2, sl
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	f43f af41 	beq.w	8006b1e <_printf_float+0xc2>
 8006c9c:	f04f 0800 	mov.w	r8, #0
 8006ca0:	f104 091a 	add.w	r9, r4, #26
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	4543      	cmp	r3, r8
 8006caa:	dc09      	bgt.n	8006cc0 <_printf_float+0x264>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	079b      	lsls	r3, r3, #30
 8006cb0:	f100 8105 	bmi.w	8006ebe <_printf_float+0x462>
 8006cb4:	68e0      	ldr	r0, [r4, #12]
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cb8:	4298      	cmp	r0, r3
 8006cba:	bfb8      	it	lt
 8006cbc:	4618      	movlt	r0, r3
 8006cbe:	e730      	b.n	8006b22 <_printf_float+0xc6>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	464a      	mov	r2, r9
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f43f af27 	beq.w	8006b1e <_printf_float+0xc2>
 8006cd0:	f108 0801 	add.w	r8, r8, #1
 8006cd4:	e7e6      	b.n	8006ca4 <_printf_float+0x248>
 8006cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dc39      	bgt.n	8006d50 <_printf_float+0x2f4>
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <_printf_float+0x2f0>)
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	47b8      	blx	r7
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	f43f af19 	beq.w	8006b1e <_printf_float+0xc2>
 8006cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	d102      	bne.n	8006cfa <_printf_float+0x29e>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	07d9      	lsls	r1, r3, #31
 8006cf8:	d5d8      	bpl.n	8006cac <_printf_float+0x250>
 8006cfa:	ee18 3a10 	vmov	r3, s16
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af09 	beq.w	8006b1e <_printf_float+0xc2>
 8006d0c:	f04f 0900 	mov.w	r9, #0
 8006d10:	f104 0a1a 	add.w	sl, r4, #26
 8006d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d16:	425b      	negs	r3, r3
 8006d18:	454b      	cmp	r3, r9
 8006d1a:	dc01      	bgt.n	8006d20 <_printf_float+0x2c4>
 8006d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d1e:	e792      	b.n	8006c46 <_printf_float+0x1ea>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4652      	mov	r2, sl
 8006d24:	4631      	mov	r1, r6
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b8      	blx	r7
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	f43f aef7 	beq.w	8006b1e <_printf_float+0xc2>
 8006d30:	f109 0901 	add.w	r9, r9, #1
 8006d34:	e7ee      	b.n	8006d14 <_printf_float+0x2b8>
 8006d36:	bf00      	nop
 8006d38:	7fefffff 	.word	0x7fefffff
 8006d3c:	0800c0e4 	.word	0x0800c0e4
 8006d40:	0800c0e8 	.word	0x0800c0e8
 8006d44:	0800c0f0 	.word	0x0800c0f0
 8006d48:	0800c0ec 	.word	0x0800c0ec
 8006d4c:	0800c0f4 	.word	0x0800c0f4
 8006d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d54:	429a      	cmp	r2, r3
 8006d56:	bfa8      	it	ge
 8006d58:	461a      	movge	r2, r3
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	4691      	mov	r9, r2
 8006d5e:	dc37      	bgt.n	8006dd0 <_printf_float+0x374>
 8006d60:	f04f 0b00 	mov.w	fp, #0
 8006d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d68:	f104 021a 	add.w	r2, r4, #26
 8006d6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	eba3 0309 	sub.w	r3, r3, r9
 8006d74:	455b      	cmp	r3, fp
 8006d76:	dc33      	bgt.n	8006de0 <_printf_float+0x384>
 8006d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	db3b      	blt.n	8006df8 <_printf_float+0x39c>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	07da      	lsls	r2, r3, #31
 8006d84:	d438      	bmi.n	8006df8 <_printf_float+0x39c>
 8006d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d88:	9b05      	ldr	r3, [sp, #20]
 8006d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	eba2 0901 	sub.w	r9, r2, r1
 8006d92:	4599      	cmp	r9, r3
 8006d94:	bfa8      	it	ge
 8006d96:	4699      	movge	r9, r3
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	dc35      	bgt.n	8006e0a <_printf_float+0x3ae>
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da6:	f104 0a1a 	add.w	sl, r4, #26
 8006daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	eba3 0309 	sub.w	r3, r3, r9
 8006db4:	4543      	cmp	r3, r8
 8006db6:	f77f af79 	ble.w	8006cac <_printf_float+0x250>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b8      	blx	r7
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f43f aeaa 	beq.w	8006b1e <_printf_float+0xc2>
 8006dca:	f108 0801 	add.w	r8, r8, #1
 8006dce:	e7ec      	b.n	8006daa <_printf_float+0x34e>
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d1c0      	bne.n	8006d60 <_printf_float+0x304>
 8006dde:	e69e      	b.n	8006b1e <_printf_float+0xc2>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	9205      	str	r2, [sp, #20]
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f ae97 	beq.w	8006b1e <_printf_float+0xc2>
 8006df0:	9a05      	ldr	r2, [sp, #20]
 8006df2:	f10b 0b01 	add.w	fp, fp, #1
 8006df6:	e7b9      	b.n	8006d6c <_printf_float+0x310>
 8006df8:	ee18 3a10 	vmov	r3, s16
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	d1be      	bne.n	8006d86 <_printf_float+0x32a>
 8006e08:	e689      	b.n	8006b1e <_printf_float+0xc2>
 8006e0a:	9a05      	ldr	r2, [sp, #20]
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	4442      	add	r2, r8
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	d1c1      	bne.n	8006d9e <_printf_float+0x342>
 8006e1a:	e680      	b.n	8006b1e <_printf_float+0xc2>
 8006e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1e:	2a01      	cmp	r2, #1
 8006e20:	dc01      	bgt.n	8006e26 <_printf_float+0x3ca>
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d538      	bpl.n	8006e98 <_printf_float+0x43c>
 8006e26:	2301      	movs	r3, #1
 8006e28:	4642      	mov	r2, r8
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f ae74 	beq.w	8006b1e <_printf_float+0xc2>
 8006e36:	ee18 3a10 	vmov	r3, s16
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f ae6b 	beq.w	8006b1e <_printf_float+0xc2>
 8006e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f7f9 fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e54:	b9d8      	cbnz	r0, 8006e8e <_printf_float+0x432>
 8006e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e58:	f108 0201 	add.w	r2, r8, #1
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	d10e      	bne.n	8006e86 <_printf_float+0x42a>
 8006e68:	e659      	b.n	8006b1e <_printf_float+0xc2>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4652      	mov	r2, sl
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	f43f ae52 	beq.w	8006b1e <_printf_float+0xc2>
 8006e7a:	f108 0801 	add.w	r8, r8, #1
 8006e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e80:	3b01      	subs	r3, #1
 8006e82:	4543      	cmp	r3, r8
 8006e84:	dcf1      	bgt.n	8006e6a <_printf_float+0x40e>
 8006e86:	464b      	mov	r3, r9
 8006e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e8c:	e6dc      	b.n	8006c48 <_printf_float+0x1ec>
 8006e8e:	f04f 0800 	mov.w	r8, #0
 8006e92:	f104 0a1a 	add.w	sl, r4, #26
 8006e96:	e7f2      	b.n	8006e7e <_printf_float+0x422>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	e7df      	b.n	8006e5e <_printf_float+0x402>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	464a      	mov	r2, r9
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f ae38 	beq.w	8006b1e <_printf_float+0xc2>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eb6:	1a5b      	subs	r3, r3, r1
 8006eb8:	4543      	cmp	r3, r8
 8006eba:	dcf0      	bgt.n	8006e9e <_printf_float+0x442>
 8006ebc:	e6fa      	b.n	8006cb4 <_printf_float+0x258>
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	f104 0919 	add.w	r9, r4, #25
 8006ec6:	e7f4      	b.n	8006eb2 <_printf_float+0x456>

08006ec8 <_printf_common>:
 8006ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	4616      	mov	r6, r2
 8006ece:	4699      	mov	r9, r3
 8006ed0:	688a      	ldr	r2, [r1, #8]
 8006ed2:	690b      	ldr	r3, [r1, #16]
 8006ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bfb8      	it	lt
 8006edc:	4613      	movlt	r3, r2
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	b10a      	cbz	r2, 8006eee <_printf_common+0x26>
 8006eea:	3301      	adds	r3, #1
 8006eec:	6033      	str	r3, [r6, #0]
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	0699      	lsls	r1, r3, #26
 8006ef2:	bf42      	ittt	mi
 8006ef4:	6833      	ldrmi	r3, [r6, #0]
 8006ef6:	3302      	addmi	r3, #2
 8006ef8:	6033      	strmi	r3, [r6, #0]
 8006efa:	6825      	ldr	r5, [r4, #0]
 8006efc:	f015 0506 	ands.w	r5, r5, #6
 8006f00:	d106      	bne.n	8006f10 <_printf_common+0x48>
 8006f02:	f104 0a19 	add.w	sl, r4, #25
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	6832      	ldr	r2, [r6, #0]
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	dc26      	bgt.n	8006f5e <_printf_common+0x96>
 8006f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f14:	1e13      	subs	r3, r2, #0
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	bf18      	it	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	0692      	lsls	r2, r2, #26
 8006f1e:	d42b      	bmi.n	8006f78 <_printf_common+0xb0>
 8006f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f24:	4649      	mov	r1, r9
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c0      	blx	r8
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d01e      	beq.n	8006f6c <_printf_common+0xa4>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	68e5      	ldr	r5, [r4, #12]
 8006f32:	6832      	ldr	r2, [r6, #0]
 8006f34:	f003 0306 	and.w	r3, r3, #6
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	bf08      	it	eq
 8006f3c:	1aad      	subeq	r5, r5, r2
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	bf0c      	ite	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	2500      	movne	r5, #0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bfc4      	itt	gt
 8006f4e:	1a9b      	subgt	r3, r3, r2
 8006f50:	18ed      	addgt	r5, r5, r3
 8006f52:	2600      	movs	r6, #0
 8006f54:	341a      	adds	r4, #26
 8006f56:	42b5      	cmp	r5, r6
 8006f58:	d11a      	bne.n	8006f90 <_printf_common+0xc8>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e008      	b.n	8006f70 <_printf_common+0xa8>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4652      	mov	r2, sl
 8006f62:	4649      	mov	r1, r9
 8006f64:	4638      	mov	r0, r7
 8006f66:	47c0      	blx	r8
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d103      	bne.n	8006f74 <_printf_common+0xac>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f74:	3501      	adds	r5, #1
 8006f76:	e7c6      	b.n	8006f06 <_printf_common+0x3e>
 8006f78:	18e1      	adds	r1, r4, r3
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	2030      	movs	r0, #48	; 0x30
 8006f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f82:	4422      	add	r2, r4
 8006f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	e7c7      	b.n	8006f20 <_printf_common+0x58>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4622      	mov	r2, r4
 8006f94:	4649      	mov	r1, r9
 8006f96:	4638      	mov	r0, r7
 8006f98:	47c0      	blx	r8
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d0e6      	beq.n	8006f6c <_printf_common+0xa4>
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7d9      	b.n	8006f56 <_printf_common+0x8e>
	...

08006fa4 <_printf_i>:
 8006fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	4691      	mov	r9, r2
 8006fac:	7e27      	ldrb	r7, [r4, #24]
 8006fae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fb0:	2f78      	cmp	r7, #120	; 0x78
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	469a      	mov	sl, r3
 8006fb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fba:	d807      	bhi.n	8006fcc <_printf_i+0x28>
 8006fbc:	2f62      	cmp	r7, #98	; 0x62
 8006fbe:	d80a      	bhi.n	8006fd6 <_printf_i+0x32>
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	f000 80d8 	beq.w	8007176 <_printf_i+0x1d2>
 8006fc6:	2f58      	cmp	r7, #88	; 0x58
 8006fc8:	f000 80a3 	beq.w	8007112 <_printf_i+0x16e>
 8006fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fd4:	e03a      	b.n	800704c <_printf_i+0xa8>
 8006fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fda:	2b15      	cmp	r3, #21
 8006fdc:	d8f6      	bhi.n	8006fcc <_printf_i+0x28>
 8006fde:	a001      	add	r0, pc, #4	; (adr r0, 8006fe4 <_printf_i+0x40>)
 8006fe0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	08007051 	.word	0x08007051
 8006fec:	08006fcd 	.word	0x08006fcd
 8006ff0:	08006fcd 	.word	0x08006fcd
 8006ff4:	08006fcd 	.word	0x08006fcd
 8006ff8:	08006fcd 	.word	0x08006fcd
 8006ffc:	08007051 	.word	0x08007051
 8007000:	08006fcd 	.word	0x08006fcd
 8007004:	08006fcd 	.word	0x08006fcd
 8007008:	08006fcd 	.word	0x08006fcd
 800700c:	08006fcd 	.word	0x08006fcd
 8007010:	0800715d 	.word	0x0800715d
 8007014:	08007081 	.word	0x08007081
 8007018:	0800713f 	.word	0x0800713f
 800701c:	08006fcd 	.word	0x08006fcd
 8007020:	08006fcd 	.word	0x08006fcd
 8007024:	0800717f 	.word	0x0800717f
 8007028:	08006fcd 	.word	0x08006fcd
 800702c:	08007081 	.word	0x08007081
 8007030:	08006fcd 	.word	0x08006fcd
 8007034:	08006fcd 	.word	0x08006fcd
 8007038:	08007147 	.word	0x08007147
 800703c:	680b      	ldr	r3, [r1, #0]
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	600a      	str	r2, [r1, #0]
 8007044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800704c:	2301      	movs	r3, #1
 800704e:	e0a3      	b.n	8007198 <_printf_i+0x1f4>
 8007050:	6825      	ldr	r5, [r4, #0]
 8007052:	6808      	ldr	r0, [r1, #0]
 8007054:	062e      	lsls	r6, r5, #24
 8007056:	f100 0304 	add.w	r3, r0, #4
 800705a:	d50a      	bpl.n	8007072 <_printf_i+0xce>
 800705c:	6805      	ldr	r5, [r0, #0]
 800705e:	600b      	str	r3, [r1, #0]
 8007060:	2d00      	cmp	r5, #0
 8007062:	da03      	bge.n	800706c <_printf_i+0xc8>
 8007064:	232d      	movs	r3, #45	; 0x2d
 8007066:	426d      	negs	r5, r5
 8007068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800706c:	485e      	ldr	r0, [pc, #376]	; (80071e8 <_printf_i+0x244>)
 800706e:	230a      	movs	r3, #10
 8007070:	e019      	b.n	80070a6 <_printf_i+0x102>
 8007072:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007076:	6805      	ldr	r5, [r0, #0]
 8007078:	600b      	str	r3, [r1, #0]
 800707a:	bf18      	it	ne
 800707c:	b22d      	sxthne	r5, r5
 800707e:	e7ef      	b.n	8007060 <_printf_i+0xbc>
 8007080:	680b      	ldr	r3, [r1, #0]
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	1d18      	adds	r0, r3, #4
 8007086:	6008      	str	r0, [r1, #0]
 8007088:	0628      	lsls	r0, r5, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xec>
 800708c:	681d      	ldr	r5, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0xf2>
 8007090:	0669      	lsls	r1, r5, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xe8>
 8007094:	881d      	ldrh	r5, [r3, #0]
 8007096:	4854      	ldr	r0, [pc, #336]	; (80071e8 <_printf_i+0x244>)
 8007098:	2f6f      	cmp	r7, #111	; 0x6f
 800709a:	bf0c      	ite	eq
 800709c:	2308      	moveq	r3, #8
 800709e:	230a      	movne	r3, #10
 80070a0:	2100      	movs	r1, #0
 80070a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070a6:	6866      	ldr	r6, [r4, #4]
 80070a8:	60a6      	str	r6, [r4, #8]
 80070aa:	2e00      	cmp	r6, #0
 80070ac:	bfa2      	ittt	ge
 80070ae:	6821      	ldrge	r1, [r4, #0]
 80070b0:	f021 0104 	bicge.w	r1, r1, #4
 80070b4:	6021      	strge	r1, [r4, #0]
 80070b6:	b90d      	cbnz	r5, 80070bc <_printf_i+0x118>
 80070b8:	2e00      	cmp	r6, #0
 80070ba:	d04d      	beq.n	8007158 <_printf_i+0x1b4>
 80070bc:	4616      	mov	r6, r2
 80070be:	fbb5 f1f3 	udiv	r1, r5, r3
 80070c2:	fb03 5711 	mls	r7, r3, r1, r5
 80070c6:	5dc7      	ldrb	r7, [r0, r7]
 80070c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070cc:	462f      	mov	r7, r5
 80070ce:	42bb      	cmp	r3, r7
 80070d0:	460d      	mov	r5, r1
 80070d2:	d9f4      	bls.n	80070be <_printf_i+0x11a>
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d10b      	bne.n	80070f0 <_printf_i+0x14c>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	07df      	lsls	r7, r3, #31
 80070dc:	d508      	bpl.n	80070f0 <_printf_i+0x14c>
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	6861      	ldr	r1, [r4, #4]
 80070e2:	4299      	cmp	r1, r3
 80070e4:	bfde      	ittt	le
 80070e6:	2330      	movle	r3, #48	; 0x30
 80070e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070f0:	1b92      	subs	r2, r2, r6
 80070f2:	6122      	str	r2, [r4, #16]
 80070f4:	f8cd a000 	str.w	sl, [sp]
 80070f8:	464b      	mov	r3, r9
 80070fa:	aa03      	add	r2, sp, #12
 80070fc:	4621      	mov	r1, r4
 80070fe:	4640      	mov	r0, r8
 8007100:	f7ff fee2 	bl	8006ec8 <_printf_common>
 8007104:	3001      	adds	r0, #1
 8007106:	d14c      	bne.n	80071a2 <_printf_i+0x1fe>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	b004      	add	sp, #16
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	4835      	ldr	r0, [pc, #212]	; (80071e8 <_printf_i+0x244>)
 8007114:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	680e      	ldr	r6, [r1, #0]
 800711c:	061f      	lsls	r7, r3, #24
 800711e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007122:	600e      	str	r6, [r1, #0]
 8007124:	d514      	bpl.n	8007150 <_printf_i+0x1ac>
 8007126:	07d9      	lsls	r1, r3, #31
 8007128:	bf44      	itt	mi
 800712a:	f043 0320 	orrmi.w	r3, r3, #32
 800712e:	6023      	strmi	r3, [r4, #0]
 8007130:	b91d      	cbnz	r5, 800713a <_printf_i+0x196>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f023 0320 	bic.w	r3, r3, #32
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	2310      	movs	r3, #16
 800713c:	e7b0      	b.n	80070a0 <_printf_i+0xfc>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	f043 0320 	orr.w	r3, r3, #32
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	2378      	movs	r3, #120	; 0x78
 8007148:	4828      	ldr	r0, [pc, #160]	; (80071ec <_printf_i+0x248>)
 800714a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800714e:	e7e3      	b.n	8007118 <_printf_i+0x174>
 8007150:	065e      	lsls	r6, r3, #25
 8007152:	bf48      	it	mi
 8007154:	b2ad      	uxthmi	r5, r5
 8007156:	e7e6      	b.n	8007126 <_printf_i+0x182>
 8007158:	4616      	mov	r6, r2
 800715a:	e7bb      	b.n	80070d4 <_printf_i+0x130>
 800715c:	680b      	ldr	r3, [r1, #0]
 800715e:	6826      	ldr	r6, [r4, #0]
 8007160:	6960      	ldr	r0, [r4, #20]
 8007162:	1d1d      	adds	r5, r3, #4
 8007164:	600d      	str	r5, [r1, #0]
 8007166:	0635      	lsls	r5, r6, #24
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	d501      	bpl.n	8007170 <_printf_i+0x1cc>
 800716c:	6018      	str	r0, [r3, #0]
 800716e:	e002      	b.n	8007176 <_printf_i+0x1d2>
 8007170:	0671      	lsls	r1, r6, #25
 8007172:	d5fb      	bpl.n	800716c <_printf_i+0x1c8>
 8007174:	8018      	strh	r0, [r3, #0]
 8007176:	2300      	movs	r3, #0
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	4616      	mov	r6, r2
 800717c:	e7ba      	b.n	80070f4 <_printf_i+0x150>
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	1d1a      	adds	r2, r3, #4
 8007182:	600a      	str	r2, [r1, #0]
 8007184:	681e      	ldr	r6, [r3, #0]
 8007186:	6862      	ldr	r2, [r4, #4]
 8007188:	2100      	movs	r1, #0
 800718a:	4630      	mov	r0, r6
 800718c:	f7f9 f830 	bl	80001f0 <memchr>
 8007190:	b108      	cbz	r0, 8007196 <_printf_i+0x1f2>
 8007192:	1b80      	subs	r0, r0, r6
 8007194:	6060      	str	r0, [r4, #4]
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	6123      	str	r3, [r4, #16]
 800719a:	2300      	movs	r3, #0
 800719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a0:	e7a8      	b.n	80070f4 <_printf_i+0x150>
 80071a2:	6923      	ldr	r3, [r4, #16]
 80071a4:	4632      	mov	r2, r6
 80071a6:	4649      	mov	r1, r9
 80071a8:	4640      	mov	r0, r8
 80071aa:	47d0      	blx	sl
 80071ac:	3001      	adds	r0, #1
 80071ae:	d0ab      	beq.n	8007108 <_printf_i+0x164>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	079b      	lsls	r3, r3, #30
 80071b4:	d413      	bmi.n	80071de <_printf_i+0x23a>
 80071b6:	68e0      	ldr	r0, [r4, #12]
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	4298      	cmp	r0, r3
 80071bc:	bfb8      	it	lt
 80071be:	4618      	movlt	r0, r3
 80071c0:	e7a4      	b.n	800710c <_printf_i+0x168>
 80071c2:	2301      	movs	r3, #1
 80071c4:	4632      	mov	r2, r6
 80071c6:	4649      	mov	r1, r9
 80071c8:	4640      	mov	r0, r8
 80071ca:	47d0      	blx	sl
 80071cc:	3001      	adds	r0, #1
 80071ce:	d09b      	beq.n	8007108 <_printf_i+0x164>
 80071d0:	3501      	adds	r5, #1
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	9903      	ldr	r1, [sp, #12]
 80071d6:	1a5b      	subs	r3, r3, r1
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dcf2      	bgt.n	80071c2 <_printf_i+0x21e>
 80071dc:	e7eb      	b.n	80071b6 <_printf_i+0x212>
 80071de:	2500      	movs	r5, #0
 80071e0:	f104 0619 	add.w	r6, r4, #25
 80071e4:	e7f5      	b.n	80071d2 <_printf_i+0x22e>
 80071e6:	bf00      	nop
 80071e8:	0800c0f6 	.word	0x0800c0f6
 80071ec:	0800c107 	.word	0x0800c107

080071f0 <iprintf>:
 80071f0:	b40f      	push	{r0, r1, r2, r3}
 80071f2:	4b0a      	ldr	r3, [pc, #40]	; (800721c <iprintf+0x2c>)
 80071f4:	b513      	push	{r0, r1, r4, lr}
 80071f6:	681c      	ldr	r4, [r3, #0]
 80071f8:	b124      	cbz	r4, 8007204 <iprintf+0x14>
 80071fa:	69a3      	ldr	r3, [r4, #24]
 80071fc:	b913      	cbnz	r3, 8007204 <iprintf+0x14>
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fefe 	bl	8008000 <__sinit>
 8007204:	ab05      	add	r3, sp, #20
 8007206:	9a04      	ldr	r2, [sp, #16]
 8007208:	68a1      	ldr	r1, [r4, #8]
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	4620      	mov	r0, r4
 800720e:	f001 fd71 	bl	8008cf4 <_vfiprintf_r>
 8007212:	b002      	add	sp, #8
 8007214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007218:	b004      	add	sp, #16
 800721a:	4770      	bx	lr
 800721c:	20000024 	.word	0x20000024

08007220 <siprintf>:
 8007220:	b40e      	push	{r1, r2, r3}
 8007222:	b500      	push	{lr}
 8007224:	b09c      	sub	sp, #112	; 0x70
 8007226:	ab1d      	add	r3, sp, #116	; 0x74
 8007228:	9002      	str	r0, [sp, #8]
 800722a:	9006      	str	r0, [sp, #24]
 800722c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007230:	4809      	ldr	r0, [pc, #36]	; (8007258 <siprintf+0x38>)
 8007232:	9107      	str	r1, [sp, #28]
 8007234:	9104      	str	r1, [sp, #16]
 8007236:	4909      	ldr	r1, [pc, #36]	; (800725c <siprintf+0x3c>)
 8007238:	f853 2b04 	ldr.w	r2, [r3], #4
 800723c:	9105      	str	r1, [sp, #20]
 800723e:	6800      	ldr	r0, [r0, #0]
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	a902      	add	r1, sp, #8
 8007244:	f001 fc2c 	bl	8008aa0 <_svfiprintf_r>
 8007248:	9b02      	ldr	r3, [sp, #8]
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	b01c      	add	sp, #112	; 0x70
 8007250:	f85d eb04 	ldr.w	lr, [sp], #4
 8007254:	b003      	add	sp, #12
 8007256:	4770      	bx	lr
 8007258:	20000024 	.word	0x20000024
 800725c:	ffff0208 	.word	0xffff0208

08007260 <quorem>:
 8007260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	6903      	ldr	r3, [r0, #16]
 8007266:	690c      	ldr	r4, [r1, #16]
 8007268:	42a3      	cmp	r3, r4
 800726a:	4607      	mov	r7, r0
 800726c:	f2c0 8081 	blt.w	8007372 <quorem+0x112>
 8007270:	3c01      	subs	r4, #1
 8007272:	f101 0814 	add.w	r8, r1, #20
 8007276:	f100 0514 	add.w	r5, r0, #20
 800727a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007288:	3301      	adds	r3, #1
 800728a:	429a      	cmp	r2, r3
 800728c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007294:	fbb2 f6f3 	udiv	r6, r2, r3
 8007298:	d331      	bcc.n	80072fe <quorem+0x9e>
 800729a:	f04f 0e00 	mov.w	lr, #0
 800729e:	4640      	mov	r0, r8
 80072a0:	46ac      	mov	ip, r5
 80072a2:	46f2      	mov	sl, lr
 80072a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072a8:	b293      	uxth	r3, r2
 80072aa:	fb06 e303 	mla	r3, r6, r3, lr
 80072ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	ebaa 0303 	sub.w	r3, sl, r3
 80072b8:	0c12      	lsrs	r2, r2, #16
 80072ba:	f8dc a000 	ldr.w	sl, [ip]
 80072be:	fb06 e202 	mla	r2, r6, r2, lr
 80072c2:	fa13 f38a 	uxtah	r3, r3, sl
 80072c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072ca:	fa1f fa82 	uxth.w	sl, r2
 80072ce:	f8dc 2000 	ldr.w	r2, [ip]
 80072d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80072d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e0:	4581      	cmp	r9, r0
 80072e2:	f84c 3b04 	str.w	r3, [ip], #4
 80072e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072ea:	d2db      	bcs.n	80072a4 <quorem+0x44>
 80072ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80072f0:	b92b      	cbnz	r3, 80072fe <quorem+0x9e>
 80072f2:	9b01      	ldr	r3, [sp, #4]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	429d      	cmp	r5, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	d32e      	bcc.n	800735a <quorem+0xfa>
 80072fc:	613c      	str	r4, [r7, #16]
 80072fe:	4638      	mov	r0, r7
 8007300:	f001 f9b8 	bl	8008674 <__mcmp>
 8007304:	2800      	cmp	r0, #0
 8007306:	db24      	blt.n	8007352 <quorem+0xf2>
 8007308:	3601      	adds	r6, #1
 800730a:	4628      	mov	r0, r5
 800730c:	f04f 0c00 	mov.w	ip, #0
 8007310:	f858 2b04 	ldr.w	r2, [r8], #4
 8007314:	f8d0 e000 	ldr.w	lr, [r0]
 8007318:	b293      	uxth	r3, r2
 800731a:	ebac 0303 	sub.w	r3, ip, r3
 800731e:	0c12      	lsrs	r2, r2, #16
 8007320:	fa13 f38e 	uxtah	r3, r3, lr
 8007324:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800732c:	b29b      	uxth	r3, r3
 800732e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007332:	45c1      	cmp	r9, r8
 8007334:	f840 3b04 	str.w	r3, [r0], #4
 8007338:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800733c:	d2e8      	bcs.n	8007310 <quorem+0xb0>
 800733e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007346:	b922      	cbnz	r2, 8007352 <quorem+0xf2>
 8007348:	3b04      	subs	r3, #4
 800734a:	429d      	cmp	r5, r3
 800734c:	461a      	mov	r2, r3
 800734e:	d30a      	bcc.n	8007366 <quorem+0x106>
 8007350:	613c      	str	r4, [r7, #16]
 8007352:	4630      	mov	r0, r6
 8007354:	b003      	add	sp, #12
 8007356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	3b04      	subs	r3, #4
 800735e:	2a00      	cmp	r2, #0
 8007360:	d1cc      	bne.n	80072fc <quorem+0x9c>
 8007362:	3c01      	subs	r4, #1
 8007364:	e7c7      	b.n	80072f6 <quorem+0x96>
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	3b04      	subs	r3, #4
 800736a:	2a00      	cmp	r2, #0
 800736c:	d1f0      	bne.n	8007350 <quorem+0xf0>
 800736e:	3c01      	subs	r4, #1
 8007370:	e7eb      	b.n	800734a <quorem+0xea>
 8007372:	2000      	movs	r0, #0
 8007374:	e7ee      	b.n	8007354 <quorem+0xf4>
	...

08007378 <_dtoa_r>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	ed2d 8b02 	vpush	{d8}
 8007380:	ec57 6b10 	vmov	r6, r7, d0
 8007384:	b095      	sub	sp, #84	; 0x54
 8007386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007388:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007392:	4604      	mov	r4, r0
 8007394:	9209      	str	r2, [sp, #36]	; 0x24
 8007396:	930f      	str	r3, [sp, #60]	; 0x3c
 8007398:	b975      	cbnz	r5, 80073b8 <_dtoa_r+0x40>
 800739a:	2010      	movs	r0, #16
 800739c:	f000 fed6 	bl	800814c <malloc>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6260      	str	r0, [r4, #36]	; 0x24
 80073a4:	b920      	cbnz	r0, 80073b0 <_dtoa_r+0x38>
 80073a6:	4bb2      	ldr	r3, [pc, #712]	; (8007670 <_dtoa_r+0x2f8>)
 80073a8:	21ea      	movs	r1, #234	; 0xea
 80073aa:	48b2      	ldr	r0, [pc, #712]	; (8007674 <_dtoa_r+0x2fc>)
 80073ac:	f001 fef8 	bl	80091a0 <__assert_func>
 80073b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073b4:	6005      	str	r5, [r0, #0]
 80073b6:	60c5      	str	r5, [r0, #12]
 80073b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ba:	6819      	ldr	r1, [r3, #0]
 80073bc:	b151      	cbz	r1, 80073d4 <_dtoa_r+0x5c>
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	604a      	str	r2, [r1, #4]
 80073c2:	2301      	movs	r3, #1
 80073c4:	4093      	lsls	r3, r2
 80073c6:	608b      	str	r3, [r1, #8]
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 ff15 	bl	80081f8 <_Bfree>
 80073ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	1e3b      	subs	r3, r7, #0
 80073d6:	bfb9      	ittee	lt
 80073d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073dc:	9303      	strlt	r3, [sp, #12]
 80073de:	2300      	movge	r3, #0
 80073e0:	f8c8 3000 	strge.w	r3, [r8]
 80073e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80073e8:	4ba3      	ldr	r3, [pc, #652]	; (8007678 <_dtoa_r+0x300>)
 80073ea:	bfbc      	itt	lt
 80073ec:	2201      	movlt	r2, #1
 80073ee:	f8c8 2000 	strlt.w	r2, [r8]
 80073f2:	ea33 0309 	bics.w	r3, r3, r9
 80073f6:	d11b      	bne.n	8007430 <_dtoa_r+0xb8>
 80073f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007404:	4333      	orrs	r3, r6
 8007406:	f000 857a 	beq.w	8007efe <_dtoa_r+0xb86>
 800740a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800740c:	b963      	cbnz	r3, 8007428 <_dtoa_r+0xb0>
 800740e:	4b9b      	ldr	r3, [pc, #620]	; (800767c <_dtoa_r+0x304>)
 8007410:	e024      	b.n	800745c <_dtoa_r+0xe4>
 8007412:	4b9b      	ldr	r3, [pc, #620]	; (8007680 <_dtoa_r+0x308>)
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	9800      	ldr	r0, [sp, #0]
 800741e:	b015      	add	sp, #84	; 0x54
 8007420:	ecbd 8b02 	vpop	{d8}
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	4b94      	ldr	r3, [pc, #592]	; (800767c <_dtoa_r+0x304>)
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	3303      	adds	r3, #3
 800742e:	e7f3      	b.n	8007418 <_dtoa_r+0xa0>
 8007430:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007434:	2200      	movs	r2, #0
 8007436:	ec51 0b17 	vmov	r0, r1, d7
 800743a:	2300      	movs	r3, #0
 800743c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007440:	f7f9 fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007444:	4680      	mov	r8, r0
 8007446:	b158      	cbz	r0, 8007460 <_dtoa_r+0xe8>
 8007448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800744a:	2301      	movs	r3, #1
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8551 	beq.w	8007ef8 <_dtoa_r+0xb80>
 8007456:	488b      	ldr	r0, [pc, #556]	; (8007684 <_dtoa_r+0x30c>)
 8007458:	6018      	str	r0, [r3, #0]
 800745a:	1e43      	subs	r3, r0, #1
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	e7dd      	b.n	800741c <_dtoa_r+0xa4>
 8007460:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007464:	aa12      	add	r2, sp, #72	; 0x48
 8007466:	a913      	add	r1, sp, #76	; 0x4c
 8007468:	4620      	mov	r0, r4
 800746a:	f001 f9a7 	bl	80087bc <__d2b>
 800746e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007472:	4683      	mov	fp, r0
 8007474:	2d00      	cmp	r5, #0
 8007476:	d07c      	beq.n	8007572 <_dtoa_r+0x1fa>
 8007478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800747e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007482:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007486:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800748a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800748e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007492:	4b7d      	ldr	r3, [pc, #500]	; (8007688 <_dtoa_r+0x310>)
 8007494:	2200      	movs	r2, #0
 8007496:	4630      	mov	r0, r6
 8007498:	4639      	mov	r1, r7
 800749a:	f7f8 fefd 	bl	8000298 <__aeabi_dsub>
 800749e:	a36e      	add	r3, pc, #440	; (adr r3, 8007658 <_dtoa_r+0x2e0>)
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	f7f9 f8b0 	bl	8000608 <__aeabi_dmul>
 80074a8:	a36d      	add	r3, pc, #436	; (adr r3, 8007660 <_dtoa_r+0x2e8>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 fef5 	bl	800029c <__adddf3>
 80074b2:	4606      	mov	r6, r0
 80074b4:	4628      	mov	r0, r5
 80074b6:	460f      	mov	r7, r1
 80074b8:	f7f9 f83c 	bl	8000534 <__aeabi_i2d>
 80074bc:	a36a      	add	r3, pc, #424	; (adr r3, 8007668 <_dtoa_r+0x2f0>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f9 f8a1 	bl	8000608 <__aeabi_dmul>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4630      	mov	r0, r6
 80074cc:	4639      	mov	r1, r7
 80074ce:	f7f8 fee5 	bl	800029c <__adddf3>
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	f7f9 fb47 	bl	8000b68 <__aeabi_d2iz>
 80074da:	2200      	movs	r2, #0
 80074dc:	4682      	mov	sl, r0
 80074de:	2300      	movs	r3, #0
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f9 fb02 	bl	8000aec <__aeabi_dcmplt>
 80074e8:	b148      	cbz	r0, 80074fe <_dtoa_r+0x186>
 80074ea:	4650      	mov	r0, sl
 80074ec:	f7f9 f822 	bl	8000534 <__aeabi_i2d>
 80074f0:	4632      	mov	r2, r6
 80074f2:	463b      	mov	r3, r7
 80074f4:	f7f9 faf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80074f8:	b908      	cbnz	r0, 80074fe <_dtoa_r+0x186>
 80074fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074fe:	f1ba 0f16 	cmp.w	sl, #22
 8007502:	d854      	bhi.n	80075ae <_dtoa_r+0x236>
 8007504:	4b61      	ldr	r3, [pc, #388]	; (800768c <_dtoa_r+0x314>)
 8007506:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007512:	f7f9 faeb 	bl	8000aec <__aeabi_dcmplt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d04b      	beq.n	80075b2 <_dtoa_r+0x23a>
 800751a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800751e:	2300      	movs	r3, #0
 8007520:	930e      	str	r3, [sp, #56]	; 0x38
 8007522:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007524:	1b5d      	subs	r5, r3, r5
 8007526:	1e6b      	subs	r3, r5, #1
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	bf43      	ittte	mi
 800752c:	2300      	movmi	r3, #0
 800752e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007532:	9304      	strmi	r3, [sp, #16]
 8007534:	f04f 0800 	movpl.w	r8, #0
 8007538:	f1ba 0f00 	cmp.w	sl, #0
 800753c:	db3b      	blt.n	80075b6 <_dtoa_r+0x23e>
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007544:	4453      	add	r3, sl
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	2300      	movs	r3, #0
 800754a:	9306      	str	r3, [sp, #24]
 800754c:	9b05      	ldr	r3, [sp, #20]
 800754e:	2b09      	cmp	r3, #9
 8007550:	d869      	bhi.n	8007626 <_dtoa_r+0x2ae>
 8007552:	2b05      	cmp	r3, #5
 8007554:	bfc4      	itt	gt
 8007556:	3b04      	subgt	r3, #4
 8007558:	9305      	strgt	r3, [sp, #20]
 800755a:	9b05      	ldr	r3, [sp, #20]
 800755c:	f1a3 0302 	sub.w	r3, r3, #2
 8007560:	bfcc      	ite	gt
 8007562:	2500      	movgt	r5, #0
 8007564:	2501      	movle	r5, #1
 8007566:	2b03      	cmp	r3, #3
 8007568:	d869      	bhi.n	800763e <_dtoa_r+0x2c6>
 800756a:	e8df f003 	tbb	[pc, r3]
 800756e:	4e2c      	.short	0x4e2c
 8007570:	5a4c      	.short	0x5a4c
 8007572:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007576:	441d      	add	r5, r3
 8007578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800757c:	2b20      	cmp	r3, #32
 800757e:	bfc1      	itttt	gt
 8007580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007584:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007588:	fa09 f303 	lslgt.w	r3, r9, r3
 800758c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007590:	bfda      	itte	le
 8007592:	f1c3 0320 	rsble	r3, r3, #32
 8007596:	fa06 f003 	lslle.w	r0, r6, r3
 800759a:	4318      	orrgt	r0, r3
 800759c:	f7f8 ffba 	bl	8000514 <__aeabi_ui2d>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4606      	mov	r6, r0
 80075a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075a8:	3d01      	subs	r5, #1
 80075aa:	9310      	str	r3, [sp, #64]	; 0x40
 80075ac:	e771      	b.n	8007492 <_dtoa_r+0x11a>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7b6      	b.n	8007520 <_dtoa_r+0x1a8>
 80075b2:	900e      	str	r0, [sp, #56]	; 0x38
 80075b4:	e7b5      	b.n	8007522 <_dtoa_r+0x1aa>
 80075b6:	f1ca 0300 	rsb	r3, sl, #0
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	2300      	movs	r3, #0
 80075be:	eba8 080a 	sub.w	r8, r8, sl
 80075c2:	930d      	str	r3, [sp, #52]	; 0x34
 80075c4:	e7c2      	b.n	800754c <_dtoa_r+0x1d4>
 80075c6:	2300      	movs	r3, #0
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dc39      	bgt.n	8007644 <_dtoa_r+0x2cc>
 80075d0:	f04f 0901 	mov.w	r9, #1
 80075d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80075d8:	464b      	mov	r3, r9
 80075da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80075de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075e0:	2200      	movs	r2, #0
 80075e2:	6042      	str	r2, [r0, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	f102 0614 	add.w	r6, r2, #20
 80075ea:	429e      	cmp	r6, r3
 80075ec:	6841      	ldr	r1, [r0, #4]
 80075ee:	d92f      	bls.n	8007650 <_dtoa_r+0x2d8>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fdc1 	bl	8008178 <_Balloc>
 80075f6:	9000      	str	r0, [sp, #0]
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d14b      	bne.n	8007694 <_dtoa_r+0x31c>
 80075fc:	4b24      	ldr	r3, [pc, #144]	; (8007690 <_dtoa_r+0x318>)
 80075fe:	4602      	mov	r2, r0
 8007600:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007604:	e6d1      	b.n	80073aa <_dtoa_r+0x32>
 8007606:	2301      	movs	r3, #1
 8007608:	e7de      	b.n	80075c8 <_dtoa_r+0x250>
 800760a:	2300      	movs	r3, #0
 800760c:	9308      	str	r3, [sp, #32]
 800760e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007610:	eb0a 0903 	add.w	r9, sl, r3
 8007614:	f109 0301 	add.w	r3, r9, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	9301      	str	r3, [sp, #4]
 800761c:	bfb8      	it	lt
 800761e:	2301      	movlt	r3, #1
 8007620:	e7dd      	b.n	80075de <_dtoa_r+0x266>
 8007622:	2301      	movs	r3, #1
 8007624:	e7f2      	b.n	800760c <_dtoa_r+0x294>
 8007626:	2501      	movs	r5, #1
 8007628:	2300      	movs	r3, #0
 800762a:	9305      	str	r3, [sp, #20]
 800762c:	9508      	str	r5, [sp, #32]
 800762e:	f04f 39ff 	mov.w	r9, #4294967295
 8007632:	2200      	movs	r2, #0
 8007634:	f8cd 9004 	str.w	r9, [sp, #4]
 8007638:	2312      	movs	r3, #18
 800763a:	9209      	str	r2, [sp, #36]	; 0x24
 800763c:	e7cf      	b.n	80075de <_dtoa_r+0x266>
 800763e:	2301      	movs	r3, #1
 8007640:	9308      	str	r3, [sp, #32]
 8007642:	e7f4      	b.n	800762e <_dtoa_r+0x2b6>
 8007644:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007648:	f8cd 9004 	str.w	r9, [sp, #4]
 800764c:	464b      	mov	r3, r9
 800764e:	e7c6      	b.n	80075de <_dtoa_r+0x266>
 8007650:	3101      	adds	r1, #1
 8007652:	6041      	str	r1, [r0, #4]
 8007654:	0052      	lsls	r2, r2, #1
 8007656:	e7c6      	b.n	80075e6 <_dtoa_r+0x26e>
 8007658:	636f4361 	.word	0x636f4361
 800765c:	3fd287a7 	.word	0x3fd287a7
 8007660:	8b60c8b3 	.word	0x8b60c8b3
 8007664:	3fc68a28 	.word	0x3fc68a28
 8007668:	509f79fb 	.word	0x509f79fb
 800766c:	3fd34413 	.word	0x3fd34413
 8007670:	0800c125 	.word	0x0800c125
 8007674:	0800c13c 	.word	0x0800c13c
 8007678:	7ff00000 	.word	0x7ff00000
 800767c:	0800c121 	.word	0x0800c121
 8007680:	0800c118 	.word	0x0800c118
 8007684:	0800c0f5 	.word	0x0800c0f5
 8007688:	3ff80000 	.word	0x3ff80000
 800768c:	0800c298 	.word	0x0800c298
 8007690:	0800c19b 	.word	0x0800c19b
 8007694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007696:	9a00      	ldr	r2, [sp, #0]
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	2b0e      	cmp	r3, #14
 800769e:	f200 80ad 	bhi.w	80077fc <_dtoa_r+0x484>
 80076a2:	2d00      	cmp	r5, #0
 80076a4:	f000 80aa 	beq.w	80077fc <_dtoa_r+0x484>
 80076a8:	f1ba 0f00 	cmp.w	sl, #0
 80076ac:	dd36      	ble.n	800771c <_dtoa_r+0x3a4>
 80076ae:	4ac3      	ldr	r2, [pc, #780]	; (80079bc <_dtoa_r+0x644>)
 80076b0:	f00a 030f 	and.w	r3, sl, #15
 80076b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076b8:	ed93 7b00 	vldr	d7, [r3]
 80076bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80076c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80076c4:	eeb0 8a47 	vmov.f32	s16, s14
 80076c8:	eef0 8a67 	vmov.f32	s17, s15
 80076cc:	d016      	beq.n	80076fc <_dtoa_r+0x384>
 80076ce:	4bbc      	ldr	r3, [pc, #752]	; (80079c0 <_dtoa_r+0x648>)
 80076d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076d8:	f7f9 f8c0 	bl	800085c <__aeabi_ddiv>
 80076dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e0:	f007 070f 	and.w	r7, r7, #15
 80076e4:	2503      	movs	r5, #3
 80076e6:	4eb6      	ldr	r6, [pc, #728]	; (80079c0 <_dtoa_r+0x648>)
 80076e8:	b957      	cbnz	r7, 8007700 <_dtoa_r+0x388>
 80076ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ee:	ec53 2b18 	vmov	r2, r3, d8
 80076f2:	f7f9 f8b3 	bl	800085c <__aeabi_ddiv>
 80076f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076fa:	e029      	b.n	8007750 <_dtoa_r+0x3d8>
 80076fc:	2502      	movs	r5, #2
 80076fe:	e7f2      	b.n	80076e6 <_dtoa_r+0x36e>
 8007700:	07f9      	lsls	r1, r7, #31
 8007702:	d508      	bpl.n	8007716 <_dtoa_r+0x39e>
 8007704:	ec51 0b18 	vmov	r0, r1, d8
 8007708:	e9d6 2300 	ldrd	r2, r3, [r6]
 800770c:	f7f8 ff7c 	bl	8000608 <__aeabi_dmul>
 8007710:	ec41 0b18 	vmov	d8, r0, r1
 8007714:	3501      	adds	r5, #1
 8007716:	107f      	asrs	r7, r7, #1
 8007718:	3608      	adds	r6, #8
 800771a:	e7e5      	b.n	80076e8 <_dtoa_r+0x370>
 800771c:	f000 80a6 	beq.w	800786c <_dtoa_r+0x4f4>
 8007720:	f1ca 0600 	rsb	r6, sl, #0
 8007724:	4ba5      	ldr	r3, [pc, #660]	; (80079bc <_dtoa_r+0x644>)
 8007726:	4fa6      	ldr	r7, [pc, #664]	; (80079c0 <_dtoa_r+0x648>)
 8007728:	f006 020f 	and.w	r2, r6, #15
 800772c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007738:	f7f8 ff66 	bl	8000608 <__aeabi_dmul>
 800773c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007740:	1136      	asrs	r6, r6, #4
 8007742:	2300      	movs	r3, #0
 8007744:	2502      	movs	r5, #2
 8007746:	2e00      	cmp	r6, #0
 8007748:	f040 8085 	bne.w	8007856 <_dtoa_r+0x4de>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1d2      	bne.n	80076f6 <_dtoa_r+0x37e>
 8007750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 808c 	beq.w	8007870 <_dtoa_r+0x4f8>
 8007758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800775c:	4b99      	ldr	r3, [pc, #612]	; (80079c4 <_dtoa_r+0x64c>)
 800775e:	2200      	movs	r2, #0
 8007760:	4630      	mov	r0, r6
 8007762:	4639      	mov	r1, r7
 8007764:	f7f9 f9c2 	bl	8000aec <__aeabi_dcmplt>
 8007768:	2800      	cmp	r0, #0
 800776a:	f000 8081 	beq.w	8007870 <_dtoa_r+0x4f8>
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d07d      	beq.n	8007870 <_dtoa_r+0x4f8>
 8007774:	f1b9 0f00 	cmp.w	r9, #0
 8007778:	dd3c      	ble.n	80077f4 <_dtoa_r+0x47c>
 800777a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	2200      	movs	r2, #0
 8007782:	4b91      	ldr	r3, [pc, #580]	; (80079c8 <_dtoa_r+0x650>)
 8007784:	4630      	mov	r0, r6
 8007786:	4639      	mov	r1, r7
 8007788:	f7f8 ff3e 	bl	8000608 <__aeabi_dmul>
 800778c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007790:	3501      	adds	r5, #1
 8007792:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007796:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800779a:	4628      	mov	r0, r5
 800779c:	f7f8 feca 	bl	8000534 <__aeabi_i2d>
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	f7f8 ff30 	bl	8000608 <__aeabi_dmul>
 80077a8:	4b88      	ldr	r3, [pc, #544]	; (80079cc <_dtoa_r+0x654>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	f7f8 fd76 	bl	800029c <__adddf3>
 80077b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80077b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b8:	9303      	str	r3, [sp, #12]
 80077ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d15c      	bne.n	800787a <_dtoa_r+0x502>
 80077c0:	4b83      	ldr	r3, [pc, #524]	; (80079d0 <_dtoa_r+0x658>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f8 fd66 	bl	8000298 <__aeabi_dsub>
 80077cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077d0:	4606      	mov	r6, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	f7f9 f9a8 	bl	8000b28 <__aeabi_dcmpgt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f040 8296 	bne.w	8007d0a <_dtoa_r+0x992>
 80077de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80077e2:	4630      	mov	r0, r6
 80077e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077e8:	4639      	mov	r1, r7
 80077ea:	f7f9 f97f 	bl	8000aec <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f040 8288 	bne.w	8007d04 <_dtoa_r+0x98c>
 80077f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f2c0 8158 	blt.w	8007ab4 <_dtoa_r+0x73c>
 8007804:	f1ba 0f0e 	cmp.w	sl, #14
 8007808:	f300 8154 	bgt.w	8007ab4 <_dtoa_r+0x73c>
 800780c:	4b6b      	ldr	r3, [pc, #428]	; (80079bc <_dtoa_r+0x644>)
 800780e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007812:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	f280 80e3 	bge.w	80079e4 <_dtoa_r+0x66c>
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f300 80df 	bgt.w	80079e4 <_dtoa_r+0x66c>
 8007826:	f040 826d 	bne.w	8007d04 <_dtoa_r+0x98c>
 800782a:	4b69      	ldr	r3, [pc, #420]	; (80079d0 <_dtoa_r+0x658>)
 800782c:	2200      	movs	r2, #0
 800782e:	4640      	mov	r0, r8
 8007830:	4649      	mov	r1, r9
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800783a:	f7f9 f96b 	bl	8000b14 <__aeabi_dcmpge>
 800783e:	9e01      	ldr	r6, [sp, #4]
 8007840:	4637      	mov	r7, r6
 8007842:	2800      	cmp	r0, #0
 8007844:	f040 8243 	bne.w	8007cce <_dtoa_r+0x956>
 8007848:	9d00      	ldr	r5, [sp, #0]
 800784a:	2331      	movs	r3, #49	; 0x31
 800784c:	f805 3b01 	strb.w	r3, [r5], #1
 8007850:	f10a 0a01 	add.w	sl, sl, #1
 8007854:	e23f      	b.n	8007cd6 <_dtoa_r+0x95e>
 8007856:	07f2      	lsls	r2, r6, #31
 8007858:	d505      	bpl.n	8007866 <_dtoa_r+0x4ee>
 800785a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800785e:	f7f8 fed3 	bl	8000608 <__aeabi_dmul>
 8007862:	3501      	adds	r5, #1
 8007864:	2301      	movs	r3, #1
 8007866:	1076      	asrs	r6, r6, #1
 8007868:	3708      	adds	r7, #8
 800786a:	e76c      	b.n	8007746 <_dtoa_r+0x3ce>
 800786c:	2502      	movs	r5, #2
 800786e:	e76f      	b.n	8007750 <_dtoa_r+0x3d8>
 8007870:	9b01      	ldr	r3, [sp, #4]
 8007872:	f8cd a01c 	str.w	sl, [sp, #28]
 8007876:	930c      	str	r3, [sp, #48]	; 0x30
 8007878:	e78d      	b.n	8007796 <_dtoa_r+0x41e>
 800787a:	9900      	ldr	r1, [sp, #0]
 800787c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800787e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007880:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <_dtoa_r+0x644>)
 8007882:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007886:	4401      	add	r1, r0
 8007888:	9102      	str	r1, [sp, #8]
 800788a:	9908      	ldr	r1, [sp, #32]
 800788c:	eeb0 8a47 	vmov.f32	s16, s14
 8007890:	eef0 8a67 	vmov.f32	s17, s15
 8007894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007898:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800789c:	2900      	cmp	r1, #0
 800789e:	d045      	beq.n	800792c <_dtoa_r+0x5b4>
 80078a0:	494c      	ldr	r1, [pc, #304]	; (80079d4 <_dtoa_r+0x65c>)
 80078a2:	2000      	movs	r0, #0
 80078a4:	f7f8 ffda 	bl	800085c <__aeabi_ddiv>
 80078a8:	ec53 2b18 	vmov	r2, r3, d8
 80078ac:	f7f8 fcf4 	bl	8000298 <__aeabi_dsub>
 80078b0:	9d00      	ldr	r5, [sp, #0]
 80078b2:	ec41 0b18 	vmov	d8, r0, r1
 80078b6:	4639      	mov	r1, r7
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7f9 f955 	bl	8000b68 <__aeabi_d2iz>
 80078be:	900c      	str	r0, [sp, #48]	; 0x30
 80078c0:	f7f8 fe38 	bl	8000534 <__aeabi_i2d>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4630      	mov	r0, r6
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f8 fce4 	bl	8000298 <__aeabi_dsub>
 80078d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d2:	3330      	adds	r3, #48	; 0x30
 80078d4:	f805 3b01 	strb.w	r3, [r5], #1
 80078d8:	ec53 2b18 	vmov	r2, r3, d8
 80078dc:	4606      	mov	r6, r0
 80078de:	460f      	mov	r7, r1
 80078e0:	f7f9 f904 	bl	8000aec <__aeabi_dcmplt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d165      	bne.n	80079b4 <_dtoa_r+0x63c>
 80078e8:	4632      	mov	r2, r6
 80078ea:	463b      	mov	r3, r7
 80078ec:	4935      	ldr	r1, [pc, #212]	; (80079c4 <_dtoa_r+0x64c>)
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f8 fcd2 	bl	8000298 <__aeabi_dsub>
 80078f4:	ec53 2b18 	vmov	r2, r3, d8
 80078f8:	f7f9 f8f8 	bl	8000aec <__aeabi_dcmplt>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	f040 80b9 	bne.w	8007a74 <_dtoa_r+0x6fc>
 8007902:	9b02      	ldr	r3, [sp, #8]
 8007904:	429d      	cmp	r5, r3
 8007906:	f43f af75 	beq.w	80077f4 <_dtoa_r+0x47c>
 800790a:	4b2f      	ldr	r3, [pc, #188]	; (80079c8 <_dtoa_r+0x650>)
 800790c:	ec51 0b18 	vmov	r0, r1, d8
 8007910:	2200      	movs	r2, #0
 8007912:	f7f8 fe79 	bl	8000608 <__aeabi_dmul>
 8007916:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <_dtoa_r+0x650>)
 8007918:	ec41 0b18 	vmov	d8, r0, r1
 800791c:	2200      	movs	r2, #0
 800791e:	4630      	mov	r0, r6
 8007920:	4639      	mov	r1, r7
 8007922:	f7f8 fe71 	bl	8000608 <__aeabi_dmul>
 8007926:	4606      	mov	r6, r0
 8007928:	460f      	mov	r7, r1
 800792a:	e7c4      	b.n	80078b6 <_dtoa_r+0x53e>
 800792c:	ec51 0b17 	vmov	r0, r1, d7
 8007930:	f7f8 fe6a 	bl	8000608 <__aeabi_dmul>
 8007934:	9b02      	ldr	r3, [sp, #8]
 8007936:	9d00      	ldr	r5, [sp, #0]
 8007938:	930c      	str	r3, [sp, #48]	; 0x30
 800793a:	ec41 0b18 	vmov	d8, r0, r1
 800793e:	4639      	mov	r1, r7
 8007940:	4630      	mov	r0, r6
 8007942:	f7f9 f911 	bl	8000b68 <__aeabi_d2iz>
 8007946:	9011      	str	r0, [sp, #68]	; 0x44
 8007948:	f7f8 fdf4 	bl	8000534 <__aeabi_i2d>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f8 fca0 	bl	8000298 <__aeabi_dsub>
 8007958:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800795a:	3330      	adds	r3, #48	; 0x30
 800795c:	f805 3b01 	strb.w	r3, [r5], #1
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	429d      	cmp	r5, r3
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	d134      	bne.n	80079d8 <_dtoa_r+0x660>
 800796e:	4b19      	ldr	r3, [pc, #100]	; (80079d4 <_dtoa_r+0x65c>)
 8007970:	ec51 0b18 	vmov	r0, r1, d8
 8007974:	f7f8 fc92 	bl	800029c <__adddf3>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f9 f8d2 	bl	8000b28 <__aeabi_dcmpgt>
 8007984:	2800      	cmp	r0, #0
 8007986:	d175      	bne.n	8007a74 <_dtoa_r+0x6fc>
 8007988:	ec53 2b18 	vmov	r2, r3, d8
 800798c:	4911      	ldr	r1, [pc, #68]	; (80079d4 <_dtoa_r+0x65c>)
 800798e:	2000      	movs	r0, #0
 8007990:	f7f8 fc82 	bl	8000298 <__aeabi_dsub>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4630      	mov	r0, r6
 800799a:	4639      	mov	r1, r7
 800799c:	f7f9 f8a6 	bl	8000aec <__aeabi_dcmplt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f43f af27 	beq.w	80077f4 <_dtoa_r+0x47c>
 80079a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a8:	1e6b      	subs	r3, r5, #1
 80079aa:	930c      	str	r3, [sp, #48]	; 0x30
 80079ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079b0:	2b30      	cmp	r3, #48	; 0x30
 80079b2:	d0f8      	beq.n	80079a6 <_dtoa_r+0x62e>
 80079b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80079b8:	e04a      	b.n	8007a50 <_dtoa_r+0x6d8>
 80079ba:	bf00      	nop
 80079bc:	0800c298 	.word	0x0800c298
 80079c0:	0800c270 	.word	0x0800c270
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	40240000 	.word	0x40240000
 80079cc:	401c0000 	.word	0x401c0000
 80079d0:	40140000 	.word	0x40140000
 80079d4:	3fe00000 	.word	0x3fe00000
 80079d8:	4baf      	ldr	r3, [pc, #700]	; (8007c98 <_dtoa_r+0x920>)
 80079da:	f7f8 fe15 	bl	8000608 <__aeabi_dmul>
 80079de:	4606      	mov	r6, r0
 80079e0:	460f      	mov	r7, r1
 80079e2:	e7ac      	b.n	800793e <_dtoa_r+0x5c6>
 80079e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079e8:	9d00      	ldr	r5, [sp, #0]
 80079ea:	4642      	mov	r2, r8
 80079ec:	464b      	mov	r3, r9
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f8 ff33 	bl	800085c <__aeabi_ddiv>
 80079f6:	f7f9 f8b7 	bl	8000b68 <__aeabi_d2iz>
 80079fa:	9002      	str	r0, [sp, #8]
 80079fc:	f7f8 fd9a 	bl	8000534 <__aeabi_i2d>
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	f7f8 fe00 	bl	8000608 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fc42 	bl	8000298 <__aeabi_dsub>
 8007a14:	9e02      	ldr	r6, [sp, #8]
 8007a16:	9f01      	ldr	r7, [sp, #4]
 8007a18:	3630      	adds	r6, #48	; 0x30
 8007a1a:	f805 6b01 	strb.w	r6, [r5], #1
 8007a1e:	9e00      	ldr	r6, [sp, #0]
 8007a20:	1bae      	subs	r6, r5, r6
 8007a22:	42b7      	cmp	r7, r6
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	d137      	bne.n	8007a9a <_dtoa_r+0x722>
 8007a2a:	f7f8 fc37 	bl	800029c <__adddf3>
 8007a2e:	4642      	mov	r2, r8
 8007a30:	464b      	mov	r3, r9
 8007a32:	4606      	mov	r6, r0
 8007a34:	460f      	mov	r7, r1
 8007a36:	f7f9 f877 	bl	8000b28 <__aeabi_dcmpgt>
 8007a3a:	b9c8      	cbnz	r0, 8007a70 <_dtoa_r+0x6f8>
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	464b      	mov	r3, r9
 8007a40:	4630      	mov	r0, r6
 8007a42:	4639      	mov	r1, r7
 8007a44:	f7f9 f848 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a48:	b110      	cbz	r0, 8007a50 <_dtoa_r+0x6d8>
 8007a4a:	9b02      	ldr	r3, [sp, #8]
 8007a4c:	07d9      	lsls	r1, r3, #31
 8007a4e:	d40f      	bmi.n	8007a70 <_dtoa_r+0x6f8>
 8007a50:	4620      	mov	r0, r4
 8007a52:	4659      	mov	r1, fp
 8007a54:	f000 fbd0 	bl	80081f8 <_Bfree>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	702b      	strb	r3, [r5, #0]
 8007a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a5e:	f10a 0001 	add.w	r0, sl, #1
 8007a62:	6018      	str	r0, [r3, #0]
 8007a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f43f acd8 	beq.w	800741c <_dtoa_r+0xa4>
 8007a6c:	601d      	str	r5, [r3, #0]
 8007a6e:	e4d5      	b.n	800741c <_dtoa_r+0xa4>
 8007a70:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a74:	462b      	mov	r3, r5
 8007a76:	461d      	mov	r5, r3
 8007a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a7c:	2a39      	cmp	r2, #57	; 0x39
 8007a7e:	d108      	bne.n	8007a92 <_dtoa_r+0x71a>
 8007a80:	9a00      	ldr	r2, [sp, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d1f7      	bne.n	8007a76 <_dtoa_r+0x6fe>
 8007a86:	9a07      	ldr	r2, [sp, #28]
 8007a88:	9900      	ldr	r1, [sp, #0]
 8007a8a:	3201      	adds	r2, #1
 8007a8c:	9207      	str	r2, [sp, #28]
 8007a8e:	2230      	movs	r2, #48	; 0x30
 8007a90:	700a      	strb	r2, [r1, #0]
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	3201      	adds	r2, #1
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	e78c      	b.n	80079b4 <_dtoa_r+0x63c>
 8007a9a:	4b7f      	ldr	r3, [pc, #508]	; (8007c98 <_dtoa_r+0x920>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f7f8 fdb3 	bl	8000608 <__aeabi_dmul>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	f7f9 f815 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d09b      	beq.n	80079ea <_dtoa_r+0x672>
 8007ab2:	e7cd      	b.n	8007a50 <_dtoa_r+0x6d8>
 8007ab4:	9a08      	ldr	r2, [sp, #32]
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	f000 80c4 	beq.w	8007c44 <_dtoa_r+0x8cc>
 8007abc:	9a05      	ldr	r2, [sp, #20]
 8007abe:	2a01      	cmp	r2, #1
 8007ac0:	f300 80a8 	bgt.w	8007c14 <_dtoa_r+0x89c>
 8007ac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	f000 80a0 	beq.w	8007c0c <_dtoa_r+0x894>
 8007acc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ad0:	9e06      	ldr	r6, [sp, #24]
 8007ad2:	4645      	mov	r5, r8
 8007ad4:	9a04      	ldr	r2, [sp, #16]
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	441a      	add	r2, r3
 8007ada:	4620      	mov	r0, r4
 8007adc:	4498      	add	r8, r3
 8007ade:	9204      	str	r2, [sp, #16]
 8007ae0:	f000 fc46 	bl	8008370 <__i2b>
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	2d00      	cmp	r5, #0
 8007ae8:	dd0b      	ble.n	8007b02 <_dtoa_r+0x78a>
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dd08      	ble.n	8007b02 <_dtoa_r+0x78a>
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	bfa8      	it	ge
 8007af6:	462b      	movge	r3, r5
 8007af8:	eba8 0803 	sub.w	r8, r8, r3
 8007afc:	1aed      	subs	r5, r5, r3
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	b1fb      	cbz	r3, 8007b46 <_dtoa_r+0x7ce>
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 809f 	beq.w	8007c4c <_dtoa_r+0x8d4>
 8007b0e:	2e00      	cmp	r6, #0
 8007b10:	dd11      	ble.n	8007b36 <_dtoa_r+0x7be>
 8007b12:	4639      	mov	r1, r7
 8007b14:	4632      	mov	r2, r6
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fce6 	bl	80084e8 <__pow5mult>
 8007b1c:	465a      	mov	r2, fp
 8007b1e:	4601      	mov	r1, r0
 8007b20:	4607      	mov	r7, r0
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fc3a 	bl	800839c <__multiply>
 8007b28:	4659      	mov	r1, fp
 8007b2a:	9007      	str	r0, [sp, #28]
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fb63 	bl	80081f8 <_Bfree>
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	469b      	mov	fp, r3
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	1b9a      	subs	r2, r3, r6
 8007b3a:	d004      	beq.n	8007b46 <_dtoa_r+0x7ce>
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fcd2 	bl	80084e8 <__pow5mult>
 8007b44:	4683      	mov	fp, r0
 8007b46:	2101      	movs	r1, #1
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fc11 	bl	8008370 <__i2b>
 8007b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	4606      	mov	r6, r0
 8007b54:	dd7c      	ble.n	8007c50 <_dtoa_r+0x8d8>
 8007b56:	461a      	mov	r2, r3
 8007b58:	4601      	mov	r1, r0
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fcc4 	bl	80084e8 <__pow5mult>
 8007b60:	9b05      	ldr	r3, [sp, #20]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	4606      	mov	r6, r0
 8007b66:	dd76      	ble.n	8007c56 <_dtoa_r+0x8de>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9306      	str	r3, [sp, #24]
 8007b6c:	6933      	ldr	r3, [r6, #16]
 8007b6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b72:	6918      	ldr	r0, [r3, #16]
 8007b74:	f000 fbac 	bl	80082d0 <__hi0bits>
 8007b78:	f1c0 0020 	rsb	r0, r0, #32
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	4418      	add	r0, r3
 8007b80:	f010 001f 	ands.w	r0, r0, #31
 8007b84:	f000 8086 	beq.w	8007c94 <_dtoa_r+0x91c>
 8007b88:	f1c0 0320 	rsb	r3, r0, #32
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	dd7f      	ble.n	8007c90 <_dtoa_r+0x918>
 8007b90:	f1c0 001c 	rsb	r0, r0, #28
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	4403      	add	r3, r0
 8007b98:	4480      	add	r8, r0
 8007b9a:	4405      	add	r5, r0
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ba2:	dd05      	ble.n	8007bb0 <_dtoa_r+0x838>
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fcf7 	bl	800859c <__lshift>
 8007bae:	4683      	mov	fp, r0
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dd05      	ble.n	8007bc2 <_dtoa_r+0x84a>
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	461a      	mov	r2, r3
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 fcee 	bl	800859c <__lshift>
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d069      	beq.n	8007c9c <_dtoa_r+0x924>
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4658      	mov	r0, fp
 8007bcc:	f000 fd52 	bl	8008674 <__mcmp>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	da63      	bge.n	8007c9c <_dtoa_r+0x924>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4659      	mov	r1, fp
 8007bd8:	220a      	movs	r2, #10
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 fb2e 	bl	800823c <__multadd>
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007be6:	4683      	mov	fp, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 818f 	beq.w	8007f0c <_dtoa_r+0xb94>
 8007bee:	4639      	mov	r1, r7
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	220a      	movs	r2, #10
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fb21 	bl	800823c <__multadd>
 8007bfa:	f1b9 0f00 	cmp.w	r9, #0
 8007bfe:	4607      	mov	r7, r0
 8007c00:	f300 808e 	bgt.w	8007d20 <_dtoa_r+0x9a8>
 8007c04:	9b05      	ldr	r3, [sp, #20]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	dc50      	bgt.n	8007cac <_dtoa_r+0x934>
 8007c0a:	e089      	b.n	8007d20 <_dtoa_r+0x9a8>
 8007c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c12:	e75d      	b.n	8007ad0 <_dtoa_r+0x758>
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	1e5e      	subs	r6, r3, #1
 8007c18:	9b06      	ldr	r3, [sp, #24]
 8007c1a:	42b3      	cmp	r3, r6
 8007c1c:	bfbf      	itttt	lt
 8007c1e:	9b06      	ldrlt	r3, [sp, #24]
 8007c20:	9606      	strlt	r6, [sp, #24]
 8007c22:	1af2      	sublt	r2, r6, r3
 8007c24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007c26:	bfb6      	itet	lt
 8007c28:	189b      	addlt	r3, r3, r2
 8007c2a:	1b9e      	subge	r6, r3, r6
 8007c2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	bfb8      	it	lt
 8007c32:	2600      	movlt	r6, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfb5      	itete	lt
 8007c38:	eba8 0503 	sublt.w	r5, r8, r3
 8007c3c:	9b01      	ldrge	r3, [sp, #4]
 8007c3e:	2300      	movlt	r3, #0
 8007c40:	4645      	movge	r5, r8
 8007c42:	e747      	b.n	8007ad4 <_dtoa_r+0x75c>
 8007c44:	9e06      	ldr	r6, [sp, #24]
 8007c46:	9f08      	ldr	r7, [sp, #32]
 8007c48:	4645      	mov	r5, r8
 8007c4a:	e74c      	b.n	8007ae6 <_dtoa_r+0x76e>
 8007c4c:	9a06      	ldr	r2, [sp, #24]
 8007c4e:	e775      	b.n	8007b3c <_dtoa_r+0x7c4>
 8007c50:	9b05      	ldr	r3, [sp, #20]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	dc18      	bgt.n	8007c88 <_dtoa_r+0x910>
 8007c56:	9b02      	ldr	r3, [sp, #8]
 8007c58:	b9b3      	cbnz	r3, 8007c88 <_dtoa_r+0x910>
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c60:	b9a3      	cbnz	r3, 8007c8c <_dtoa_r+0x914>
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c68:	0d1b      	lsrs	r3, r3, #20
 8007c6a:	051b      	lsls	r3, r3, #20
 8007c6c:	b12b      	cbz	r3, 8007c7a <_dtoa_r+0x902>
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	3301      	adds	r3, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	f108 0801 	add.w	r8, r8, #1
 8007c78:	2301      	movs	r3, #1
 8007c7a:	9306      	str	r3, [sp, #24]
 8007c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f47f af74 	bne.w	8007b6c <_dtoa_r+0x7f4>
 8007c84:	2001      	movs	r0, #1
 8007c86:	e779      	b.n	8007b7c <_dtoa_r+0x804>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	e7f6      	b.n	8007c7a <_dtoa_r+0x902>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	e7f4      	b.n	8007c7a <_dtoa_r+0x902>
 8007c90:	d085      	beq.n	8007b9e <_dtoa_r+0x826>
 8007c92:	4618      	mov	r0, r3
 8007c94:	301c      	adds	r0, #28
 8007c96:	e77d      	b.n	8007b94 <_dtoa_r+0x81c>
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dc38      	bgt.n	8007d14 <_dtoa_r+0x99c>
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	dd35      	ble.n	8007d14 <_dtoa_r+0x99c>
 8007ca8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007cac:	f1b9 0f00 	cmp.w	r9, #0
 8007cb0:	d10d      	bne.n	8007cce <_dtoa_r+0x956>
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	2205      	movs	r2, #5
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fabf 	bl	800823c <__multadd>
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	4658      	mov	r0, fp
 8007cc4:	f000 fcd6 	bl	8008674 <__mcmp>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	f73f adbd 	bgt.w	8007848 <_dtoa_r+0x4d0>
 8007cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd0:	9d00      	ldr	r5, [sp, #0]
 8007cd2:	ea6f 0a03 	mvn.w	sl, r3
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f000 fa8b 	bl	80081f8 <_Bfree>
 8007ce2:	2f00      	cmp	r7, #0
 8007ce4:	f43f aeb4 	beq.w	8007a50 <_dtoa_r+0x6d8>
 8007ce8:	f1b8 0f00 	cmp.w	r8, #0
 8007cec:	d005      	beq.n	8007cfa <_dtoa_r+0x982>
 8007cee:	45b8      	cmp	r8, r7
 8007cf0:	d003      	beq.n	8007cfa <_dtoa_r+0x982>
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fa7f 	bl	80081f8 <_Bfree>
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 fa7b 	bl	80081f8 <_Bfree>
 8007d02:	e6a5      	b.n	8007a50 <_dtoa_r+0x6d8>
 8007d04:	2600      	movs	r6, #0
 8007d06:	4637      	mov	r7, r6
 8007d08:	e7e1      	b.n	8007cce <_dtoa_r+0x956>
 8007d0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d10:	4637      	mov	r7, r6
 8007d12:	e599      	b.n	8007848 <_dtoa_r+0x4d0>
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80fd 	beq.w	8007f1a <_dtoa_r+0xba2>
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	dd05      	ble.n	8007d30 <_dtoa_r+0x9b8>
 8007d24:	4639      	mov	r1, r7
 8007d26:	462a      	mov	r2, r5
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 fc37 	bl	800859c <__lshift>
 8007d2e:	4607      	mov	r7, r0
 8007d30:	9b06      	ldr	r3, [sp, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d05c      	beq.n	8007df0 <_dtoa_r+0xa78>
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fa1d 	bl	8008178 <_Balloc>
 8007d3e:	4605      	mov	r5, r0
 8007d40:	b928      	cbnz	r0, 8007d4e <_dtoa_r+0x9d6>
 8007d42:	4b80      	ldr	r3, [pc, #512]	; (8007f44 <_dtoa_r+0xbcc>)
 8007d44:	4602      	mov	r2, r0
 8007d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d4a:	f7ff bb2e 	b.w	80073aa <_dtoa_r+0x32>
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	3202      	adds	r2, #2
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	f107 010c 	add.w	r1, r7, #12
 8007d58:	300c      	adds	r0, #12
 8007d5a:	f000 f9ff 	bl	800815c <memcpy>
 8007d5e:	2201      	movs	r2, #1
 8007d60:	4629      	mov	r1, r5
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 fc1a 	bl	800859c <__lshift>
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	444b      	add	r3, r9
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	9b02      	ldr	r3, [sp, #8]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	46b8      	mov	r8, r7
 8007d7c:	9306      	str	r3, [sp, #24]
 8007d7e:	4607      	mov	r7, r0
 8007d80:	9b01      	ldr	r3, [sp, #4]
 8007d82:	4631      	mov	r1, r6
 8007d84:	3b01      	subs	r3, #1
 8007d86:	4658      	mov	r0, fp
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	f7ff fa69 	bl	8007260 <quorem>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	3330      	adds	r3, #48	; 0x30
 8007d92:	9004      	str	r0, [sp, #16]
 8007d94:	4641      	mov	r1, r8
 8007d96:	4658      	mov	r0, fp
 8007d98:	9308      	str	r3, [sp, #32]
 8007d9a:	f000 fc6b 	bl	8008674 <__mcmp>
 8007d9e:	463a      	mov	r2, r7
 8007da0:	4681      	mov	r9, r0
 8007da2:	4631      	mov	r1, r6
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fc81 	bl	80086ac <__mdiff>
 8007daa:	68c2      	ldr	r2, [r0, #12]
 8007dac:	9b08      	ldr	r3, [sp, #32]
 8007dae:	4605      	mov	r5, r0
 8007db0:	bb02      	cbnz	r2, 8007df4 <_dtoa_r+0xa7c>
 8007db2:	4601      	mov	r1, r0
 8007db4:	4658      	mov	r0, fp
 8007db6:	f000 fc5d 	bl	8008674 <__mcmp>
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007dc6:	f000 fa17 	bl	80081f8 <_Bfree>
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dce:	9d01      	ldr	r5, [sp, #4]
 8007dd0:	ea43 0102 	orr.w	r1, r3, r2
 8007dd4:	9b06      	ldr	r3, [sp, #24]
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	d10d      	bne.n	8007df8 <_dtoa_r+0xa80>
 8007ddc:	2b39      	cmp	r3, #57	; 0x39
 8007dde:	d029      	beq.n	8007e34 <_dtoa_r+0xabc>
 8007de0:	f1b9 0f00 	cmp.w	r9, #0
 8007de4:	dd01      	ble.n	8007dea <_dtoa_r+0xa72>
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	3331      	adds	r3, #49	; 0x31
 8007dea:	9a02      	ldr	r2, [sp, #8]
 8007dec:	7013      	strb	r3, [r2, #0]
 8007dee:	e774      	b.n	8007cda <_dtoa_r+0x962>
 8007df0:	4638      	mov	r0, r7
 8007df2:	e7b9      	b.n	8007d68 <_dtoa_r+0x9f0>
 8007df4:	2201      	movs	r2, #1
 8007df6:	e7e2      	b.n	8007dbe <_dtoa_r+0xa46>
 8007df8:	f1b9 0f00 	cmp.w	r9, #0
 8007dfc:	db06      	blt.n	8007e0c <_dtoa_r+0xa94>
 8007dfe:	9905      	ldr	r1, [sp, #20]
 8007e00:	ea41 0909 	orr.w	r9, r1, r9
 8007e04:	9906      	ldr	r1, [sp, #24]
 8007e06:	ea59 0101 	orrs.w	r1, r9, r1
 8007e0a:	d120      	bne.n	8007e4e <_dtoa_r+0xad6>
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	ddec      	ble.n	8007dea <_dtoa_r+0xa72>
 8007e10:	4659      	mov	r1, fp
 8007e12:	2201      	movs	r2, #1
 8007e14:	4620      	mov	r0, r4
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	f000 fbc0 	bl	800859c <__lshift>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4683      	mov	fp, r0
 8007e20:	f000 fc28 	bl	8008674 <__mcmp>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	dc02      	bgt.n	8007e30 <_dtoa_r+0xab8>
 8007e2a:	d1de      	bne.n	8007dea <_dtoa_r+0xa72>
 8007e2c:	07da      	lsls	r2, r3, #31
 8007e2e:	d5dc      	bpl.n	8007dea <_dtoa_r+0xa72>
 8007e30:	2b39      	cmp	r3, #57	; 0x39
 8007e32:	d1d8      	bne.n	8007de6 <_dtoa_r+0xa6e>
 8007e34:	9a02      	ldr	r2, [sp, #8]
 8007e36:	2339      	movs	r3, #57	; 0x39
 8007e38:	7013      	strb	r3, [r2, #0]
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	461d      	mov	r5, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e44:	2a39      	cmp	r2, #57	; 0x39
 8007e46:	d050      	beq.n	8007eea <_dtoa_r+0xb72>
 8007e48:	3201      	adds	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	e745      	b.n	8007cda <_dtoa_r+0x962>
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	dd03      	ble.n	8007e5a <_dtoa_r+0xae2>
 8007e52:	2b39      	cmp	r3, #57	; 0x39
 8007e54:	d0ee      	beq.n	8007e34 <_dtoa_r+0xabc>
 8007e56:	3301      	adds	r3, #1
 8007e58:	e7c7      	b.n	8007dea <_dtoa_r+0xa72>
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	9907      	ldr	r1, [sp, #28]
 8007e5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e62:	428a      	cmp	r2, r1
 8007e64:	d02a      	beq.n	8007ebc <_dtoa_r+0xb44>
 8007e66:	4659      	mov	r1, fp
 8007e68:	2300      	movs	r3, #0
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 f9e5 	bl	800823c <__multadd>
 8007e72:	45b8      	cmp	r8, r7
 8007e74:	4683      	mov	fp, r0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	f04f 020a 	mov.w	r2, #10
 8007e7e:	4641      	mov	r1, r8
 8007e80:	4620      	mov	r0, r4
 8007e82:	d107      	bne.n	8007e94 <_dtoa_r+0xb1c>
 8007e84:	f000 f9da 	bl	800823c <__multadd>
 8007e88:	4680      	mov	r8, r0
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	e775      	b.n	8007d80 <_dtoa_r+0xa08>
 8007e94:	f000 f9d2 	bl	800823c <__multadd>
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	220a      	movs	r2, #10
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 f9cb 	bl	800823c <__multadd>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	e7f0      	b.n	8007e8c <_dtoa_r+0xb14>
 8007eaa:	f1b9 0f00 	cmp.w	r9, #0
 8007eae:	9a00      	ldr	r2, [sp, #0]
 8007eb0:	bfcc      	ite	gt
 8007eb2:	464d      	movgt	r5, r9
 8007eb4:	2501      	movle	r5, #1
 8007eb6:	4415      	add	r5, r2
 8007eb8:	f04f 0800 	mov.w	r8, #0
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	f000 fb6a 	bl	800859c <__lshift>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4683      	mov	fp, r0
 8007ecc:	f000 fbd2 	bl	8008674 <__mcmp>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dcb2      	bgt.n	8007e3a <_dtoa_r+0xac2>
 8007ed4:	d102      	bne.n	8007edc <_dtoa_r+0xb64>
 8007ed6:	9b01      	ldr	r3, [sp, #4]
 8007ed8:	07db      	lsls	r3, r3, #31
 8007eda:	d4ae      	bmi.n	8007e3a <_dtoa_r+0xac2>
 8007edc:	462b      	mov	r3, r5
 8007ede:	461d      	mov	r5, r3
 8007ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee4:	2a30      	cmp	r2, #48	; 0x30
 8007ee6:	d0fa      	beq.n	8007ede <_dtoa_r+0xb66>
 8007ee8:	e6f7      	b.n	8007cda <_dtoa_r+0x962>
 8007eea:	9a00      	ldr	r2, [sp, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d1a5      	bne.n	8007e3c <_dtoa_r+0xac4>
 8007ef0:	f10a 0a01 	add.w	sl, sl, #1
 8007ef4:	2331      	movs	r3, #49	; 0x31
 8007ef6:	e779      	b.n	8007dec <_dtoa_r+0xa74>
 8007ef8:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <_dtoa_r+0xbd0>)
 8007efa:	f7ff baaf 	b.w	800745c <_dtoa_r+0xe4>
 8007efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f47f aa86 	bne.w	8007412 <_dtoa_r+0x9a>
 8007f06:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <_dtoa_r+0xbd4>)
 8007f08:	f7ff baa8 	b.w	800745c <_dtoa_r+0xe4>
 8007f0c:	f1b9 0f00 	cmp.w	r9, #0
 8007f10:	dc03      	bgt.n	8007f1a <_dtoa_r+0xba2>
 8007f12:	9b05      	ldr	r3, [sp, #20]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	f73f aec9 	bgt.w	8007cac <_dtoa_r+0x934>
 8007f1a:	9d00      	ldr	r5, [sp, #0]
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4658      	mov	r0, fp
 8007f20:	f7ff f99e 	bl	8007260 <quorem>
 8007f24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f28:	f805 3b01 	strb.w	r3, [r5], #1
 8007f2c:	9a00      	ldr	r2, [sp, #0]
 8007f2e:	1aaa      	subs	r2, r5, r2
 8007f30:	4591      	cmp	r9, r2
 8007f32:	ddba      	ble.n	8007eaa <_dtoa_r+0xb32>
 8007f34:	4659      	mov	r1, fp
 8007f36:	2300      	movs	r3, #0
 8007f38:	220a      	movs	r2, #10
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f97e 	bl	800823c <__multadd>
 8007f40:	4683      	mov	fp, r0
 8007f42:	e7eb      	b.n	8007f1c <_dtoa_r+0xba4>
 8007f44:	0800c19b 	.word	0x0800c19b
 8007f48:	0800c0f4 	.word	0x0800c0f4
 8007f4c:	0800c118 	.word	0x0800c118

08007f50 <std>:
 8007f50:	2300      	movs	r3, #0
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	e9c0 3300 	strd	r3, r3, [r0]
 8007f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f5e:	6083      	str	r3, [r0, #8]
 8007f60:	8181      	strh	r1, [r0, #12]
 8007f62:	6643      	str	r3, [r0, #100]	; 0x64
 8007f64:	81c2      	strh	r2, [r0, #14]
 8007f66:	6183      	str	r3, [r0, #24]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	305c      	adds	r0, #92	; 0x5c
 8007f6e:	f7fe fccd 	bl	800690c <memset>
 8007f72:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <std+0x38>)
 8007f74:	6263      	str	r3, [r4, #36]	; 0x24
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std+0x3c>)
 8007f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std+0x40>)
 8007f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <std+0x44>)
 8007f80:	6224      	str	r4, [r4, #32]
 8007f82:	6323      	str	r3, [r4, #48]	; 0x30
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	bf00      	nop
 8007f88:	08008f75 	.word	0x08008f75
 8007f8c:	08008f97 	.word	0x08008f97
 8007f90:	08008fcf 	.word	0x08008fcf
 8007f94:	08008ff3 	.word	0x08008ff3

08007f98 <_cleanup_r>:
 8007f98:	4901      	ldr	r1, [pc, #4]	; (8007fa0 <_cleanup_r+0x8>)
 8007f9a:	f000 b8af 	b.w	80080fc <_fwalk_reent>
 8007f9e:	bf00      	nop
 8007fa0:	08009309 	.word	0x08009309

08007fa4 <__sfmoreglue>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	1e4a      	subs	r2, r1, #1
 8007fa8:	2568      	movs	r5, #104	; 0x68
 8007faa:	4355      	muls	r5, r2
 8007fac:	460e      	mov	r6, r1
 8007fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fb2:	f000 fcbf 	bl	8008934 <_malloc_r>
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	b140      	cbz	r0, 8007fcc <__sfmoreglue+0x28>
 8007fba:	2100      	movs	r1, #0
 8007fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8007fc0:	300c      	adds	r0, #12
 8007fc2:	60a0      	str	r0, [r4, #8]
 8007fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fc8:	f7fe fca0 	bl	800690c <memset>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__sfp_lock_acquire>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__sfp_lock_acquire+0x8>)
 8007fd2:	f000 b8b8 	b.w	8008146 <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	200003fc 	.word	0x200003fc

08007fdc <__sfp_lock_release>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__sfp_lock_release+0x8>)
 8007fde:	f000 b8b3 	b.w	8008148 <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	200003fc 	.word	0x200003fc

08007fe8 <__sinit_lock_acquire>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sinit_lock_acquire+0x8>)
 8007fea:	f000 b8ac 	b.w	8008146 <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	200003f7 	.word	0x200003f7

08007ff4 <__sinit_lock_release>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sinit_lock_release+0x8>)
 8007ff6:	f000 b8a7 	b.w	8008148 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	200003f7 	.word	0x200003f7

08008000 <__sinit>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	f7ff fff0 	bl	8007fe8 <__sinit_lock_acquire>
 8008008:	69a3      	ldr	r3, [r4, #24]
 800800a:	b11b      	cbz	r3, 8008014 <__sinit+0x14>
 800800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008010:	f7ff bff0 	b.w	8007ff4 <__sinit_lock_release>
 8008014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008018:	6523      	str	r3, [r4, #80]	; 0x50
 800801a:	4b13      	ldr	r3, [pc, #76]	; (8008068 <__sinit+0x68>)
 800801c:	4a13      	ldr	r2, [pc, #76]	; (800806c <__sinit+0x6c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	62a2      	str	r2, [r4, #40]	; 0x28
 8008022:	42a3      	cmp	r3, r4
 8008024:	bf04      	itt	eq
 8008026:	2301      	moveq	r3, #1
 8008028:	61a3      	streq	r3, [r4, #24]
 800802a:	4620      	mov	r0, r4
 800802c:	f000 f820 	bl	8008070 <__sfp>
 8008030:	6060      	str	r0, [r4, #4]
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f81c 	bl	8008070 <__sfp>
 8008038:	60a0      	str	r0, [r4, #8]
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f818 	bl	8008070 <__sfp>
 8008040:	2200      	movs	r2, #0
 8008042:	60e0      	str	r0, [r4, #12]
 8008044:	2104      	movs	r1, #4
 8008046:	6860      	ldr	r0, [r4, #4]
 8008048:	f7ff ff82 	bl	8007f50 <std>
 800804c:	68a0      	ldr	r0, [r4, #8]
 800804e:	2201      	movs	r2, #1
 8008050:	2109      	movs	r1, #9
 8008052:	f7ff ff7d 	bl	8007f50 <std>
 8008056:	68e0      	ldr	r0, [r4, #12]
 8008058:	2202      	movs	r2, #2
 800805a:	2112      	movs	r1, #18
 800805c:	f7ff ff78 	bl	8007f50 <std>
 8008060:	2301      	movs	r3, #1
 8008062:	61a3      	str	r3, [r4, #24]
 8008064:	e7d2      	b.n	800800c <__sinit+0xc>
 8008066:	bf00      	nop
 8008068:	0800c0e0 	.word	0x0800c0e0
 800806c:	08007f99 	.word	0x08007f99

08008070 <__sfp>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	4607      	mov	r7, r0
 8008074:	f7ff ffac 	bl	8007fd0 <__sfp_lock_acquire>
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <__sfp+0x84>)
 800807a:	681e      	ldr	r6, [r3, #0]
 800807c:	69b3      	ldr	r3, [r6, #24]
 800807e:	b913      	cbnz	r3, 8008086 <__sfp+0x16>
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff ffbd 	bl	8008000 <__sinit>
 8008086:	3648      	adds	r6, #72	; 0x48
 8008088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800808c:	3b01      	subs	r3, #1
 800808e:	d503      	bpl.n	8008098 <__sfp+0x28>
 8008090:	6833      	ldr	r3, [r6, #0]
 8008092:	b30b      	cbz	r3, 80080d8 <__sfp+0x68>
 8008094:	6836      	ldr	r6, [r6, #0]
 8008096:	e7f7      	b.n	8008088 <__sfp+0x18>
 8008098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800809c:	b9d5      	cbnz	r5, 80080d4 <__sfp+0x64>
 800809e:	4b16      	ldr	r3, [pc, #88]	; (80080f8 <__sfp+0x88>)
 80080a0:	60e3      	str	r3, [r4, #12]
 80080a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080a6:	6665      	str	r5, [r4, #100]	; 0x64
 80080a8:	f000 f84c 	bl	8008144 <__retarget_lock_init_recursive>
 80080ac:	f7ff ff96 	bl	8007fdc <__sfp_lock_release>
 80080b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080b8:	6025      	str	r5, [r4, #0]
 80080ba:	61a5      	str	r5, [r4, #24]
 80080bc:	2208      	movs	r2, #8
 80080be:	4629      	mov	r1, r5
 80080c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080c4:	f7fe fc22 	bl	800690c <memset>
 80080c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080d0:	4620      	mov	r0, r4
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	3468      	adds	r4, #104	; 0x68
 80080d6:	e7d9      	b.n	800808c <__sfp+0x1c>
 80080d8:	2104      	movs	r1, #4
 80080da:	4638      	mov	r0, r7
 80080dc:	f7ff ff62 	bl	8007fa4 <__sfmoreglue>
 80080e0:	4604      	mov	r4, r0
 80080e2:	6030      	str	r0, [r6, #0]
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1d5      	bne.n	8008094 <__sfp+0x24>
 80080e8:	f7ff ff78 	bl	8007fdc <__sfp_lock_release>
 80080ec:	230c      	movs	r3, #12
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	e7ee      	b.n	80080d0 <__sfp+0x60>
 80080f2:	bf00      	nop
 80080f4:	0800c0e0 	.word	0x0800c0e0
 80080f8:	ffff0001 	.word	0xffff0001

080080fc <_fwalk_reent>:
 80080fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008100:	4606      	mov	r6, r0
 8008102:	4688      	mov	r8, r1
 8008104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008108:	2700      	movs	r7, #0
 800810a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800810e:	f1b9 0901 	subs.w	r9, r9, #1
 8008112:	d505      	bpl.n	8008120 <_fwalk_reent+0x24>
 8008114:	6824      	ldr	r4, [r4, #0]
 8008116:	2c00      	cmp	r4, #0
 8008118:	d1f7      	bne.n	800810a <_fwalk_reent+0xe>
 800811a:	4638      	mov	r0, r7
 800811c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008120:	89ab      	ldrh	r3, [r5, #12]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d907      	bls.n	8008136 <_fwalk_reent+0x3a>
 8008126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800812a:	3301      	adds	r3, #1
 800812c:	d003      	beq.n	8008136 <_fwalk_reent+0x3a>
 800812e:	4629      	mov	r1, r5
 8008130:	4630      	mov	r0, r6
 8008132:	47c0      	blx	r8
 8008134:	4307      	orrs	r7, r0
 8008136:	3568      	adds	r5, #104	; 0x68
 8008138:	e7e9      	b.n	800810e <_fwalk_reent+0x12>
	...

0800813c <_localeconv_r>:
 800813c:	4800      	ldr	r0, [pc, #0]	; (8008140 <_localeconv_r+0x4>)
 800813e:	4770      	bx	lr
 8008140:	20000178 	.word	0x20000178

08008144 <__retarget_lock_init_recursive>:
 8008144:	4770      	bx	lr

08008146 <__retarget_lock_acquire_recursive>:
 8008146:	4770      	bx	lr

08008148 <__retarget_lock_release_recursive>:
 8008148:	4770      	bx	lr
	...

0800814c <malloc>:
 800814c:	4b02      	ldr	r3, [pc, #8]	; (8008158 <malloc+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f000 bbef 	b.w	8008934 <_malloc_r>
 8008156:	bf00      	nop
 8008158:	20000024 	.word	0x20000024

0800815c <memcpy>:
 800815c:	440a      	add	r2, r1
 800815e:	4291      	cmp	r1, r2
 8008160:	f100 33ff 	add.w	r3, r0, #4294967295
 8008164:	d100      	bne.n	8008168 <memcpy+0xc>
 8008166:	4770      	bx	lr
 8008168:	b510      	push	{r4, lr}
 800816a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800816e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008172:	4291      	cmp	r1, r2
 8008174:	d1f9      	bne.n	800816a <memcpy+0xe>
 8008176:	bd10      	pop	{r4, pc}

08008178 <_Balloc>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	b976      	cbnz	r6, 80081a0 <_Balloc+0x28>
 8008182:	2010      	movs	r0, #16
 8008184:	f7ff ffe2 	bl	800814c <malloc>
 8008188:	4602      	mov	r2, r0
 800818a:	6260      	str	r0, [r4, #36]	; 0x24
 800818c:	b920      	cbnz	r0, 8008198 <_Balloc+0x20>
 800818e:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <_Balloc+0x78>)
 8008190:	4818      	ldr	r0, [pc, #96]	; (80081f4 <_Balloc+0x7c>)
 8008192:	2166      	movs	r1, #102	; 0x66
 8008194:	f001 f804 	bl	80091a0 <__assert_func>
 8008198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800819c:	6006      	str	r6, [r0, #0]
 800819e:	60c6      	str	r6, [r0, #12]
 80081a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081a2:	68f3      	ldr	r3, [r6, #12]
 80081a4:	b183      	cbz	r3, 80081c8 <_Balloc+0x50>
 80081a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081ae:	b9b8      	cbnz	r0, 80081e0 <_Balloc+0x68>
 80081b0:	2101      	movs	r1, #1
 80081b2:	fa01 f605 	lsl.w	r6, r1, r5
 80081b6:	1d72      	adds	r2, r6, #5
 80081b8:	0092      	lsls	r2, r2, #2
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fb5a 	bl	8008874 <_calloc_r>
 80081c0:	b160      	cbz	r0, 80081dc <_Balloc+0x64>
 80081c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081c6:	e00e      	b.n	80081e6 <_Balloc+0x6e>
 80081c8:	2221      	movs	r2, #33	; 0x21
 80081ca:	2104      	movs	r1, #4
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fb51 	bl	8008874 <_calloc_r>
 80081d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d4:	60f0      	str	r0, [r6, #12]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e4      	bne.n	80081a6 <_Balloc+0x2e>
 80081dc:	2000      	movs	r0, #0
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	6802      	ldr	r2, [r0, #0]
 80081e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081e6:	2300      	movs	r3, #0
 80081e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081ec:	e7f7      	b.n	80081de <_Balloc+0x66>
 80081ee:	bf00      	nop
 80081f0:	0800c125 	.word	0x0800c125
 80081f4:	0800c20c 	.word	0x0800c20c

080081f8 <_Bfree>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081fc:	4605      	mov	r5, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	b976      	cbnz	r6, 8008220 <_Bfree+0x28>
 8008202:	2010      	movs	r0, #16
 8008204:	f7ff ffa2 	bl	800814c <malloc>
 8008208:	4602      	mov	r2, r0
 800820a:	6268      	str	r0, [r5, #36]	; 0x24
 800820c:	b920      	cbnz	r0, 8008218 <_Bfree+0x20>
 800820e:	4b09      	ldr	r3, [pc, #36]	; (8008234 <_Bfree+0x3c>)
 8008210:	4809      	ldr	r0, [pc, #36]	; (8008238 <_Bfree+0x40>)
 8008212:	218a      	movs	r1, #138	; 0x8a
 8008214:	f000 ffc4 	bl	80091a0 <__assert_func>
 8008218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800821c:	6006      	str	r6, [r0, #0]
 800821e:	60c6      	str	r6, [r0, #12]
 8008220:	b13c      	cbz	r4, 8008232 <_Bfree+0x3a>
 8008222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008224:	6862      	ldr	r2, [r4, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800822c:	6021      	str	r1, [r4, #0]
 800822e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008232:	bd70      	pop	{r4, r5, r6, pc}
 8008234:	0800c125 	.word	0x0800c125
 8008238:	0800c20c 	.word	0x0800c20c

0800823c <__multadd>:
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	690e      	ldr	r6, [r1, #16]
 8008242:	4607      	mov	r7, r0
 8008244:	4698      	mov	r8, r3
 8008246:	460c      	mov	r4, r1
 8008248:	f101 0014 	add.w	r0, r1, #20
 800824c:	2300      	movs	r3, #0
 800824e:	6805      	ldr	r5, [r0, #0]
 8008250:	b2a9      	uxth	r1, r5
 8008252:	fb02 8101 	mla	r1, r2, r1, r8
 8008256:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800825a:	0c2d      	lsrs	r5, r5, #16
 800825c:	fb02 c505 	mla	r5, r2, r5, ip
 8008260:	b289      	uxth	r1, r1
 8008262:	3301      	adds	r3, #1
 8008264:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008268:	429e      	cmp	r6, r3
 800826a:	f840 1b04 	str.w	r1, [r0], #4
 800826e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008272:	dcec      	bgt.n	800824e <__multadd+0x12>
 8008274:	f1b8 0f00 	cmp.w	r8, #0
 8008278:	d022      	beq.n	80082c0 <__multadd+0x84>
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	42b3      	cmp	r3, r6
 800827e:	dc19      	bgt.n	80082b4 <__multadd+0x78>
 8008280:	6861      	ldr	r1, [r4, #4]
 8008282:	4638      	mov	r0, r7
 8008284:	3101      	adds	r1, #1
 8008286:	f7ff ff77 	bl	8008178 <_Balloc>
 800828a:	4605      	mov	r5, r0
 800828c:	b928      	cbnz	r0, 800829a <__multadd+0x5e>
 800828e:	4602      	mov	r2, r0
 8008290:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <__multadd+0x8c>)
 8008292:	480e      	ldr	r0, [pc, #56]	; (80082cc <__multadd+0x90>)
 8008294:	21b5      	movs	r1, #181	; 0xb5
 8008296:	f000 ff83 	bl	80091a0 <__assert_func>
 800829a:	6922      	ldr	r2, [r4, #16]
 800829c:	3202      	adds	r2, #2
 800829e:	f104 010c 	add.w	r1, r4, #12
 80082a2:	0092      	lsls	r2, r2, #2
 80082a4:	300c      	adds	r0, #12
 80082a6:	f7ff ff59 	bl	800815c <memcpy>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4638      	mov	r0, r7
 80082ae:	f7ff ffa3 	bl	80081f8 <_Bfree>
 80082b2:	462c      	mov	r4, r5
 80082b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80082b8:	3601      	adds	r6, #1
 80082ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80082be:	6126      	str	r6, [r4, #16]
 80082c0:	4620      	mov	r0, r4
 80082c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c6:	bf00      	nop
 80082c8:	0800c19b 	.word	0x0800c19b
 80082cc:	0800c20c 	.word	0x0800c20c

080082d0 <__hi0bits>:
 80082d0:	0c03      	lsrs	r3, r0, #16
 80082d2:	041b      	lsls	r3, r3, #16
 80082d4:	b9d3      	cbnz	r3, 800830c <__hi0bits+0x3c>
 80082d6:	0400      	lsls	r0, r0, #16
 80082d8:	2310      	movs	r3, #16
 80082da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082de:	bf04      	itt	eq
 80082e0:	0200      	lsleq	r0, r0, #8
 80082e2:	3308      	addeq	r3, #8
 80082e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082e8:	bf04      	itt	eq
 80082ea:	0100      	lsleq	r0, r0, #4
 80082ec:	3304      	addeq	r3, #4
 80082ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082f2:	bf04      	itt	eq
 80082f4:	0080      	lsleq	r0, r0, #2
 80082f6:	3302      	addeq	r3, #2
 80082f8:	2800      	cmp	r0, #0
 80082fa:	db05      	blt.n	8008308 <__hi0bits+0x38>
 80082fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008300:	f103 0301 	add.w	r3, r3, #1
 8008304:	bf08      	it	eq
 8008306:	2320      	moveq	r3, #32
 8008308:	4618      	mov	r0, r3
 800830a:	4770      	bx	lr
 800830c:	2300      	movs	r3, #0
 800830e:	e7e4      	b.n	80082da <__hi0bits+0xa>

08008310 <__lo0bits>:
 8008310:	6803      	ldr	r3, [r0, #0]
 8008312:	f013 0207 	ands.w	r2, r3, #7
 8008316:	4601      	mov	r1, r0
 8008318:	d00b      	beq.n	8008332 <__lo0bits+0x22>
 800831a:	07da      	lsls	r2, r3, #31
 800831c:	d424      	bmi.n	8008368 <__lo0bits+0x58>
 800831e:	0798      	lsls	r0, r3, #30
 8008320:	bf49      	itett	mi
 8008322:	085b      	lsrmi	r3, r3, #1
 8008324:	089b      	lsrpl	r3, r3, #2
 8008326:	2001      	movmi	r0, #1
 8008328:	600b      	strmi	r3, [r1, #0]
 800832a:	bf5c      	itt	pl
 800832c:	600b      	strpl	r3, [r1, #0]
 800832e:	2002      	movpl	r0, #2
 8008330:	4770      	bx	lr
 8008332:	b298      	uxth	r0, r3
 8008334:	b9b0      	cbnz	r0, 8008364 <__lo0bits+0x54>
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	2010      	movs	r0, #16
 800833a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800833e:	bf04      	itt	eq
 8008340:	0a1b      	lsreq	r3, r3, #8
 8008342:	3008      	addeq	r0, #8
 8008344:	071a      	lsls	r2, r3, #28
 8008346:	bf04      	itt	eq
 8008348:	091b      	lsreq	r3, r3, #4
 800834a:	3004      	addeq	r0, #4
 800834c:	079a      	lsls	r2, r3, #30
 800834e:	bf04      	itt	eq
 8008350:	089b      	lsreq	r3, r3, #2
 8008352:	3002      	addeq	r0, #2
 8008354:	07da      	lsls	r2, r3, #31
 8008356:	d403      	bmi.n	8008360 <__lo0bits+0x50>
 8008358:	085b      	lsrs	r3, r3, #1
 800835a:	f100 0001 	add.w	r0, r0, #1
 800835e:	d005      	beq.n	800836c <__lo0bits+0x5c>
 8008360:	600b      	str	r3, [r1, #0]
 8008362:	4770      	bx	lr
 8008364:	4610      	mov	r0, r2
 8008366:	e7e8      	b.n	800833a <__lo0bits+0x2a>
 8008368:	2000      	movs	r0, #0
 800836a:	4770      	bx	lr
 800836c:	2020      	movs	r0, #32
 800836e:	4770      	bx	lr

08008370 <__i2b>:
 8008370:	b510      	push	{r4, lr}
 8008372:	460c      	mov	r4, r1
 8008374:	2101      	movs	r1, #1
 8008376:	f7ff feff 	bl	8008178 <_Balloc>
 800837a:	4602      	mov	r2, r0
 800837c:	b928      	cbnz	r0, 800838a <__i2b+0x1a>
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <__i2b+0x24>)
 8008380:	4805      	ldr	r0, [pc, #20]	; (8008398 <__i2b+0x28>)
 8008382:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008386:	f000 ff0b 	bl	80091a0 <__assert_func>
 800838a:	2301      	movs	r3, #1
 800838c:	6144      	str	r4, [r0, #20]
 800838e:	6103      	str	r3, [r0, #16]
 8008390:	bd10      	pop	{r4, pc}
 8008392:	bf00      	nop
 8008394:	0800c19b 	.word	0x0800c19b
 8008398:	0800c20c 	.word	0x0800c20c

0800839c <__multiply>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	4614      	mov	r4, r2
 80083a2:	690a      	ldr	r2, [r1, #16]
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	bfb8      	it	lt
 80083aa:	460b      	movlt	r3, r1
 80083ac:	460d      	mov	r5, r1
 80083ae:	bfbc      	itt	lt
 80083b0:	4625      	movlt	r5, r4
 80083b2:	461c      	movlt	r4, r3
 80083b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80083b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083bc:	68ab      	ldr	r3, [r5, #8]
 80083be:	6869      	ldr	r1, [r5, #4]
 80083c0:	eb0a 0709 	add.w	r7, sl, r9
 80083c4:	42bb      	cmp	r3, r7
 80083c6:	b085      	sub	sp, #20
 80083c8:	bfb8      	it	lt
 80083ca:	3101      	addlt	r1, #1
 80083cc:	f7ff fed4 	bl	8008178 <_Balloc>
 80083d0:	b930      	cbnz	r0, 80083e0 <__multiply+0x44>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4b42      	ldr	r3, [pc, #264]	; (80084e0 <__multiply+0x144>)
 80083d6:	4843      	ldr	r0, [pc, #268]	; (80084e4 <__multiply+0x148>)
 80083d8:	f240 115d 	movw	r1, #349	; 0x15d
 80083dc:	f000 fee0 	bl	80091a0 <__assert_func>
 80083e0:	f100 0614 	add.w	r6, r0, #20
 80083e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80083e8:	4633      	mov	r3, r6
 80083ea:	2200      	movs	r2, #0
 80083ec:	4543      	cmp	r3, r8
 80083ee:	d31e      	bcc.n	800842e <__multiply+0x92>
 80083f0:	f105 0c14 	add.w	ip, r5, #20
 80083f4:	f104 0314 	add.w	r3, r4, #20
 80083f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80083fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008400:	9202      	str	r2, [sp, #8]
 8008402:	ebac 0205 	sub.w	r2, ip, r5
 8008406:	3a15      	subs	r2, #21
 8008408:	f022 0203 	bic.w	r2, r2, #3
 800840c:	3204      	adds	r2, #4
 800840e:	f105 0115 	add.w	r1, r5, #21
 8008412:	458c      	cmp	ip, r1
 8008414:	bf38      	it	cc
 8008416:	2204      	movcc	r2, #4
 8008418:	9201      	str	r2, [sp, #4]
 800841a:	9a02      	ldr	r2, [sp, #8]
 800841c:	9303      	str	r3, [sp, #12]
 800841e:	429a      	cmp	r2, r3
 8008420:	d808      	bhi.n	8008434 <__multiply+0x98>
 8008422:	2f00      	cmp	r7, #0
 8008424:	dc55      	bgt.n	80084d2 <__multiply+0x136>
 8008426:	6107      	str	r7, [r0, #16]
 8008428:	b005      	add	sp, #20
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	f843 2b04 	str.w	r2, [r3], #4
 8008432:	e7db      	b.n	80083ec <__multiply+0x50>
 8008434:	f8b3 a000 	ldrh.w	sl, [r3]
 8008438:	f1ba 0f00 	cmp.w	sl, #0
 800843c:	d020      	beq.n	8008480 <__multiply+0xe4>
 800843e:	f105 0e14 	add.w	lr, r5, #20
 8008442:	46b1      	mov	r9, r6
 8008444:	2200      	movs	r2, #0
 8008446:	f85e 4b04 	ldr.w	r4, [lr], #4
 800844a:	f8d9 b000 	ldr.w	fp, [r9]
 800844e:	b2a1      	uxth	r1, r4
 8008450:	fa1f fb8b 	uxth.w	fp, fp
 8008454:	fb0a b101 	mla	r1, sl, r1, fp
 8008458:	4411      	add	r1, r2
 800845a:	f8d9 2000 	ldr.w	r2, [r9]
 800845e:	0c24      	lsrs	r4, r4, #16
 8008460:	0c12      	lsrs	r2, r2, #16
 8008462:	fb0a 2404 	mla	r4, sl, r4, r2
 8008466:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800846a:	b289      	uxth	r1, r1
 800846c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008470:	45f4      	cmp	ip, lr
 8008472:	f849 1b04 	str.w	r1, [r9], #4
 8008476:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800847a:	d8e4      	bhi.n	8008446 <__multiply+0xaa>
 800847c:	9901      	ldr	r1, [sp, #4]
 800847e:	5072      	str	r2, [r6, r1]
 8008480:	9a03      	ldr	r2, [sp, #12]
 8008482:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008486:	3304      	adds	r3, #4
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	d01f      	beq.n	80084ce <__multiply+0x132>
 800848e:	6834      	ldr	r4, [r6, #0]
 8008490:	f105 0114 	add.w	r1, r5, #20
 8008494:	46b6      	mov	lr, r6
 8008496:	f04f 0a00 	mov.w	sl, #0
 800849a:	880a      	ldrh	r2, [r1, #0]
 800849c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80084a0:	fb09 b202 	mla	r2, r9, r2, fp
 80084a4:	4492      	add	sl, r2
 80084a6:	b2a4      	uxth	r4, r4
 80084a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80084ac:	f84e 4b04 	str.w	r4, [lr], #4
 80084b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80084b4:	f8be 2000 	ldrh.w	r2, [lr]
 80084b8:	0c24      	lsrs	r4, r4, #16
 80084ba:	fb09 2404 	mla	r4, r9, r4, r2
 80084be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80084c2:	458c      	cmp	ip, r1
 80084c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084c8:	d8e7      	bhi.n	800849a <__multiply+0xfe>
 80084ca:	9a01      	ldr	r2, [sp, #4]
 80084cc:	50b4      	str	r4, [r6, r2]
 80084ce:	3604      	adds	r6, #4
 80084d0:	e7a3      	b.n	800841a <__multiply+0x7e>
 80084d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1a5      	bne.n	8008426 <__multiply+0x8a>
 80084da:	3f01      	subs	r7, #1
 80084dc:	e7a1      	b.n	8008422 <__multiply+0x86>
 80084de:	bf00      	nop
 80084e0:	0800c19b 	.word	0x0800c19b
 80084e4:	0800c20c 	.word	0x0800c20c

080084e8 <__pow5mult>:
 80084e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ec:	4615      	mov	r5, r2
 80084ee:	f012 0203 	ands.w	r2, r2, #3
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	d007      	beq.n	8008508 <__pow5mult+0x20>
 80084f8:	4c25      	ldr	r4, [pc, #148]	; (8008590 <__pow5mult+0xa8>)
 80084fa:	3a01      	subs	r2, #1
 80084fc:	2300      	movs	r3, #0
 80084fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008502:	f7ff fe9b 	bl	800823c <__multadd>
 8008506:	4607      	mov	r7, r0
 8008508:	10ad      	asrs	r5, r5, #2
 800850a:	d03d      	beq.n	8008588 <__pow5mult+0xa0>
 800850c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800850e:	b97c      	cbnz	r4, 8008530 <__pow5mult+0x48>
 8008510:	2010      	movs	r0, #16
 8008512:	f7ff fe1b 	bl	800814c <malloc>
 8008516:	4602      	mov	r2, r0
 8008518:	6270      	str	r0, [r6, #36]	; 0x24
 800851a:	b928      	cbnz	r0, 8008528 <__pow5mult+0x40>
 800851c:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <__pow5mult+0xac>)
 800851e:	481e      	ldr	r0, [pc, #120]	; (8008598 <__pow5mult+0xb0>)
 8008520:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008524:	f000 fe3c 	bl	80091a0 <__assert_func>
 8008528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800852c:	6004      	str	r4, [r0, #0]
 800852e:	60c4      	str	r4, [r0, #12]
 8008530:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008538:	b94c      	cbnz	r4, 800854e <__pow5mult+0x66>
 800853a:	f240 2171 	movw	r1, #625	; 0x271
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff ff16 	bl	8008370 <__i2b>
 8008544:	2300      	movs	r3, #0
 8008546:	f8c8 0008 	str.w	r0, [r8, #8]
 800854a:	4604      	mov	r4, r0
 800854c:	6003      	str	r3, [r0, #0]
 800854e:	f04f 0900 	mov.w	r9, #0
 8008552:	07eb      	lsls	r3, r5, #31
 8008554:	d50a      	bpl.n	800856c <__pow5mult+0x84>
 8008556:	4639      	mov	r1, r7
 8008558:	4622      	mov	r2, r4
 800855a:	4630      	mov	r0, r6
 800855c:	f7ff ff1e 	bl	800839c <__multiply>
 8008560:	4639      	mov	r1, r7
 8008562:	4680      	mov	r8, r0
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff fe47 	bl	80081f8 <_Bfree>
 800856a:	4647      	mov	r7, r8
 800856c:	106d      	asrs	r5, r5, #1
 800856e:	d00b      	beq.n	8008588 <__pow5mult+0xa0>
 8008570:	6820      	ldr	r0, [r4, #0]
 8008572:	b938      	cbnz	r0, 8008584 <__pow5mult+0x9c>
 8008574:	4622      	mov	r2, r4
 8008576:	4621      	mov	r1, r4
 8008578:	4630      	mov	r0, r6
 800857a:	f7ff ff0f 	bl	800839c <__multiply>
 800857e:	6020      	str	r0, [r4, #0]
 8008580:	f8c0 9000 	str.w	r9, [r0]
 8008584:	4604      	mov	r4, r0
 8008586:	e7e4      	b.n	8008552 <__pow5mult+0x6a>
 8008588:	4638      	mov	r0, r7
 800858a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800858e:	bf00      	nop
 8008590:	0800c360 	.word	0x0800c360
 8008594:	0800c125 	.word	0x0800c125
 8008598:	0800c20c 	.word	0x0800c20c

0800859c <__lshift>:
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	460c      	mov	r4, r1
 80085a2:	6849      	ldr	r1, [r1, #4]
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	4607      	mov	r7, r0
 80085ae:	4691      	mov	r9, r2
 80085b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085b4:	f108 0601 	add.w	r6, r8, #1
 80085b8:	42b3      	cmp	r3, r6
 80085ba:	db0b      	blt.n	80085d4 <__lshift+0x38>
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff fddb 	bl	8008178 <_Balloc>
 80085c2:	4605      	mov	r5, r0
 80085c4:	b948      	cbnz	r0, 80085da <__lshift+0x3e>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <__lshift+0xd0>)
 80085ca:	4829      	ldr	r0, [pc, #164]	; (8008670 <__lshift+0xd4>)
 80085cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085d0:	f000 fde6 	bl	80091a0 <__assert_func>
 80085d4:	3101      	adds	r1, #1
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	e7ee      	b.n	80085b8 <__lshift+0x1c>
 80085da:	2300      	movs	r3, #0
 80085dc:	f100 0114 	add.w	r1, r0, #20
 80085e0:	f100 0210 	add.w	r2, r0, #16
 80085e4:	4618      	mov	r0, r3
 80085e6:	4553      	cmp	r3, sl
 80085e8:	db33      	blt.n	8008652 <__lshift+0xb6>
 80085ea:	6920      	ldr	r0, [r4, #16]
 80085ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085f0:	f104 0314 	add.w	r3, r4, #20
 80085f4:	f019 091f 	ands.w	r9, r9, #31
 80085f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008600:	d02b      	beq.n	800865a <__lshift+0xbe>
 8008602:	f1c9 0e20 	rsb	lr, r9, #32
 8008606:	468a      	mov	sl, r1
 8008608:	2200      	movs	r2, #0
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	fa00 f009 	lsl.w	r0, r0, r9
 8008610:	4302      	orrs	r2, r0
 8008612:	f84a 2b04 	str.w	r2, [sl], #4
 8008616:	f853 2b04 	ldr.w	r2, [r3], #4
 800861a:	459c      	cmp	ip, r3
 800861c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008620:	d8f3      	bhi.n	800860a <__lshift+0x6e>
 8008622:	ebac 0304 	sub.w	r3, ip, r4
 8008626:	3b15      	subs	r3, #21
 8008628:	f023 0303 	bic.w	r3, r3, #3
 800862c:	3304      	adds	r3, #4
 800862e:	f104 0015 	add.w	r0, r4, #21
 8008632:	4584      	cmp	ip, r0
 8008634:	bf38      	it	cc
 8008636:	2304      	movcc	r3, #4
 8008638:	50ca      	str	r2, [r1, r3]
 800863a:	b10a      	cbz	r2, 8008640 <__lshift+0xa4>
 800863c:	f108 0602 	add.w	r6, r8, #2
 8008640:	3e01      	subs	r6, #1
 8008642:	4638      	mov	r0, r7
 8008644:	612e      	str	r6, [r5, #16]
 8008646:	4621      	mov	r1, r4
 8008648:	f7ff fdd6 	bl	80081f8 <_Bfree>
 800864c:	4628      	mov	r0, r5
 800864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008652:	f842 0f04 	str.w	r0, [r2, #4]!
 8008656:	3301      	adds	r3, #1
 8008658:	e7c5      	b.n	80085e6 <__lshift+0x4a>
 800865a:	3904      	subs	r1, #4
 800865c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008660:	f841 2f04 	str.w	r2, [r1, #4]!
 8008664:	459c      	cmp	ip, r3
 8008666:	d8f9      	bhi.n	800865c <__lshift+0xc0>
 8008668:	e7ea      	b.n	8008640 <__lshift+0xa4>
 800866a:	bf00      	nop
 800866c:	0800c19b 	.word	0x0800c19b
 8008670:	0800c20c 	.word	0x0800c20c

08008674 <__mcmp>:
 8008674:	b530      	push	{r4, r5, lr}
 8008676:	6902      	ldr	r2, [r0, #16]
 8008678:	690c      	ldr	r4, [r1, #16]
 800867a:	1b12      	subs	r2, r2, r4
 800867c:	d10e      	bne.n	800869c <__mcmp+0x28>
 800867e:	f100 0314 	add.w	r3, r0, #20
 8008682:	3114      	adds	r1, #20
 8008684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800868c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008694:	42a5      	cmp	r5, r4
 8008696:	d003      	beq.n	80086a0 <__mcmp+0x2c>
 8008698:	d305      	bcc.n	80086a6 <__mcmp+0x32>
 800869a:	2201      	movs	r2, #1
 800869c:	4610      	mov	r0, r2
 800869e:	bd30      	pop	{r4, r5, pc}
 80086a0:	4283      	cmp	r3, r0
 80086a2:	d3f3      	bcc.n	800868c <__mcmp+0x18>
 80086a4:	e7fa      	b.n	800869c <__mcmp+0x28>
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	e7f7      	b.n	800869c <__mcmp+0x28>

080086ac <__mdiff>:
 80086ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b0:	460c      	mov	r4, r1
 80086b2:	4606      	mov	r6, r0
 80086b4:	4611      	mov	r1, r2
 80086b6:	4620      	mov	r0, r4
 80086b8:	4617      	mov	r7, r2
 80086ba:	f7ff ffdb 	bl	8008674 <__mcmp>
 80086be:	1e05      	subs	r5, r0, #0
 80086c0:	d110      	bne.n	80086e4 <__mdiff+0x38>
 80086c2:	4629      	mov	r1, r5
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff fd57 	bl	8008178 <_Balloc>
 80086ca:	b930      	cbnz	r0, 80086da <__mdiff+0x2e>
 80086cc:	4b39      	ldr	r3, [pc, #228]	; (80087b4 <__mdiff+0x108>)
 80086ce:	4602      	mov	r2, r0
 80086d0:	f240 2132 	movw	r1, #562	; 0x232
 80086d4:	4838      	ldr	r0, [pc, #224]	; (80087b8 <__mdiff+0x10c>)
 80086d6:	f000 fd63 	bl	80091a0 <__assert_func>
 80086da:	2301      	movs	r3, #1
 80086dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	bfa4      	itt	ge
 80086e6:	463b      	movge	r3, r7
 80086e8:	4627      	movge	r7, r4
 80086ea:	4630      	mov	r0, r6
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	bfa6      	itte	ge
 80086f0:	461c      	movge	r4, r3
 80086f2:	2500      	movge	r5, #0
 80086f4:	2501      	movlt	r5, #1
 80086f6:	f7ff fd3f 	bl	8008178 <_Balloc>
 80086fa:	b920      	cbnz	r0, 8008706 <__mdiff+0x5a>
 80086fc:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <__mdiff+0x108>)
 80086fe:	4602      	mov	r2, r0
 8008700:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008704:	e7e6      	b.n	80086d4 <__mdiff+0x28>
 8008706:	693e      	ldr	r6, [r7, #16]
 8008708:	60c5      	str	r5, [r0, #12]
 800870a:	6925      	ldr	r5, [r4, #16]
 800870c:	f107 0114 	add.w	r1, r7, #20
 8008710:	f104 0914 	add.w	r9, r4, #20
 8008714:	f100 0e14 	add.w	lr, r0, #20
 8008718:	f107 0210 	add.w	r2, r7, #16
 800871c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008720:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008724:	46f2      	mov	sl, lr
 8008726:	2700      	movs	r7, #0
 8008728:	f859 3b04 	ldr.w	r3, [r9], #4
 800872c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008730:	fa1f f883 	uxth.w	r8, r3
 8008734:	fa17 f78b 	uxtah	r7, r7, fp
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	eba7 0808 	sub.w	r8, r7, r8
 800873e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008742:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008746:	fa1f f888 	uxth.w	r8, r8
 800874a:	141f      	asrs	r7, r3, #16
 800874c:	454d      	cmp	r5, r9
 800874e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008752:	f84a 3b04 	str.w	r3, [sl], #4
 8008756:	d8e7      	bhi.n	8008728 <__mdiff+0x7c>
 8008758:	1b2b      	subs	r3, r5, r4
 800875a:	3b15      	subs	r3, #21
 800875c:	f023 0303 	bic.w	r3, r3, #3
 8008760:	3304      	adds	r3, #4
 8008762:	3415      	adds	r4, #21
 8008764:	42a5      	cmp	r5, r4
 8008766:	bf38      	it	cc
 8008768:	2304      	movcc	r3, #4
 800876a:	4419      	add	r1, r3
 800876c:	4473      	add	r3, lr
 800876e:	469e      	mov	lr, r3
 8008770:	460d      	mov	r5, r1
 8008772:	4565      	cmp	r5, ip
 8008774:	d30e      	bcc.n	8008794 <__mdiff+0xe8>
 8008776:	f10c 0203 	add.w	r2, ip, #3
 800877a:	1a52      	subs	r2, r2, r1
 800877c:	f022 0203 	bic.w	r2, r2, #3
 8008780:	3903      	subs	r1, #3
 8008782:	458c      	cmp	ip, r1
 8008784:	bf38      	it	cc
 8008786:	2200      	movcc	r2, #0
 8008788:	441a      	add	r2, r3
 800878a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800878e:	b17b      	cbz	r3, 80087b0 <__mdiff+0x104>
 8008790:	6106      	str	r6, [r0, #16]
 8008792:	e7a5      	b.n	80086e0 <__mdiff+0x34>
 8008794:	f855 8b04 	ldr.w	r8, [r5], #4
 8008798:	fa17 f488 	uxtah	r4, r7, r8
 800879c:	1422      	asrs	r2, r4, #16
 800879e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80087a2:	b2a4      	uxth	r4, r4
 80087a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80087a8:	f84e 4b04 	str.w	r4, [lr], #4
 80087ac:	1417      	asrs	r7, r2, #16
 80087ae:	e7e0      	b.n	8008772 <__mdiff+0xc6>
 80087b0:	3e01      	subs	r6, #1
 80087b2:	e7ea      	b.n	800878a <__mdiff+0xde>
 80087b4:	0800c19b 	.word	0x0800c19b
 80087b8:	0800c20c 	.word	0x0800c20c

080087bc <__d2b>:
 80087bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087c0:	4689      	mov	r9, r1
 80087c2:	2101      	movs	r1, #1
 80087c4:	ec57 6b10 	vmov	r6, r7, d0
 80087c8:	4690      	mov	r8, r2
 80087ca:	f7ff fcd5 	bl	8008178 <_Balloc>
 80087ce:	4604      	mov	r4, r0
 80087d0:	b930      	cbnz	r0, 80087e0 <__d2b+0x24>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4b25      	ldr	r3, [pc, #148]	; (800886c <__d2b+0xb0>)
 80087d6:	4826      	ldr	r0, [pc, #152]	; (8008870 <__d2b+0xb4>)
 80087d8:	f240 310a 	movw	r1, #778	; 0x30a
 80087dc:	f000 fce0 	bl	80091a0 <__assert_func>
 80087e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087e8:	bb35      	cbnz	r5, 8008838 <__d2b+0x7c>
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	d028      	beq.n	8008842 <__d2b+0x86>
 80087f0:	4668      	mov	r0, sp
 80087f2:	9600      	str	r6, [sp, #0]
 80087f4:	f7ff fd8c 	bl	8008310 <__lo0bits>
 80087f8:	9900      	ldr	r1, [sp, #0]
 80087fa:	b300      	cbz	r0, 800883e <__d2b+0x82>
 80087fc:	9a01      	ldr	r2, [sp, #4]
 80087fe:	f1c0 0320 	rsb	r3, r0, #32
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	430b      	orrs	r3, r1
 8008808:	40c2      	lsrs	r2, r0
 800880a:	6163      	str	r3, [r4, #20]
 800880c:	9201      	str	r2, [sp, #4]
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	61a3      	str	r3, [r4, #24]
 8008812:	2b00      	cmp	r3, #0
 8008814:	bf14      	ite	ne
 8008816:	2202      	movne	r2, #2
 8008818:	2201      	moveq	r2, #1
 800881a:	6122      	str	r2, [r4, #16]
 800881c:	b1d5      	cbz	r5, 8008854 <__d2b+0x98>
 800881e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008822:	4405      	add	r5, r0
 8008824:	f8c9 5000 	str.w	r5, [r9]
 8008828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800882c:	f8c8 0000 	str.w	r0, [r8]
 8008830:	4620      	mov	r0, r4
 8008832:	b003      	add	sp, #12
 8008834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800883c:	e7d5      	b.n	80087ea <__d2b+0x2e>
 800883e:	6161      	str	r1, [r4, #20]
 8008840:	e7e5      	b.n	800880e <__d2b+0x52>
 8008842:	a801      	add	r0, sp, #4
 8008844:	f7ff fd64 	bl	8008310 <__lo0bits>
 8008848:	9b01      	ldr	r3, [sp, #4]
 800884a:	6163      	str	r3, [r4, #20]
 800884c:	2201      	movs	r2, #1
 800884e:	6122      	str	r2, [r4, #16]
 8008850:	3020      	adds	r0, #32
 8008852:	e7e3      	b.n	800881c <__d2b+0x60>
 8008854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800885c:	f8c9 0000 	str.w	r0, [r9]
 8008860:	6918      	ldr	r0, [r3, #16]
 8008862:	f7ff fd35 	bl	80082d0 <__hi0bits>
 8008866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800886a:	e7df      	b.n	800882c <__d2b+0x70>
 800886c:	0800c19b 	.word	0x0800c19b
 8008870:	0800c20c 	.word	0x0800c20c

08008874 <_calloc_r>:
 8008874:	b513      	push	{r0, r1, r4, lr}
 8008876:	434a      	muls	r2, r1
 8008878:	4611      	mov	r1, r2
 800887a:	9201      	str	r2, [sp, #4]
 800887c:	f000 f85a 	bl	8008934 <_malloc_r>
 8008880:	4604      	mov	r4, r0
 8008882:	b118      	cbz	r0, 800888c <_calloc_r+0x18>
 8008884:	9a01      	ldr	r2, [sp, #4]
 8008886:	2100      	movs	r1, #0
 8008888:	f7fe f840 	bl	800690c <memset>
 800888c:	4620      	mov	r0, r4
 800888e:	b002      	add	sp, #8
 8008890:	bd10      	pop	{r4, pc}
	...

08008894 <_free_r>:
 8008894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008896:	2900      	cmp	r1, #0
 8008898:	d048      	beq.n	800892c <_free_r+0x98>
 800889a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889e:	9001      	str	r0, [sp, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f1a1 0404 	sub.w	r4, r1, #4
 80088a6:	bfb8      	it	lt
 80088a8:	18e4      	addlt	r4, r4, r3
 80088aa:	f000 fe1d 	bl	80094e8 <__malloc_lock>
 80088ae:	4a20      	ldr	r2, [pc, #128]	; (8008930 <_free_r+0x9c>)
 80088b0:	9801      	ldr	r0, [sp, #4]
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	4615      	mov	r5, r2
 80088b6:	b933      	cbnz	r3, 80088c6 <_free_r+0x32>
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	6014      	str	r4, [r2, #0]
 80088bc:	b003      	add	sp, #12
 80088be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088c2:	f000 be17 	b.w	80094f4 <__malloc_unlock>
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	d90b      	bls.n	80088e2 <_free_r+0x4e>
 80088ca:	6821      	ldr	r1, [r4, #0]
 80088cc:	1862      	adds	r2, r4, r1
 80088ce:	4293      	cmp	r3, r2
 80088d0:	bf04      	itt	eq
 80088d2:	681a      	ldreq	r2, [r3, #0]
 80088d4:	685b      	ldreq	r3, [r3, #4]
 80088d6:	6063      	str	r3, [r4, #4]
 80088d8:	bf04      	itt	eq
 80088da:	1852      	addeq	r2, r2, r1
 80088dc:	6022      	streq	r2, [r4, #0]
 80088de:	602c      	str	r4, [r5, #0]
 80088e0:	e7ec      	b.n	80088bc <_free_r+0x28>
 80088e2:	461a      	mov	r2, r3
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b10b      	cbz	r3, 80088ec <_free_r+0x58>
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d9fa      	bls.n	80088e2 <_free_r+0x4e>
 80088ec:	6811      	ldr	r1, [r2, #0]
 80088ee:	1855      	adds	r5, r2, r1
 80088f0:	42a5      	cmp	r5, r4
 80088f2:	d10b      	bne.n	800890c <_free_r+0x78>
 80088f4:	6824      	ldr	r4, [r4, #0]
 80088f6:	4421      	add	r1, r4
 80088f8:	1854      	adds	r4, r2, r1
 80088fa:	42a3      	cmp	r3, r4
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	d1dd      	bne.n	80088bc <_free_r+0x28>
 8008900:	681c      	ldr	r4, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	6053      	str	r3, [r2, #4]
 8008906:	4421      	add	r1, r4
 8008908:	6011      	str	r1, [r2, #0]
 800890a:	e7d7      	b.n	80088bc <_free_r+0x28>
 800890c:	d902      	bls.n	8008914 <_free_r+0x80>
 800890e:	230c      	movs	r3, #12
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	e7d3      	b.n	80088bc <_free_r+0x28>
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	1961      	adds	r1, r4, r5
 8008918:	428b      	cmp	r3, r1
 800891a:	bf04      	itt	eq
 800891c:	6819      	ldreq	r1, [r3, #0]
 800891e:	685b      	ldreq	r3, [r3, #4]
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	bf04      	itt	eq
 8008924:	1949      	addeq	r1, r1, r5
 8008926:	6021      	streq	r1, [r4, #0]
 8008928:	6054      	str	r4, [r2, #4]
 800892a:	e7c7      	b.n	80088bc <_free_r+0x28>
 800892c:	b003      	add	sp, #12
 800892e:	bd30      	pop	{r4, r5, pc}
 8008930:	2000023c 	.word	0x2000023c

08008934 <_malloc_r>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	1ccd      	adds	r5, r1, #3
 8008938:	f025 0503 	bic.w	r5, r5, #3
 800893c:	3508      	adds	r5, #8
 800893e:	2d0c      	cmp	r5, #12
 8008940:	bf38      	it	cc
 8008942:	250c      	movcc	r5, #12
 8008944:	2d00      	cmp	r5, #0
 8008946:	4606      	mov	r6, r0
 8008948:	db01      	blt.n	800894e <_malloc_r+0x1a>
 800894a:	42a9      	cmp	r1, r5
 800894c:	d903      	bls.n	8008956 <_malloc_r+0x22>
 800894e:	230c      	movs	r3, #12
 8008950:	6033      	str	r3, [r6, #0]
 8008952:	2000      	movs	r0, #0
 8008954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008956:	f000 fdc7 	bl	80094e8 <__malloc_lock>
 800895a:	4921      	ldr	r1, [pc, #132]	; (80089e0 <_malloc_r+0xac>)
 800895c:	680a      	ldr	r2, [r1, #0]
 800895e:	4614      	mov	r4, r2
 8008960:	b99c      	cbnz	r4, 800898a <_malloc_r+0x56>
 8008962:	4f20      	ldr	r7, [pc, #128]	; (80089e4 <_malloc_r+0xb0>)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	b923      	cbnz	r3, 8008972 <_malloc_r+0x3e>
 8008968:	4621      	mov	r1, r4
 800896a:	4630      	mov	r0, r6
 800896c:	f000 faf2 	bl	8008f54 <_sbrk_r>
 8008970:	6038      	str	r0, [r7, #0]
 8008972:	4629      	mov	r1, r5
 8008974:	4630      	mov	r0, r6
 8008976:	f000 faed 	bl	8008f54 <_sbrk_r>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	d123      	bne.n	80089c6 <_malloc_r+0x92>
 800897e:	230c      	movs	r3, #12
 8008980:	6033      	str	r3, [r6, #0]
 8008982:	4630      	mov	r0, r6
 8008984:	f000 fdb6 	bl	80094f4 <__malloc_unlock>
 8008988:	e7e3      	b.n	8008952 <_malloc_r+0x1e>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	1b5b      	subs	r3, r3, r5
 800898e:	d417      	bmi.n	80089c0 <_malloc_r+0x8c>
 8008990:	2b0b      	cmp	r3, #11
 8008992:	d903      	bls.n	800899c <_malloc_r+0x68>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	441c      	add	r4, r3
 8008998:	6025      	str	r5, [r4, #0]
 800899a:	e004      	b.n	80089a6 <_malloc_r+0x72>
 800899c:	6863      	ldr	r3, [r4, #4]
 800899e:	42a2      	cmp	r2, r4
 80089a0:	bf0c      	ite	eq
 80089a2:	600b      	streq	r3, [r1, #0]
 80089a4:	6053      	strne	r3, [r2, #4]
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 fda4 	bl	80094f4 <__malloc_unlock>
 80089ac:	f104 000b 	add.w	r0, r4, #11
 80089b0:	1d23      	adds	r3, r4, #4
 80089b2:	f020 0007 	bic.w	r0, r0, #7
 80089b6:	1ac2      	subs	r2, r0, r3
 80089b8:	d0cc      	beq.n	8008954 <_malloc_r+0x20>
 80089ba:	1a1b      	subs	r3, r3, r0
 80089bc:	50a3      	str	r3, [r4, r2]
 80089be:	e7c9      	b.n	8008954 <_malloc_r+0x20>
 80089c0:	4622      	mov	r2, r4
 80089c2:	6864      	ldr	r4, [r4, #4]
 80089c4:	e7cc      	b.n	8008960 <_malloc_r+0x2c>
 80089c6:	1cc4      	adds	r4, r0, #3
 80089c8:	f024 0403 	bic.w	r4, r4, #3
 80089cc:	42a0      	cmp	r0, r4
 80089ce:	d0e3      	beq.n	8008998 <_malloc_r+0x64>
 80089d0:	1a21      	subs	r1, r4, r0
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 fabe 	bl	8008f54 <_sbrk_r>
 80089d8:	3001      	adds	r0, #1
 80089da:	d1dd      	bne.n	8008998 <_malloc_r+0x64>
 80089dc:	e7cf      	b.n	800897e <_malloc_r+0x4a>
 80089de:	bf00      	nop
 80089e0:	2000023c 	.word	0x2000023c
 80089e4:	20000240 	.word	0x20000240

080089e8 <__ssputs_r>:
 80089e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ec:	688e      	ldr	r6, [r1, #8]
 80089ee:	429e      	cmp	r6, r3
 80089f0:	4682      	mov	sl, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	4690      	mov	r8, r2
 80089f6:	461f      	mov	r7, r3
 80089f8:	d838      	bhi.n	8008a6c <__ssputs_r+0x84>
 80089fa:	898a      	ldrh	r2, [r1, #12]
 80089fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a00:	d032      	beq.n	8008a68 <__ssputs_r+0x80>
 8008a02:	6825      	ldr	r5, [r4, #0]
 8008a04:	6909      	ldr	r1, [r1, #16]
 8008a06:	eba5 0901 	sub.w	r9, r5, r1
 8008a0a:	6965      	ldr	r5, [r4, #20]
 8008a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a14:	3301      	adds	r3, #1
 8008a16:	444b      	add	r3, r9
 8008a18:	106d      	asrs	r5, r5, #1
 8008a1a:	429d      	cmp	r5, r3
 8008a1c:	bf38      	it	cc
 8008a1e:	461d      	movcc	r5, r3
 8008a20:	0553      	lsls	r3, r2, #21
 8008a22:	d531      	bpl.n	8008a88 <__ssputs_r+0xa0>
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7ff ff85 	bl	8008934 <_malloc_r>
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	b950      	cbnz	r0, 8008a44 <__ssputs_r+0x5c>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	f8ca 3000 	str.w	r3, [sl]
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a44:	6921      	ldr	r1, [r4, #16]
 8008a46:	464a      	mov	r2, r9
 8008a48:	f7ff fb88 	bl	800815c <memcpy>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	6126      	str	r6, [r4, #16]
 8008a5a:	6165      	str	r5, [r4, #20]
 8008a5c:	444e      	add	r6, r9
 8008a5e:	eba5 0509 	sub.w	r5, r5, r9
 8008a62:	6026      	str	r6, [r4, #0]
 8008a64:	60a5      	str	r5, [r4, #8]
 8008a66:	463e      	mov	r6, r7
 8008a68:	42be      	cmp	r6, r7
 8008a6a:	d900      	bls.n	8008a6e <__ssputs_r+0x86>
 8008a6c:	463e      	mov	r6, r7
 8008a6e:	4632      	mov	r2, r6
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	4641      	mov	r1, r8
 8008a74:	f000 fd1e 	bl	80094b4 <memmove>
 8008a78:	68a3      	ldr	r3, [r4, #8]
 8008a7a:	6822      	ldr	r2, [r4, #0]
 8008a7c:	1b9b      	subs	r3, r3, r6
 8008a7e:	4432      	add	r2, r6
 8008a80:	60a3      	str	r3, [r4, #8]
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	2000      	movs	r0, #0
 8008a86:	e7db      	b.n	8008a40 <__ssputs_r+0x58>
 8008a88:	462a      	mov	r2, r5
 8008a8a:	f000 fd39 	bl	8009500 <_realloc_r>
 8008a8e:	4606      	mov	r6, r0
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d1e1      	bne.n	8008a58 <__ssputs_r+0x70>
 8008a94:	6921      	ldr	r1, [r4, #16]
 8008a96:	4650      	mov	r0, sl
 8008a98:	f7ff fefc 	bl	8008894 <_free_r>
 8008a9c:	e7c7      	b.n	8008a2e <__ssputs_r+0x46>
	...

08008aa0 <_svfiprintf_r>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	4698      	mov	r8, r3
 8008aa6:	898b      	ldrh	r3, [r1, #12]
 8008aa8:	061b      	lsls	r3, r3, #24
 8008aaa:	b09d      	sub	sp, #116	; 0x74
 8008aac:	4607      	mov	r7, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	d50e      	bpl.n	8008ad2 <_svfiprintf_r+0x32>
 8008ab4:	690b      	ldr	r3, [r1, #16]
 8008ab6:	b963      	cbnz	r3, 8008ad2 <_svfiprintf_r+0x32>
 8008ab8:	2140      	movs	r1, #64	; 0x40
 8008aba:	f7ff ff3b 	bl	8008934 <_malloc_r>
 8008abe:	6028      	str	r0, [r5, #0]
 8008ac0:	6128      	str	r0, [r5, #16]
 8008ac2:	b920      	cbnz	r0, 8008ace <_svfiprintf_r+0x2e>
 8008ac4:	230c      	movs	r3, #12
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	e0d1      	b.n	8008c72 <_svfiprintf_r+0x1d2>
 8008ace:	2340      	movs	r3, #64	; 0x40
 8008ad0:	616b      	str	r3, [r5, #20]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad6:	2320      	movs	r3, #32
 8008ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae0:	2330      	movs	r3, #48	; 0x30
 8008ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c8c <_svfiprintf_r+0x1ec>
 8008ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aea:	f04f 0901 	mov.w	r9, #1
 8008aee:	4623      	mov	r3, r4
 8008af0:	469a      	mov	sl, r3
 8008af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af6:	b10a      	cbz	r2, 8008afc <_svfiprintf_r+0x5c>
 8008af8:	2a25      	cmp	r2, #37	; 0x25
 8008afa:	d1f9      	bne.n	8008af0 <_svfiprintf_r+0x50>
 8008afc:	ebba 0b04 	subs.w	fp, sl, r4
 8008b00:	d00b      	beq.n	8008b1a <_svfiprintf_r+0x7a>
 8008b02:	465b      	mov	r3, fp
 8008b04:	4622      	mov	r2, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff ff6d 	bl	80089e8 <__ssputs_r>
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f000 80aa 	beq.w	8008c68 <_svfiprintf_r+0x1c8>
 8008b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b16:	445a      	add	r2, fp
 8008b18:	9209      	str	r2, [sp, #36]	; 0x24
 8008b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 80a2 	beq.w	8008c68 <_svfiprintf_r+0x1c8>
 8008b24:	2300      	movs	r3, #0
 8008b26:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b2e:	f10a 0a01 	add.w	sl, sl, #1
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	9307      	str	r3, [sp, #28]
 8008b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b3c:	4654      	mov	r4, sl
 8008b3e:	2205      	movs	r2, #5
 8008b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b44:	4851      	ldr	r0, [pc, #324]	; (8008c8c <_svfiprintf_r+0x1ec>)
 8008b46:	f7f7 fb53 	bl	80001f0 <memchr>
 8008b4a:	9a04      	ldr	r2, [sp, #16]
 8008b4c:	b9d8      	cbnz	r0, 8008b86 <_svfiprintf_r+0xe6>
 8008b4e:	06d0      	lsls	r0, r2, #27
 8008b50:	bf44      	itt	mi
 8008b52:	2320      	movmi	r3, #32
 8008b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b58:	0711      	lsls	r1, r2, #28
 8008b5a:	bf44      	itt	mi
 8008b5c:	232b      	movmi	r3, #43	; 0x2b
 8008b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b62:	f89a 3000 	ldrb.w	r3, [sl]
 8008b66:	2b2a      	cmp	r3, #42	; 0x2a
 8008b68:	d015      	beq.n	8008b96 <_svfiprintf_r+0xf6>
 8008b6a:	9a07      	ldr	r2, [sp, #28]
 8008b6c:	4654      	mov	r4, sl
 8008b6e:	2000      	movs	r0, #0
 8008b70:	f04f 0c0a 	mov.w	ip, #10
 8008b74:	4621      	mov	r1, r4
 8008b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b7a:	3b30      	subs	r3, #48	; 0x30
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	d94e      	bls.n	8008c1e <_svfiprintf_r+0x17e>
 8008b80:	b1b0      	cbz	r0, 8008bb0 <_svfiprintf_r+0x110>
 8008b82:	9207      	str	r2, [sp, #28]
 8008b84:	e014      	b.n	8008bb0 <_svfiprintf_r+0x110>
 8008b86:	eba0 0308 	sub.w	r3, r0, r8
 8008b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	46a2      	mov	sl, r4
 8008b94:	e7d2      	b.n	8008b3c <_svfiprintf_r+0x9c>
 8008b96:	9b03      	ldr	r3, [sp, #12]
 8008b98:	1d19      	adds	r1, r3, #4
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	9103      	str	r1, [sp, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bfbb      	ittet	lt
 8008ba2:	425b      	neglt	r3, r3
 8008ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ba8:	9307      	strge	r3, [sp, #28]
 8008baa:	9307      	strlt	r3, [sp, #28]
 8008bac:	bfb8      	it	lt
 8008bae:	9204      	strlt	r2, [sp, #16]
 8008bb0:	7823      	ldrb	r3, [r4, #0]
 8008bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb4:	d10c      	bne.n	8008bd0 <_svfiprintf_r+0x130>
 8008bb6:	7863      	ldrb	r3, [r4, #1]
 8008bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bba:	d135      	bne.n	8008c28 <_svfiprintf_r+0x188>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	1d1a      	adds	r2, r3, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	9203      	str	r2, [sp, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bfb8      	it	lt
 8008bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bcc:	3402      	adds	r4, #2
 8008bce:	9305      	str	r3, [sp, #20]
 8008bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c9c <_svfiprintf_r+0x1fc>
 8008bd4:	7821      	ldrb	r1, [r4, #0]
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	4650      	mov	r0, sl
 8008bda:	f7f7 fb09 	bl	80001f0 <memchr>
 8008bde:	b140      	cbz	r0, 8008bf2 <_svfiprintf_r+0x152>
 8008be0:	2340      	movs	r3, #64	; 0x40
 8008be2:	eba0 000a 	sub.w	r0, r0, sl
 8008be6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	4303      	orrs	r3, r0
 8008bee:	3401      	adds	r4, #1
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf6:	4826      	ldr	r0, [pc, #152]	; (8008c90 <_svfiprintf_r+0x1f0>)
 8008bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bfc:	2206      	movs	r2, #6
 8008bfe:	f7f7 faf7 	bl	80001f0 <memchr>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d038      	beq.n	8008c78 <_svfiprintf_r+0x1d8>
 8008c06:	4b23      	ldr	r3, [pc, #140]	; (8008c94 <_svfiprintf_r+0x1f4>)
 8008c08:	bb1b      	cbnz	r3, 8008c52 <_svfiprintf_r+0x1b2>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	3307      	adds	r3, #7
 8008c0e:	f023 0307 	bic.w	r3, r3, #7
 8008c12:	3308      	adds	r3, #8
 8008c14:	9303      	str	r3, [sp, #12]
 8008c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c18:	4433      	add	r3, r6
 8008c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1c:	e767      	b.n	8008aee <_svfiprintf_r+0x4e>
 8008c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c22:	460c      	mov	r4, r1
 8008c24:	2001      	movs	r0, #1
 8008c26:	e7a5      	b.n	8008b74 <_svfiprintf_r+0xd4>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	3401      	adds	r4, #1
 8008c2c:	9305      	str	r3, [sp, #20]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f04f 0c0a 	mov.w	ip, #10
 8008c34:	4620      	mov	r0, r4
 8008c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c3a:	3a30      	subs	r2, #48	; 0x30
 8008c3c:	2a09      	cmp	r2, #9
 8008c3e:	d903      	bls.n	8008c48 <_svfiprintf_r+0x1a8>
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0c5      	beq.n	8008bd0 <_svfiprintf_r+0x130>
 8008c44:	9105      	str	r1, [sp, #20]
 8008c46:	e7c3      	b.n	8008bd0 <_svfiprintf_r+0x130>
 8008c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e7f0      	b.n	8008c34 <_svfiprintf_r+0x194>
 8008c52:	ab03      	add	r3, sp, #12
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	462a      	mov	r2, r5
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <_svfiprintf_r+0x1f8>)
 8008c5a:	a904      	add	r1, sp, #16
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	f7fd fefd 	bl	8006a5c <_printf_float>
 8008c62:	1c42      	adds	r2, r0, #1
 8008c64:	4606      	mov	r6, r0
 8008c66:	d1d6      	bne.n	8008c16 <_svfiprintf_r+0x176>
 8008c68:	89ab      	ldrh	r3, [r5, #12]
 8008c6a:	065b      	lsls	r3, r3, #25
 8008c6c:	f53f af2c 	bmi.w	8008ac8 <_svfiprintf_r+0x28>
 8008c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c72:	b01d      	add	sp, #116	; 0x74
 8008c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c78:	ab03      	add	r3, sp, #12
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	462a      	mov	r2, r5
 8008c7e:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <_svfiprintf_r+0x1f8>)
 8008c80:	a904      	add	r1, sp, #16
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7fe f98e 	bl	8006fa4 <_printf_i>
 8008c88:	e7eb      	b.n	8008c62 <_svfiprintf_r+0x1c2>
 8008c8a:	bf00      	nop
 8008c8c:	0800c36c 	.word	0x0800c36c
 8008c90:	0800c376 	.word	0x0800c376
 8008c94:	08006a5d 	.word	0x08006a5d
 8008c98:	080089e9 	.word	0x080089e9
 8008c9c:	0800c372 	.word	0x0800c372

08008ca0 <__sfputc_r>:
 8008ca0:	6893      	ldr	r3, [r2, #8]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	b410      	push	{r4}
 8008ca8:	6093      	str	r3, [r2, #8]
 8008caa:	da08      	bge.n	8008cbe <__sfputc_r+0x1e>
 8008cac:	6994      	ldr	r4, [r2, #24]
 8008cae:	42a3      	cmp	r3, r4
 8008cb0:	db01      	blt.n	8008cb6 <__sfputc_r+0x16>
 8008cb2:	290a      	cmp	r1, #10
 8008cb4:	d103      	bne.n	8008cbe <__sfputc_r+0x1e>
 8008cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cba:	f000 b99f 	b.w	8008ffc <__swbuf_r>
 8008cbe:	6813      	ldr	r3, [r2, #0]
 8008cc0:	1c58      	adds	r0, r3, #1
 8008cc2:	6010      	str	r0, [r2, #0]
 8008cc4:	7019      	strb	r1, [r3, #0]
 8008cc6:	4608      	mov	r0, r1
 8008cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <__sfputs_r>:
 8008cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	460f      	mov	r7, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	18d5      	adds	r5, r2, r3
 8008cd8:	42ac      	cmp	r4, r5
 8008cda:	d101      	bne.n	8008ce0 <__sfputs_r+0x12>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e007      	b.n	8008cf0 <__sfputs_r+0x22>
 8008ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7ff ffda 	bl	8008ca0 <__sfputc_r>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d1f3      	bne.n	8008cd8 <__sfputs_r+0xa>
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cf4 <_vfiprintf_r>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	b09d      	sub	sp, #116	; 0x74
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	4698      	mov	r8, r3
 8008d00:	4606      	mov	r6, r0
 8008d02:	b118      	cbz	r0, 8008d0c <_vfiprintf_r+0x18>
 8008d04:	6983      	ldr	r3, [r0, #24]
 8008d06:	b90b      	cbnz	r3, 8008d0c <_vfiprintf_r+0x18>
 8008d08:	f7ff f97a 	bl	8008000 <__sinit>
 8008d0c:	4b89      	ldr	r3, [pc, #548]	; (8008f34 <_vfiprintf_r+0x240>)
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	d11b      	bne.n	8008d4a <_vfiprintf_r+0x56>
 8008d12:	6875      	ldr	r5, [r6, #4]
 8008d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d16:	07d9      	lsls	r1, r3, #31
 8008d18:	d405      	bmi.n	8008d26 <_vfiprintf_r+0x32>
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	059a      	lsls	r2, r3, #22
 8008d1e:	d402      	bmi.n	8008d26 <_vfiprintf_r+0x32>
 8008d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d22:	f7ff fa10 	bl	8008146 <__retarget_lock_acquire_recursive>
 8008d26:	89ab      	ldrh	r3, [r5, #12]
 8008d28:	071b      	lsls	r3, r3, #28
 8008d2a:	d501      	bpl.n	8008d30 <_vfiprintf_r+0x3c>
 8008d2c:	692b      	ldr	r3, [r5, #16]
 8008d2e:	b9eb      	cbnz	r3, 8008d6c <_vfiprintf_r+0x78>
 8008d30:	4629      	mov	r1, r5
 8008d32:	4630      	mov	r0, r6
 8008d34:	f000 f9c6 	bl	80090c4 <__swsetup_r>
 8008d38:	b1c0      	cbz	r0, 8008d6c <_vfiprintf_r+0x78>
 8008d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d3c:	07dc      	lsls	r4, r3, #31
 8008d3e:	d50e      	bpl.n	8008d5e <_vfiprintf_r+0x6a>
 8008d40:	f04f 30ff 	mov.w	r0, #4294967295
 8008d44:	b01d      	add	sp, #116	; 0x74
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	4b7b      	ldr	r3, [pc, #492]	; (8008f38 <_vfiprintf_r+0x244>)
 8008d4c:	429d      	cmp	r5, r3
 8008d4e:	d101      	bne.n	8008d54 <_vfiprintf_r+0x60>
 8008d50:	68b5      	ldr	r5, [r6, #8]
 8008d52:	e7df      	b.n	8008d14 <_vfiprintf_r+0x20>
 8008d54:	4b79      	ldr	r3, [pc, #484]	; (8008f3c <_vfiprintf_r+0x248>)
 8008d56:	429d      	cmp	r5, r3
 8008d58:	bf08      	it	eq
 8008d5a:	68f5      	ldreq	r5, [r6, #12]
 8008d5c:	e7da      	b.n	8008d14 <_vfiprintf_r+0x20>
 8008d5e:	89ab      	ldrh	r3, [r5, #12]
 8008d60:	0598      	lsls	r0, r3, #22
 8008d62:	d4ed      	bmi.n	8008d40 <_vfiprintf_r+0x4c>
 8008d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d66:	f7ff f9ef 	bl	8008148 <__retarget_lock_release_recursive>
 8008d6a:	e7e9      	b.n	8008d40 <_vfiprintf_r+0x4c>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d70:	2320      	movs	r3, #32
 8008d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d7a:	2330      	movs	r3, #48	; 0x30
 8008d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f40 <_vfiprintf_r+0x24c>
 8008d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d84:	f04f 0901 	mov.w	r9, #1
 8008d88:	4623      	mov	r3, r4
 8008d8a:	469a      	mov	sl, r3
 8008d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d90:	b10a      	cbz	r2, 8008d96 <_vfiprintf_r+0xa2>
 8008d92:	2a25      	cmp	r2, #37	; 0x25
 8008d94:	d1f9      	bne.n	8008d8a <_vfiprintf_r+0x96>
 8008d96:	ebba 0b04 	subs.w	fp, sl, r4
 8008d9a:	d00b      	beq.n	8008db4 <_vfiprintf_r+0xc0>
 8008d9c:	465b      	mov	r3, fp
 8008d9e:	4622      	mov	r2, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7ff ff93 	bl	8008cce <__sfputs_r>
 8008da8:	3001      	adds	r0, #1
 8008daa:	f000 80aa 	beq.w	8008f02 <_vfiprintf_r+0x20e>
 8008dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db0:	445a      	add	r2, fp
 8008db2:	9209      	str	r2, [sp, #36]	; 0x24
 8008db4:	f89a 3000 	ldrb.w	r3, [sl]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 80a2 	beq.w	8008f02 <_vfiprintf_r+0x20e>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc8:	f10a 0a01 	add.w	sl, sl, #1
 8008dcc:	9304      	str	r3, [sp, #16]
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd6:	4654      	mov	r4, sl
 8008dd8:	2205      	movs	r2, #5
 8008dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dde:	4858      	ldr	r0, [pc, #352]	; (8008f40 <_vfiprintf_r+0x24c>)
 8008de0:	f7f7 fa06 	bl	80001f0 <memchr>
 8008de4:	9a04      	ldr	r2, [sp, #16]
 8008de6:	b9d8      	cbnz	r0, 8008e20 <_vfiprintf_r+0x12c>
 8008de8:	06d1      	lsls	r1, r2, #27
 8008dea:	bf44      	itt	mi
 8008dec:	2320      	movmi	r3, #32
 8008dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df2:	0713      	lsls	r3, r2, #28
 8008df4:	bf44      	itt	mi
 8008df6:	232b      	movmi	r3, #43	; 0x2b
 8008df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8008e00:	2b2a      	cmp	r3, #42	; 0x2a
 8008e02:	d015      	beq.n	8008e30 <_vfiprintf_r+0x13c>
 8008e04:	9a07      	ldr	r2, [sp, #28]
 8008e06:	4654      	mov	r4, sl
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f04f 0c0a 	mov.w	ip, #10
 8008e0e:	4621      	mov	r1, r4
 8008e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e14:	3b30      	subs	r3, #48	; 0x30
 8008e16:	2b09      	cmp	r3, #9
 8008e18:	d94e      	bls.n	8008eb8 <_vfiprintf_r+0x1c4>
 8008e1a:	b1b0      	cbz	r0, 8008e4a <_vfiprintf_r+0x156>
 8008e1c:	9207      	str	r2, [sp, #28]
 8008e1e:	e014      	b.n	8008e4a <_vfiprintf_r+0x156>
 8008e20:	eba0 0308 	sub.w	r3, r0, r8
 8008e24:	fa09 f303 	lsl.w	r3, r9, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	46a2      	mov	sl, r4
 8008e2e:	e7d2      	b.n	8008dd6 <_vfiprintf_r+0xe2>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	1d19      	adds	r1, r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	9103      	str	r1, [sp, #12]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bfbb      	ittet	lt
 8008e3c:	425b      	neglt	r3, r3
 8008e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e42:	9307      	strge	r3, [sp, #28]
 8008e44:	9307      	strlt	r3, [sp, #28]
 8008e46:	bfb8      	it	lt
 8008e48:	9204      	strlt	r2, [sp, #16]
 8008e4a:	7823      	ldrb	r3, [r4, #0]
 8008e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4e:	d10c      	bne.n	8008e6a <_vfiprintf_r+0x176>
 8008e50:	7863      	ldrb	r3, [r4, #1]
 8008e52:	2b2a      	cmp	r3, #42	; 0x2a
 8008e54:	d135      	bne.n	8008ec2 <_vfiprintf_r+0x1ce>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	9203      	str	r2, [sp, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bfb8      	it	lt
 8008e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e66:	3402      	adds	r4, #2
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f50 <_vfiprintf_r+0x25c>
 8008e6e:	7821      	ldrb	r1, [r4, #0]
 8008e70:	2203      	movs	r2, #3
 8008e72:	4650      	mov	r0, sl
 8008e74:	f7f7 f9bc 	bl	80001f0 <memchr>
 8008e78:	b140      	cbz	r0, 8008e8c <_vfiprintf_r+0x198>
 8008e7a:	2340      	movs	r3, #64	; 0x40
 8008e7c:	eba0 000a 	sub.w	r0, r0, sl
 8008e80:	fa03 f000 	lsl.w	r0, r3, r0
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	4303      	orrs	r3, r0
 8008e88:	3401      	adds	r4, #1
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e90:	482c      	ldr	r0, [pc, #176]	; (8008f44 <_vfiprintf_r+0x250>)
 8008e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e96:	2206      	movs	r2, #6
 8008e98:	f7f7 f9aa 	bl	80001f0 <memchr>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d03f      	beq.n	8008f20 <_vfiprintf_r+0x22c>
 8008ea0:	4b29      	ldr	r3, [pc, #164]	; (8008f48 <_vfiprintf_r+0x254>)
 8008ea2:	bb1b      	cbnz	r3, 8008eec <_vfiprintf_r+0x1f8>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	3307      	adds	r3, #7
 8008ea8:	f023 0307 	bic.w	r3, r3, #7
 8008eac:	3308      	adds	r3, #8
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb2:	443b      	add	r3, r7
 8008eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb6:	e767      	b.n	8008d88 <_vfiprintf_r+0x94>
 8008eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	e7a5      	b.n	8008e0e <_vfiprintf_r+0x11a>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f04f 0c0a 	mov.w	ip, #10
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed4:	3a30      	subs	r2, #48	; 0x30
 8008ed6:	2a09      	cmp	r2, #9
 8008ed8:	d903      	bls.n	8008ee2 <_vfiprintf_r+0x1ee>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0c5      	beq.n	8008e6a <_vfiprintf_r+0x176>
 8008ede:	9105      	str	r1, [sp, #20]
 8008ee0:	e7c3      	b.n	8008e6a <_vfiprintf_r+0x176>
 8008ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e7f0      	b.n	8008ece <_vfiprintf_r+0x1da>
 8008eec:	ab03      	add	r3, sp, #12
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	462a      	mov	r2, r5
 8008ef2:	4b16      	ldr	r3, [pc, #88]	; (8008f4c <_vfiprintf_r+0x258>)
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7fd fdb0 	bl	8006a5c <_printf_float>
 8008efc:	4607      	mov	r7, r0
 8008efe:	1c78      	adds	r0, r7, #1
 8008f00:	d1d6      	bne.n	8008eb0 <_vfiprintf_r+0x1bc>
 8008f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f04:	07d9      	lsls	r1, r3, #31
 8008f06:	d405      	bmi.n	8008f14 <_vfiprintf_r+0x220>
 8008f08:	89ab      	ldrh	r3, [r5, #12]
 8008f0a:	059a      	lsls	r2, r3, #22
 8008f0c:	d402      	bmi.n	8008f14 <_vfiprintf_r+0x220>
 8008f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f10:	f7ff f91a 	bl	8008148 <__retarget_lock_release_recursive>
 8008f14:	89ab      	ldrh	r3, [r5, #12]
 8008f16:	065b      	lsls	r3, r3, #25
 8008f18:	f53f af12 	bmi.w	8008d40 <_vfiprintf_r+0x4c>
 8008f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f1e:	e711      	b.n	8008d44 <_vfiprintf_r+0x50>
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4b09      	ldr	r3, [pc, #36]	; (8008f4c <_vfiprintf_r+0x258>)
 8008f28:	a904      	add	r1, sp, #16
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7fe f83a 	bl	8006fa4 <_printf_i>
 8008f30:	e7e4      	b.n	8008efc <_vfiprintf_r+0x208>
 8008f32:	bf00      	nop
 8008f34:	0800c1cc 	.word	0x0800c1cc
 8008f38:	0800c1ec 	.word	0x0800c1ec
 8008f3c:	0800c1ac 	.word	0x0800c1ac
 8008f40:	0800c36c 	.word	0x0800c36c
 8008f44:	0800c376 	.word	0x0800c376
 8008f48:	08006a5d 	.word	0x08006a5d
 8008f4c:	08008ccf 	.word	0x08008ccf
 8008f50:	0800c372 	.word	0x0800c372

08008f54 <_sbrk_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d06      	ldr	r5, [pc, #24]	; (8008f70 <_sbrk_r+0x1c>)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	602b      	str	r3, [r5, #0]
 8008f60:	f7f9 ffee 	bl	8002f40 <_sbrk>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d102      	bne.n	8008f6e <_sbrk_r+0x1a>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	b103      	cbz	r3, 8008f6e <_sbrk_r+0x1a>
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	20000400 	.word	0x20000400

08008f74 <__sread>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	460c      	mov	r4, r1
 8008f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7c:	f000 fae6 	bl	800954c <_read_r>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	bfab      	itete	ge
 8008f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f86:	89a3      	ldrhlt	r3, [r4, #12]
 8008f88:	181b      	addge	r3, r3, r0
 8008f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f8e:	bfac      	ite	ge
 8008f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f92:	81a3      	strhlt	r3, [r4, #12]
 8008f94:	bd10      	pop	{r4, pc}

08008f96 <__swrite>:
 8008f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9a:	461f      	mov	r7, r3
 8008f9c:	898b      	ldrh	r3, [r1, #12]
 8008f9e:	05db      	lsls	r3, r3, #23
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	d505      	bpl.n	8008fb4 <__swrite+0x1e>
 8008fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fac:	2302      	movs	r3, #2
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f000 f9f8 	bl	80093a4 <_lseek_r>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	4632      	mov	r2, r6
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	f000 b869 	b.w	80090a0 <_write_r>

08008fce <__sseek>:
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd6:	f000 f9e5 	bl	80093a4 <_lseek_r>
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	89a3      	ldrh	r3, [r4, #12]
 8008fde:	bf15      	itete	ne
 8008fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fea:	81a3      	strheq	r3, [r4, #12]
 8008fec:	bf18      	it	ne
 8008fee:	81a3      	strhne	r3, [r4, #12]
 8008ff0:	bd10      	pop	{r4, pc}

08008ff2 <__sclose>:
 8008ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff6:	f000 b8f1 	b.w	80091dc <_close_r>
	...

08008ffc <__swbuf_r>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	460e      	mov	r6, r1
 8009000:	4614      	mov	r4, r2
 8009002:	4605      	mov	r5, r0
 8009004:	b118      	cbz	r0, 800900e <__swbuf_r+0x12>
 8009006:	6983      	ldr	r3, [r0, #24]
 8009008:	b90b      	cbnz	r3, 800900e <__swbuf_r+0x12>
 800900a:	f7fe fff9 	bl	8008000 <__sinit>
 800900e:	4b21      	ldr	r3, [pc, #132]	; (8009094 <__swbuf_r+0x98>)
 8009010:	429c      	cmp	r4, r3
 8009012:	d12b      	bne.n	800906c <__swbuf_r+0x70>
 8009014:	686c      	ldr	r4, [r5, #4]
 8009016:	69a3      	ldr	r3, [r4, #24]
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	071a      	lsls	r2, r3, #28
 800901e:	d52f      	bpl.n	8009080 <__swbuf_r+0x84>
 8009020:	6923      	ldr	r3, [r4, #16]
 8009022:	b36b      	cbz	r3, 8009080 <__swbuf_r+0x84>
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	6820      	ldr	r0, [r4, #0]
 8009028:	1ac0      	subs	r0, r0, r3
 800902a:	6963      	ldr	r3, [r4, #20]
 800902c:	b2f6      	uxtb	r6, r6
 800902e:	4283      	cmp	r3, r0
 8009030:	4637      	mov	r7, r6
 8009032:	dc04      	bgt.n	800903e <__swbuf_r+0x42>
 8009034:	4621      	mov	r1, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f966 	bl	8009308 <_fflush_r>
 800903c:	bb30      	cbnz	r0, 800908c <__swbuf_r+0x90>
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	3b01      	subs	r3, #1
 8009042:	60a3      	str	r3, [r4, #8]
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	6022      	str	r2, [r4, #0]
 800904a:	701e      	strb	r6, [r3, #0]
 800904c:	6963      	ldr	r3, [r4, #20]
 800904e:	3001      	adds	r0, #1
 8009050:	4283      	cmp	r3, r0
 8009052:	d004      	beq.n	800905e <__swbuf_r+0x62>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	07db      	lsls	r3, r3, #31
 8009058:	d506      	bpl.n	8009068 <__swbuf_r+0x6c>
 800905a:	2e0a      	cmp	r6, #10
 800905c:	d104      	bne.n	8009068 <__swbuf_r+0x6c>
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 f951 	bl	8009308 <_fflush_r>
 8009066:	b988      	cbnz	r0, 800908c <__swbuf_r+0x90>
 8009068:	4638      	mov	r0, r7
 800906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <__swbuf_r+0x9c>)
 800906e:	429c      	cmp	r4, r3
 8009070:	d101      	bne.n	8009076 <__swbuf_r+0x7a>
 8009072:	68ac      	ldr	r4, [r5, #8]
 8009074:	e7cf      	b.n	8009016 <__swbuf_r+0x1a>
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <__swbuf_r+0xa0>)
 8009078:	429c      	cmp	r4, r3
 800907a:	bf08      	it	eq
 800907c:	68ec      	ldreq	r4, [r5, #12]
 800907e:	e7ca      	b.n	8009016 <__swbuf_r+0x1a>
 8009080:	4621      	mov	r1, r4
 8009082:	4628      	mov	r0, r5
 8009084:	f000 f81e 	bl	80090c4 <__swsetup_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	d0cb      	beq.n	8009024 <__swbuf_r+0x28>
 800908c:	f04f 37ff 	mov.w	r7, #4294967295
 8009090:	e7ea      	b.n	8009068 <__swbuf_r+0x6c>
 8009092:	bf00      	nop
 8009094:	0800c1cc 	.word	0x0800c1cc
 8009098:	0800c1ec 	.word	0x0800c1ec
 800909c:	0800c1ac 	.word	0x0800c1ac

080090a0 <_write_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	; (80090c0 <_write_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f9 fef5 	bl	8002e9e <_write>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_write_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_write_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20000400 	.word	0x20000400

080090c4 <__swsetup_r>:
 80090c4:	4b32      	ldr	r3, [pc, #200]	; (8009190 <__swsetup_r+0xcc>)
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	681d      	ldr	r5, [r3, #0]
 80090ca:	4606      	mov	r6, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	b125      	cbz	r5, 80090da <__swsetup_r+0x16>
 80090d0:	69ab      	ldr	r3, [r5, #24]
 80090d2:	b913      	cbnz	r3, 80090da <__swsetup_r+0x16>
 80090d4:	4628      	mov	r0, r5
 80090d6:	f7fe ff93 	bl	8008000 <__sinit>
 80090da:	4b2e      	ldr	r3, [pc, #184]	; (8009194 <__swsetup_r+0xd0>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	d10f      	bne.n	8009100 <__swsetup_r+0x3c>
 80090e0:	686c      	ldr	r4, [r5, #4]
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090e8:	0719      	lsls	r1, r3, #28
 80090ea:	d42c      	bmi.n	8009146 <__swsetup_r+0x82>
 80090ec:	06dd      	lsls	r5, r3, #27
 80090ee:	d411      	bmi.n	8009114 <__swsetup_r+0x50>
 80090f0:	2309      	movs	r3, #9
 80090f2:	6033      	str	r3, [r6, #0]
 80090f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	e03e      	b.n	800917e <__swsetup_r+0xba>
 8009100:	4b25      	ldr	r3, [pc, #148]	; (8009198 <__swsetup_r+0xd4>)
 8009102:	429c      	cmp	r4, r3
 8009104:	d101      	bne.n	800910a <__swsetup_r+0x46>
 8009106:	68ac      	ldr	r4, [r5, #8]
 8009108:	e7eb      	b.n	80090e2 <__swsetup_r+0x1e>
 800910a:	4b24      	ldr	r3, [pc, #144]	; (800919c <__swsetup_r+0xd8>)
 800910c:	429c      	cmp	r4, r3
 800910e:	bf08      	it	eq
 8009110:	68ec      	ldreq	r4, [r5, #12]
 8009112:	e7e6      	b.n	80090e2 <__swsetup_r+0x1e>
 8009114:	0758      	lsls	r0, r3, #29
 8009116:	d512      	bpl.n	800913e <__swsetup_r+0x7a>
 8009118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800911a:	b141      	cbz	r1, 800912e <__swsetup_r+0x6a>
 800911c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009120:	4299      	cmp	r1, r3
 8009122:	d002      	beq.n	800912a <__swsetup_r+0x66>
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff fbb5 	bl	8008894 <_free_r>
 800912a:	2300      	movs	r3, #0
 800912c:	6363      	str	r3, [r4, #52]	; 0x34
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	2300      	movs	r3, #0
 8009138:	6063      	str	r3, [r4, #4]
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f043 0308 	orr.w	r3, r3, #8
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	b94b      	cbnz	r3, 800915e <__swsetup_r+0x9a>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009154:	d003      	beq.n	800915e <__swsetup_r+0x9a>
 8009156:	4621      	mov	r1, r4
 8009158:	4630      	mov	r0, r6
 800915a:	f000 f959 	bl	8009410 <__smakebuf_r>
 800915e:	89a0      	ldrh	r0, [r4, #12]
 8009160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009164:	f010 0301 	ands.w	r3, r0, #1
 8009168:	d00a      	beq.n	8009180 <__swsetup_r+0xbc>
 800916a:	2300      	movs	r3, #0
 800916c:	60a3      	str	r3, [r4, #8]
 800916e:	6963      	ldr	r3, [r4, #20]
 8009170:	425b      	negs	r3, r3
 8009172:	61a3      	str	r3, [r4, #24]
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	b943      	cbnz	r3, 800918a <__swsetup_r+0xc6>
 8009178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800917c:	d1ba      	bne.n	80090f4 <__swsetup_r+0x30>
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	0781      	lsls	r1, r0, #30
 8009182:	bf58      	it	pl
 8009184:	6963      	ldrpl	r3, [r4, #20]
 8009186:	60a3      	str	r3, [r4, #8]
 8009188:	e7f4      	b.n	8009174 <__swsetup_r+0xb0>
 800918a:	2000      	movs	r0, #0
 800918c:	e7f7      	b.n	800917e <__swsetup_r+0xba>
 800918e:	bf00      	nop
 8009190:	20000024 	.word	0x20000024
 8009194:	0800c1cc 	.word	0x0800c1cc
 8009198:	0800c1ec 	.word	0x0800c1ec
 800919c:	0800c1ac 	.word	0x0800c1ac

080091a0 <__assert_func>:
 80091a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091a2:	4614      	mov	r4, r2
 80091a4:	461a      	mov	r2, r3
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <__assert_func+0x2c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4605      	mov	r5, r0
 80091ac:	68d8      	ldr	r0, [r3, #12]
 80091ae:	b14c      	cbz	r4, 80091c4 <__assert_func+0x24>
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <__assert_func+0x30>)
 80091b2:	9100      	str	r1, [sp, #0]
 80091b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091b8:	4906      	ldr	r1, [pc, #24]	; (80091d4 <__assert_func+0x34>)
 80091ba:	462b      	mov	r3, r5
 80091bc:	f000 f8e0 	bl	8009380 <fiprintf>
 80091c0:	f000 f9e3 	bl	800958a <abort>
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <__assert_func+0x38>)
 80091c6:	461c      	mov	r4, r3
 80091c8:	e7f3      	b.n	80091b2 <__assert_func+0x12>
 80091ca:	bf00      	nop
 80091cc:	20000024 	.word	0x20000024
 80091d0:	0800c37d 	.word	0x0800c37d
 80091d4:	0800c38a 	.word	0x0800c38a
 80091d8:	0800c3b8 	.word	0x0800c3b8

080091dc <_close_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d06      	ldr	r5, [pc, #24]	; (80091f8 <_close_r+0x1c>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7f9 fe75 	bl	8002ed6 <_close>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_close_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_close_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	20000400 	.word	0x20000400

080091fc <__sflush_r>:
 80091fc:	898a      	ldrh	r2, [r1, #12]
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	4605      	mov	r5, r0
 8009204:	0710      	lsls	r0, r2, #28
 8009206:	460c      	mov	r4, r1
 8009208:	d458      	bmi.n	80092bc <__sflush_r+0xc0>
 800920a:	684b      	ldr	r3, [r1, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dc05      	bgt.n	800921c <__sflush_r+0x20>
 8009210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	dc02      	bgt.n	800921c <__sflush_r+0x20>
 8009216:	2000      	movs	r0, #0
 8009218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800921e:	2e00      	cmp	r6, #0
 8009220:	d0f9      	beq.n	8009216 <__sflush_r+0x1a>
 8009222:	2300      	movs	r3, #0
 8009224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009228:	682f      	ldr	r7, [r5, #0]
 800922a:	602b      	str	r3, [r5, #0]
 800922c:	d032      	beq.n	8009294 <__sflush_r+0x98>
 800922e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	075a      	lsls	r2, r3, #29
 8009234:	d505      	bpl.n	8009242 <__sflush_r+0x46>
 8009236:	6863      	ldr	r3, [r4, #4]
 8009238:	1ac0      	subs	r0, r0, r3
 800923a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800923c:	b10b      	cbz	r3, 8009242 <__sflush_r+0x46>
 800923e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009240:	1ac0      	subs	r0, r0, r3
 8009242:	2300      	movs	r3, #0
 8009244:	4602      	mov	r2, r0
 8009246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009248:	6a21      	ldr	r1, [r4, #32]
 800924a:	4628      	mov	r0, r5
 800924c:	47b0      	blx	r6
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	d106      	bne.n	8009262 <__sflush_r+0x66>
 8009254:	6829      	ldr	r1, [r5, #0]
 8009256:	291d      	cmp	r1, #29
 8009258:	d82c      	bhi.n	80092b4 <__sflush_r+0xb8>
 800925a:	4a2a      	ldr	r2, [pc, #168]	; (8009304 <__sflush_r+0x108>)
 800925c:	40ca      	lsrs	r2, r1
 800925e:	07d6      	lsls	r6, r2, #31
 8009260:	d528      	bpl.n	80092b4 <__sflush_r+0xb8>
 8009262:	2200      	movs	r2, #0
 8009264:	6062      	str	r2, [r4, #4]
 8009266:	04d9      	lsls	r1, r3, #19
 8009268:	6922      	ldr	r2, [r4, #16]
 800926a:	6022      	str	r2, [r4, #0]
 800926c:	d504      	bpl.n	8009278 <__sflush_r+0x7c>
 800926e:	1c42      	adds	r2, r0, #1
 8009270:	d101      	bne.n	8009276 <__sflush_r+0x7a>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	b903      	cbnz	r3, 8009278 <__sflush_r+0x7c>
 8009276:	6560      	str	r0, [r4, #84]	; 0x54
 8009278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800927a:	602f      	str	r7, [r5, #0]
 800927c:	2900      	cmp	r1, #0
 800927e:	d0ca      	beq.n	8009216 <__sflush_r+0x1a>
 8009280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009284:	4299      	cmp	r1, r3
 8009286:	d002      	beq.n	800928e <__sflush_r+0x92>
 8009288:	4628      	mov	r0, r5
 800928a:	f7ff fb03 	bl	8008894 <_free_r>
 800928e:	2000      	movs	r0, #0
 8009290:	6360      	str	r0, [r4, #52]	; 0x34
 8009292:	e7c1      	b.n	8009218 <__sflush_r+0x1c>
 8009294:	6a21      	ldr	r1, [r4, #32]
 8009296:	2301      	movs	r3, #1
 8009298:	4628      	mov	r0, r5
 800929a:	47b0      	blx	r6
 800929c:	1c41      	adds	r1, r0, #1
 800929e:	d1c7      	bne.n	8009230 <__sflush_r+0x34>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0c4      	beq.n	8009230 <__sflush_r+0x34>
 80092a6:	2b1d      	cmp	r3, #29
 80092a8:	d001      	beq.n	80092ae <__sflush_r+0xb2>
 80092aa:	2b16      	cmp	r3, #22
 80092ac:	d101      	bne.n	80092b2 <__sflush_r+0xb6>
 80092ae:	602f      	str	r7, [r5, #0]
 80092b0:	e7b1      	b.n	8009216 <__sflush_r+0x1a>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	e7ad      	b.n	8009218 <__sflush_r+0x1c>
 80092bc:	690f      	ldr	r7, [r1, #16]
 80092be:	2f00      	cmp	r7, #0
 80092c0:	d0a9      	beq.n	8009216 <__sflush_r+0x1a>
 80092c2:	0793      	lsls	r3, r2, #30
 80092c4:	680e      	ldr	r6, [r1, #0]
 80092c6:	bf08      	it	eq
 80092c8:	694b      	ldreq	r3, [r1, #20]
 80092ca:	600f      	str	r7, [r1, #0]
 80092cc:	bf18      	it	ne
 80092ce:	2300      	movne	r3, #0
 80092d0:	eba6 0807 	sub.w	r8, r6, r7
 80092d4:	608b      	str	r3, [r1, #8]
 80092d6:	f1b8 0f00 	cmp.w	r8, #0
 80092da:	dd9c      	ble.n	8009216 <__sflush_r+0x1a>
 80092dc:	6a21      	ldr	r1, [r4, #32]
 80092de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092e0:	4643      	mov	r3, r8
 80092e2:	463a      	mov	r2, r7
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b0      	blx	r6
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dc06      	bgt.n	80092fa <__sflush_r+0xfe>
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	e78e      	b.n	8009218 <__sflush_r+0x1c>
 80092fa:	4407      	add	r7, r0
 80092fc:	eba8 0800 	sub.w	r8, r8, r0
 8009300:	e7e9      	b.n	80092d6 <__sflush_r+0xda>
 8009302:	bf00      	nop
 8009304:	20400001 	.word	0x20400001

08009308 <_fflush_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	690b      	ldr	r3, [r1, #16]
 800930c:	4605      	mov	r5, r0
 800930e:	460c      	mov	r4, r1
 8009310:	b913      	cbnz	r3, 8009318 <_fflush_r+0x10>
 8009312:	2500      	movs	r5, #0
 8009314:	4628      	mov	r0, r5
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	b118      	cbz	r0, 8009322 <_fflush_r+0x1a>
 800931a:	6983      	ldr	r3, [r0, #24]
 800931c:	b90b      	cbnz	r3, 8009322 <_fflush_r+0x1a>
 800931e:	f7fe fe6f 	bl	8008000 <__sinit>
 8009322:	4b14      	ldr	r3, [pc, #80]	; (8009374 <_fflush_r+0x6c>)
 8009324:	429c      	cmp	r4, r3
 8009326:	d11b      	bne.n	8009360 <_fflush_r+0x58>
 8009328:	686c      	ldr	r4, [r5, #4]
 800932a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0ef      	beq.n	8009312 <_fflush_r+0xa>
 8009332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009334:	07d0      	lsls	r0, r2, #31
 8009336:	d404      	bmi.n	8009342 <_fflush_r+0x3a>
 8009338:	0599      	lsls	r1, r3, #22
 800933a:	d402      	bmi.n	8009342 <_fflush_r+0x3a>
 800933c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933e:	f7fe ff02 	bl	8008146 <__retarget_lock_acquire_recursive>
 8009342:	4628      	mov	r0, r5
 8009344:	4621      	mov	r1, r4
 8009346:	f7ff ff59 	bl	80091fc <__sflush_r>
 800934a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800934c:	07da      	lsls	r2, r3, #31
 800934e:	4605      	mov	r5, r0
 8009350:	d4e0      	bmi.n	8009314 <_fflush_r+0xc>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	059b      	lsls	r3, r3, #22
 8009356:	d4dd      	bmi.n	8009314 <_fflush_r+0xc>
 8009358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935a:	f7fe fef5 	bl	8008148 <__retarget_lock_release_recursive>
 800935e:	e7d9      	b.n	8009314 <_fflush_r+0xc>
 8009360:	4b05      	ldr	r3, [pc, #20]	; (8009378 <_fflush_r+0x70>)
 8009362:	429c      	cmp	r4, r3
 8009364:	d101      	bne.n	800936a <_fflush_r+0x62>
 8009366:	68ac      	ldr	r4, [r5, #8]
 8009368:	e7df      	b.n	800932a <_fflush_r+0x22>
 800936a:	4b04      	ldr	r3, [pc, #16]	; (800937c <_fflush_r+0x74>)
 800936c:	429c      	cmp	r4, r3
 800936e:	bf08      	it	eq
 8009370:	68ec      	ldreq	r4, [r5, #12]
 8009372:	e7da      	b.n	800932a <_fflush_r+0x22>
 8009374:	0800c1cc 	.word	0x0800c1cc
 8009378:	0800c1ec 	.word	0x0800c1ec
 800937c:	0800c1ac 	.word	0x0800c1ac

08009380 <fiprintf>:
 8009380:	b40e      	push	{r1, r2, r3}
 8009382:	b503      	push	{r0, r1, lr}
 8009384:	4601      	mov	r1, r0
 8009386:	ab03      	add	r3, sp, #12
 8009388:	4805      	ldr	r0, [pc, #20]	; (80093a0 <fiprintf+0x20>)
 800938a:	f853 2b04 	ldr.w	r2, [r3], #4
 800938e:	6800      	ldr	r0, [r0, #0]
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f7ff fcaf 	bl	8008cf4 <_vfiprintf_r>
 8009396:	b002      	add	sp, #8
 8009398:	f85d eb04 	ldr.w	lr, [sp], #4
 800939c:	b003      	add	sp, #12
 800939e:	4770      	bx	lr
 80093a0:	20000024 	.word	0x20000024

080093a4 <_lseek_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_lseek_r+0x20>)
 80093a8:	4604      	mov	r4, r0
 80093aa:	4608      	mov	r0, r1
 80093ac:	4611      	mov	r1, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f7f9 fdb6 	bl	8002f24 <_lseek>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_lseek_r+0x1e>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_lseek_r+0x1e>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20000400 	.word	0x20000400

080093c8 <__swhatbuf_r>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	460e      	mov	r6, r1
 80093cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d0:	2900      	cmp	r1, #0
 80093d2:	b096      	sub	sp, #88	; 0x58
 80093d4:	4614      	mov	r4, r2
 80093d6:	461d      	mov	r5, r3
 80093d8:	da07      	bge.n	80093ea <__swhatbuf_r+0x22>
 80093da:	2300      	movs	r3, #0
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	89b3      	ldrh	r3, [r6, #12]
 80093e0:	061a      	lsls	r2, r3, #24
 80093e2:	d410      	bmi.n	8009406 <__swhatbuf_r+0x3e>
 80093e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e8:	e00e      	b.n	8009408 <__swhatbuf_r+0x40>
 80093ea:	466a      	mov	r2, sp
 80093ec:	f000 f8d4 	bl	8009598 <_fstat_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dbf2      	blt.n	80093da <__swhatbuf_r+0x12>
 80093f4:	9a01      	ldr	r2, [sp, #4]
 80093f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093fe:	425a      	negs	r2, r3
 8009400:	415a      	adcs	r2, r3
 8009402:	602a      	str	r2, [r5, #0]
 8009404:	e7ee      	b.n	80093e4 <__swhatbuf_r+0x1c>
 8009406:	2340      	movs	r3, #64	; 0x40
 8009408:	2000      	movs	r0, #0
 800940a:	6023      	str	r3, [r4, #0]
 800940c:	b016      	add	sp, #88	; 0x58
 800940e:	bd70      	pop	{r4, r5, r6, pc}

08009410 <__smakebuf_r>:
 8009410:	898b      	ldrh	r3, [r1, #12]
 8009412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009414:	079d      	lsls	r5, r3, #30
 8009416:	4606      	mov	r6, r0
 8009418:	460c      	mov	r4, r1
 800941a:	d507      	bpl.n	800942c <__smakebuf_r+0x1c>
 800941c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	2301      	movs	r3, #1
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	b002      	add	sp, #8
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	ab01      	add	r3, sp, #4
 800942e:	466a      	mov	r2, sp
 8009430:	f7ff ffca 	bl	80093c8 <__swhatbuf_r>
 8009434:	9900      	ldr	r1, [sp, #0]
 8009436:	4605      	mov	r5, r0
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff fa7b 	bl	8008934 <_malloc_r>
 800943e:	b948      	cbnz	r0, 8009454 <__smakebuf_r+0x44>
 8009440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009444:	059a      	lsls	r2, r3, #22
 8009446:	d4ef      	bmi.n	8009428 <__smakebuf_r+0x18>
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	f043 0302 	orr.w	r3, r3, #2
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	e7e3      	b.n	800941c <__smakebuf_r+0xc>
 8009454:	4b0d      	ldr	r3, [pc, #52]	; (800948c <__smakebuf_r+0x7c>)
 8009456:	62b3      	str	r3, [r6, #40]	; 0x28
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	6020      	str	r0, [r4, #0]
 800945c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	6163      	str	r3, [r4, #20]
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	6120      	str	r0, [r4, #16]
 800946a:	b15b      	cbz	r3, 8009484 <__smakebuf_r+0x74>
 800946c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009470:	4630      	mov	r0, r6
 8009472:	f000 f8a3 	bl	80095bc <_isatty_r>
 8009476:	b128      	cbz	r0, 8009484 <__smakebuf_r+0x74>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	89a0      	ldrh	r0, [r4, #12]
 8009486:	4305      	orrs	r5, r0
 8009488:	81a5      	strh	r5, [r4, #12]
 800948a:	e7cd      	b.n	8009428 <__smakebuf_r+0x18>
 800948c:	08007f99 	.word	0x08007f99

08009490 <__ascii_mbtowc>:
 8009490:	b082      	sub	sp, #8
 8009492:	b901      	cbnz	r1, 8009496 <__ascii_mbtowc+0x6>
 8009494:	a901      	add	r1, sp, #4
 8009496:	b142      	cbz	r2, 80094aa <__ascii_mbtowc+0x1a>
 8009498:	b14b      	cbz	r3, 80094ae <__ascii_mbtowc+0x1e>
 800949a:	7813      	ldrb	r3, [r2, #0]
 800949c:	600b      	str	r3, [r1, #0]
 800949e:	7812      	ldrb	r2, [r2, #0]
 80094a0:	1e10      	subs	r0, r2, #0
 80094a2:	bf18      	it	ne
 80094a4:	2001      	movne	r0, #1
 80094a6:	b002      	add	sp, #8
 80094a8:	4770      	bx	lr
 80094aa:	4610      	mov	r0, r2
 80094ac:	e7fb      	b.n	80094a6 <__ascii_mbtowc+0x16>
 80094ae:	f06f 0001 	mvn.w	r0, #1
 80094b2:	e7f8      	b.n	80094a6 <__ascii_mbtowc+0x16>

080094b4 <memmove>:
 80094b4:	4288      	cmp	r0, r1
 80094b6:	b510      	push	{r4, lr}
 80094b8:	eb01 0402 	add.w	r4, r1, r2
 80094bc:	d902      	bls.n	80094c4 <memmove+0x10>
 80094be:	4284      	cmp	r4, r0
 80094c0:	4623      	mov	r3, r4
 80094c2:	d807      	bhi.n	80094d4 <memmove+0x20>
 80094c4:	1e43      	subs	r3, r0, #1
 80094c6:	42a1      	cmp	r1, r4
 80094c8:	d008      	beq.n	80094dc <memmove+0x28>
 80094ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d2:	e7f8      	b.n	80094c6 <memmove+0x12>
 80094d4:	4402      	add	r2, r0
 80094d6:	4601      	mov	r1, r0
 80094d8:	428a      	cmp	r2, r1
 80094da:	d100      	bne.n	80094de <memmove+0x2a>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094e6:	e7f7      	b.n	80094d8 <memmove+0x24>

080094e8 <__malloc_lock>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__malloc_lock+0x8>)
 80094ea:	f7fe be2c 	b.w	8008146 <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	200003f8 	.word	0x200003f8

080094f4 <__malloc_unlock>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__malloc_unlock+0x8>)
 80094f6:	f7fe be27 	b.w	8008148 <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	200003f8 	.word	0x200003f8

08009500 <_realloc_r>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	4607      	mov	r7, r0
 8009504:	4614      	mov	r4, r2
 8009506:	460e      	mov	r6, r1
 8009508:	b921      	cbnz	r1, 8009514 <_realloc_r+0x14>
 800950a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800950e:	4611      	mov	r1, r2
 8009510:	f7ff ba10 	b.w	8008934 <_malloc_r>
 8009514:	b922      	cbnz	r2, 8009520 <_realloc_r+0x20>
 8009516:	f7ff f9bd 	bl	8008894 <_free_r>
 800951a:	4625      	mov	r5, r4
 800951c:	4628      	mov	r0, r5
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009520:	f000 f85c 	bl	80095dc <_malloc_usable_size_r>
 8009524:	42a0      	cmp	r0, r4
 8009526:	d20f      	bcs.n	8009548 <_realloc_r+0x48>
 8009528:	4621      	mov	r1, r4
 800952a:	4638      	mov	r0, r7
 800952c:	f7ff fa02 	bl	8008934 <_malloc_r>
 8009530:	4605      	mov	r5, r0
 8009532:	2800      	cmp	r0, #0
 8009534:	d0f2      	beq.n	800951c <_realloc_r+0x1c>
 8009536:	4631      	mov	r1, r6
 8009538:	4622      	mov	r2, r4
 800953a:	f7fe fe0f 	bl	800815c <memcpy>
 800953e:	4631      	mov	r1, r6
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff f9a7 	bl	8008894 <_free_r>
 8009546:	e7e9      	b.n	800951c <_realloc_r+0x1c>
 8009548:	4635      	mov	r5, r6
 800954a:	e7e7      	b.n	800951c <_realloc_r+0x1c>

0800954c <_read_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	; (800956c <_read_r+0x20>)
 8009550:	4604      	mov	r4, r0
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	602a      	str	r2, [r5, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7f9 fc82 	bl	8002e64 <_read>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_read_r+0x1e>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_read_r+0x1e>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20000400 	.word	0x20000400

08009570 <__ascii_wctomb>:
 8009570:	b149      	cbz	r1, 8009586 <__ascii_wctomb+0x16>
 8009572:	2aff      	cmp	r2, #255	; 0xff
 8009574:	bf85      	ittet	hi
 8009576:	238a      	movhi	r3, #138	; 0x8a
 8009578:	6003      	strhi	r3, [r0, #0]
 800957a:	700a      	strbls	r2, [r1, #0]
 800957c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009580:	bf98      	it	ls
 8009582:	2001      	movls	r0, #1
 8009584:	4770      	bx	lr
 8009586:	4608      	mov	r0, r1
 8009588:	4770      	bx	lr

0800958a <abort>:
 800958a:	b508      	push	{r3, lr}
 800958c:	2006      	movs	r0, #6
 800958e:	f000 f855 	bl	800963c <raise>
 8009592:	2001      	movs	r0, #1
 8009594:	f7f9 fc5c 	bl	8002e50 <_exit>

08009598 <_fstat_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d07      	ldr	r5, [pc, #28]	; (80095b8 <_fstat_r+0x20>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	f7f9 fca2 	bl	8002eee <_fstat>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d102      	bne.n	80095b4 <_fstat_r+0x1c>
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	b103      	cbz	r3, 80095b4 <_fstat_r+0x1c>
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	20000400 	.word	0x20000400

080095bc <_isatty_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	4d06      	ldr	r5, [pc, #24]	; (80095d8 <_isatty_r+0x1c>)
 80095c0:	2300      	movs	r3, #0
 80095c2:	4604      	mov	r4, r0
 80095c4:	4608      	mov	r0, r1
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	f7f9 fca1 	bl	8002f0e <_isatty>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_isatty_r+0x1a>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_isatty_r+0x1a>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20000400 	.word	0x20000400

080095dc <_malloc_usable_size_r>:
 80095dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095e0:	1f18      	subs	r0, r3, #4
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfbc      	itt	lt
 80095e6:	580b      	ldrlt	r3, [r1, r0]
 80095e8:	18c0      	addlt	r0, r0, r3
 80095ea:	4770      	bx	lr

080095ec <_raise_r>:
 80095ec:	291f      	cmp	r1, #31
 80095ee:	b538      	push	{r3, r4, r5, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	d904      	bls.n	8009600 <_raise_r+0x14>
 80095f6:	2316      	movs	r3, #22
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009602:	b112      	cbz	r2, 800960a <_raise_r+0x1e>
 8009604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009608:	b94b      	cbnz	r3, 800961e <_raise_r+0x32>
 800960a:	4620      	mov	r0, r4
 800960c:	f000 f830 	bl	8009670 <_getpid_r>
 8009610:	462a      	mov	r2, r5
 8009612:	4601      	mov	r1, r0
 8009614:	4620      	mov	r0, r4
 8009616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800961a:	f000 b817 	b.w	800964c <_kill_r>
 800961e:	2b01      	cmp	r3, #1
 8009620:	d00a      	beq.n	8009638 <_raise_r+0x4c>
 8009622:	1c59      	adds	r1, r3, #1
 8009624:	d103      	bne.n	800962e <_raise_r+0x42>
 8009626:	2316      	movs	r3, #22
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	2001      	movs	r0, #1
 800962c:	e7e7      	b.n	80095fe <_raise_r+0x12>
 800962e:	2400      	movs	r4, #0
 8009630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009634:	4628      	mov	r0, r5
 8009636:	4798      	blx	r3
 8009638:	2000      	movs	r0, #0
 800963a:	e7e0      	b.n	80095fe <_raise_r+0x12>

0800963c <raise>:
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <raise+0xc>)
 800963e:	4601      	mov	r1, r0
 8009640:	6818      	ldr	r0, [r3, #0]
 8009642:	f7ff bfd3 	b.w	80095ec <_raise_r>
 8009646:	bf00      	nop
 8009648:	20000024 	.word	0x20000024

0800964c <_kill_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	; (800966c <_kill_r+0x20>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	4611      	mov	r1, r2
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	f7f9 fbe9 	bl	8002e30 <_kill>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d102      	bne.n	8009668 <_kill_r+0x1c>
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b103      	cbz	r3, 8009668 <_kill_r+0x1c>
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	bd38      	pop	{r3, r4, r5, pc}
 800966a:	bf00      	nop
 800966c:	20000400 	.word	0x20000400

08009670 <_getpid_r>:
 8009670:	f7f9 bbd6 	b.w	8002e20 <_getpid>

08009674 <_init>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr

08009680 <_fini>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr
