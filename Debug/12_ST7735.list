
12_ST7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d4c  08008020  08008020  00018020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad6c  0800ad6c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad6c  0800ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad74  0800ad74  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad74  0800ad74  0001ad74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ad7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001f8  0800af70  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  0800af70  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182ad  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e54  00000000  00000000  000384d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0003b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190cc  00000000  00000000  0003cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d88  00000000  00000000  00055bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4b8  00000000  00000000  00068974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2e2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043dc  00000000  00000000  000f2e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008004 	.word	0x08008004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08008004 	.word	0x08008004

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	4608      	mov	r0, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000ece:	88f8      	ldrh	r0, [r7, #6]
 8000ed0:	88b9      	ldrh	r1, [r7, #4]
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	883c      	ldrh	r4, [r7, #0]
 8000ed6:	8b3b      	ldrh	r3, [r7, #24]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4623      	mov	r3, r4
 8000edc:	f000 fa88 	bl	80013f0 <ST7735_FillRectangle>
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}

08000ee8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <fillScreen+0x2c>)
 8000ef4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <fillScreen+0x30>)
 8000efa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	460b      	mov	r3, r1
 8000f04:	2100      	movs	r1, #0
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ffd2 	bl	8000eb0 <fillRect>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000024c 	.word	0x2000024c
 8000f18:	20000250 	.word	0x20000250

08000f1c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <ST7735_Select+0x14>)
 8000f26:	f002 fadd 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40020000 	.word	0x40020000

08000f34 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <ST7735_Unselect+0x14>)
 8000f3e:	f002 fad1 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020000 	.word	0x40020000

08000f4c <ST7735_Reset>:

void ST7735_Reset()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <ST7735_Reset+0x24>)
 8000f56:	f002 fac5 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f002 f834 	bl	8002fc8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <ST7735_Reset+0x24>)
 8000f66:	f002 fabd 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020000 	.word	0x40020000

08000f74 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2140      	movs	r1, #64	; 0x40
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <ST7735_WriteCommand+0x2c>)
 8000f84:	f002 faae 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f88:	1df9      	adds	r1, r7, #7
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <ST7735_WriteCommand+0x30>)
 8000f92:	f003 ff6a 	bl	8004e6a <HAL_SPI_Transmit>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	2000030c 	.word	0x2000030c

08000fa8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <ST7735_WriteData+0x2c>)
 8000fb8:	f002 fa94 	bl	80034e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <ST7735_WriteData+0x30>)
 8000fc8:	f003 ff4f 	bl	8004e6a <HAL_SPI_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	2000030c 	.word	0x2000030c

08000fdc <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000fee:	e034      	b.n	800105a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffb9 	bl	8000f74 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800100c:	7abb      	ldrb	r3, [r7, #10]
 800100e:	b29b      	uxth	r3, r3
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800101c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffbd 	bl	8000fa8 <ST7735_WriteData>
            addr += numArgs;
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <DisplayInit+0x7e>
            ms = *addr++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	2bff      	cmp	r3, #255	; 0xff
 800104a:	d102      	bne.n	8001052 <DisplayInit+0x76>
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f001 ffb7 	bl	8002fc8 <HAL_Delay>
    while(numCommands--) {
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	73fa      	strb	r2, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1c5      	bne.n	8000ff0 <DisplayInit+0x14>
        }
    }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4623      	mov	r3, r4
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	460b      	mov	r3, r1
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	4613      	mov	r3, r2
 800108c:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800108e:	202a      	movs	r0, #42	; 0x2a
 8001090:	f7ff ff70 	bl	8000f74 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001094:	2300      	movs	r3, #0
 8001096:	733b      	strb	r3, [r7, #12]
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <ST7735_SetAddressWindow+0x88>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4413      	add	r3, r2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	737b      	strb	r3, [r7, #13]
 80010a4:	2300      	movs	r3, #0
 80010a6:	73bb      	strb	r3, [r7, #14]
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <ST7735_SetAddressWindow+0x88>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	4413      	add	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff74 	bl	8000fa8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80010c0:	202b      	movs	r0, #43	; 0x2b
 80010c2:	f7ff ff57 	bl	8000f74 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <ST7735_SetAddressWindow+0x8c>)
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	4413      	add	r3, r2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <ST7735_SetAddressWindow+0x8c>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	793b      	ldrb	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80010ea:	202c      	movs	r0, #44	; 0x2c
 80010ec:	f7ff ff42 	bl	8000f74 <ST7735_WriteCommand>
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	20000244 	.word	0x20000244
 80010fc:	20000248 	.word	0x20000248

08001100 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800110a:	f7ff ff07 	bl	8000f1c <ST7735_Select>
    ST7735_Reset();
 800110e:	f7ff ff1d 	bl	8000f4c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <ST7735_Init+0x44>)
 8001114:	f7ff ff62 	bl	8000fdc <DisplayInit>
    DisplayInit(init_cmds2);
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <ST7735_Init+0x48>)
 800111a:	f7ff ff5f 	bl	8000fdc <DisplayInit>
    DisplayInit(init_cmds3);
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <ST7735_Init+0x4c>)
 8001120:	f7ff ff5c 	bl	8000fdc <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <ST7735_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <ST7735_Init+0x54>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f810 	bl	8001158 <ST7735_SetRotation>
    ST7735_Unselect();
 8001138:	f7ff fefc 	bl	8000f34 <ST7735_Unselect>

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	080080e8 	.word	0x080080e8
 8001148:	08008120 	.word	0x08008120
 800114c:	08008130 	.word	0x08008130
 8001150:	20000245 	.word	0x20000245
 8001154:	20000249 	.word	0x20000249

08001158 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <ST7735_SetRotation+0xe4>)
 8001170:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <ST7735_SetRotation+0xe4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d84e      	bhi.n	8001218 <ST7735_SetRotation+0xc0>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <ST7735_SetRotation+0x28>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001191 	.word	0x08001191
 8001184:	080011b3 	.word	0x080011b3
 8001188:	080011d5 	.word	0x080011d5
 800118c:	080011f7 	.word	0x080011f7
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001194:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <ST7735_SetRotation+0xe8>)
 8001196:	22a0      	movs	r2, #160	; 0xa0
 8001198:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <ST7735_SetRotation+0xec>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80011a0:	4b29      	ldr	r3, [pc, #164]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <ST7735_SetRotation+0xf4>)
 80011a6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011ae:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011b0:	e032      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <ST7735_SetRotation+0xec>)
 80011b8:	22a0      	movs	r2, #160	; 0xa0
 80011ba:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <ST7735_SetRotation+0xe8>)
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011c8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <ST7735_SetRotation+0xf4>)
 80011d0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011d2:	e021      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <ST7735_SetRotation+0xe8>)
 80011da:	22a0      	movs	r2, #160	; 0xa0
 80011dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <ST7735_SetRotation+0xec>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <ST7735_SetRotation+0xf0>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <ST7735_SetRotation+0xf4>)
 80011ea:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <ST7735_SetRotation+0xf8>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <ST7735_SetRotation+0xfc>)
 80011f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011f4:	e010      	b.n	8001218 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <ST7735_SetRotation+0xec>)
 80011fc:	22a0      	movs	r2, #160	; 0xa0
 80011fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <ST7735_SetRotation+0xe8>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <ST7735_SetRotation+0xf0>)
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <ST7735_SetRotation+0xfc>)
 800120c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <ST7735_SetRotation+0xf8>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <ST7735_SetRotation+0xf4>)
 8001214:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001216:	bf00      	nop
  }
  ST7735_Select();
 8001218:	f7ff fe80 	bl	8000f1c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800121c:	2036      	movs	r0, #54	; 0x36
 800121e:	f7ff fea9 	bl	8000f74 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001222:	f107 030f 	add.w	r3, r7, #15
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff febd 	bl	8000fa8 <ST7735_WriteData>
  ST7735_Unselect();
 800122e:	f7ff fe81 	bl	8000f34 <ST7735_Unselect>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000024a 	.word	0x2000024a
 8001240:	20000250 	.word	0x20000250
 8001244:	2000024c 	.word	0x2000024c
 8001248:	20000245 	.word	0x20000245
 800124c:	20000244 	.word	0x20000244
 8001250:	20000249 	.word	0x20000249
 8001254:	20000248 	.word	0x20000248

08001258 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001258:	b082      	sub	sp, #8
 800125a:	b590      	push	{r4, r7, lr}
 800125c:	b089      	sub	sp, #36	; 0x24
 800125e:	af00      	add	r7, sp, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	460b      	mov	r3, r1
 8001268:	80bb      	strh	r3, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2d8      	uxtb	r0, r3
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b2dc      	uxtb	r4, r3
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800128e:	4413      	add	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4622      	mov	r2, r4
 8001298:	f7ff feea 	bl	8001070 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e043      	b.n	800132a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	3b20      	subs	r3, #32
 80012a8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	440b      	add	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	e029      	b.n	8001318 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00e      	beq.n	80012f2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	743b      	strb	r3, [r7, #16]
 80012de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fe5c 	bl	8000fa8 <ST7735_WriteData>
 80012f0:	e00f      	b.n	8001312 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	733b      	strb	r3, [r7, #12]
 80012fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001302:	b2db      	uxtb	r3, r3
 8001304:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2102      	movs	r1, #2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe4b 	bl	8000fa8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	3301      	adds	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800131c:	461a      	mov	r2, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4293      	cmp	r3, r2
 8001322:	d3cf      	bcc.n	80012c4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3301      	adds	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800132e:	461a      	mov	r2, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4293      	cmp	r3, r2
 8001334:	d3b5      	bcc.n	80012a2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001342:	b002      	add	sp, #8
 8001344:	4770      	bx	lr
	...

08001348 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001348:	b082      	sub	sp, #8
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af04      	add	r7, sp, #16
 8001350:	603a      	str	r2, [r7, #0]
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
 8001358:	460b      	mov	r3, r1
 800135a:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800135c:	f7ff fdde 	bl	8000f1c <ST7735_Select>

    while(*str) {
 8001360:	e033      	b.n	80013ca <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	7d3a      	ldrb	r2, [r7, #20]
 8001366:	4413      	add	r3, r2
 8001368:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <ST7735_WriteString+0xa0>)
 800136a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800136e:	4293      	cmp	r3, r2
 8001370:	db16      	blt.n	80013a0 <ST7735_WriteString+0x58>
            x = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001376:	7d7b      	ldrb	r3, [r7, #21]
 8001378:	b29a      	uxth	r2, r3
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	7d7a      	ldrb	r2, [r7, #21]
 8001384:	4413      	add	r3, r2
 8001386:	4a19      	ldr	r2, [pc, #100]	; (80013ec <ST7735_WriteString+0xa4>)
 8001388:	f9b2 2000 	ldrsh.w	r2, [r2]
 800138c:	4293      	cmp	r3, r2
 800138e:	da21      	bge.n	80013d4 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b20      	cmp	r3, #32
 8001396:	d103      	bne.n	80013a0 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	603b      	str	r3, [r7, #0]
                continue;
 800139e:	e014      	b.n	80013ca <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	88b9      	ldrh	r1, [r7, #4]
 80013a6:	88f8      	ldrh	r0, [r7, #6]
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	8bbb      	ldrh	r3, [r7, #28]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f7ff ff4f 	bl	8001258 <ST7735_WriteChar>
        x += font.width;
 80013ba:	7d3b      	ldrb	r3, [r7, #20]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4413      	add	r3, r2
 80013c2:	80fb      	strh	r3, [r7, #6]
        str++;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1c7      	bne.n	8001362 <ST7735_WriteString+0x1a>
 80013d2:	e000      	b.n	80013d6 <ST7735_WriteString+0x8e>
                break;
 80013d4:	bf00      	nop
    }

    ST7735_Unselect();
 80013d6:	f7ff fdad 	bl	8000f34 <ST7735_Unselect>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e4:	b002      	add	sp, #8
 80013e6:	4770      	bx	lr
 80013e8:	2000024c 	.word	0x2000024c
 80013ec:	20000250 	.word	0x20000250

080013f0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	4603      	mov	r3, r0
 8001404:	80bb      	strh	r3, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
 800140a:	4613      	mov	r3, r2
 800140c:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4a37      	ldr	r2, [pc, #220]	; (80014f0 <ST7735_FillRectangle+0x100>)
 8001412:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001416:	4293      	cmp	r3, r2
 8001418:	da66      	bge.n	80014e8 <ST7735_FillRectangle+0xf8>
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	4a35      	ldr	r2, [pc, #212]	; (80014f4 <ST7735_FillRectangle+0x104>)
 800141e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001422:	4293      	cmp	r3, r2
 8001424:	da60      	bge.n	80014e8 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	4413      	add	r3, r2
 800142c:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <ST7735_FillRectangle+0x100>)
 800142e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001432:	4293      	cmp	r3, r2
 8001434:	dd06      	ble.n	8001444 <ST7735_FillRectangle+0x54>
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <ST7735_FillRectangle+0x100>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	b29a      	uxth	r2, r3
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001444:	88ba      	ldrh	r2, [r7, #4]
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	4a2a      	ldr	r2, [pc, #168]	; (80014f4 <ST7735_FillRectangle+0x104>)
 800144c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001450:	4293      	cmp	r3, r2
 8001452:	dd06      	ble.n	8001462 <ST7735_FillRectangle+0x72>
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <ST7735_FillRectangle+0x104>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	b29a      	uxth	r2, r3
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001462:	f7ff fd5b 	bl	8000f1c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2d8      	uxtb	r0, r3
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4413      	add	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b2dc      	uxtb	r4, r3
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4622      	mov	r2, r4
 8001490:	f7ff fdee 	bl	8001070 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001494:	8c3b      	ldrh	r3, [r7, #32]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	733b      	strb	r3, [r7, #12]
 800149e:	8c3b      	ldrh	r3, [r7, #32]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <ST7735_FillRectangle+0x108>)
 80014aa:	f002 f81b 	bl	80034e4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	e013      	b.n	80014dc <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	e00a      	b.n	80014d0 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	2202      	movs	r2, #2
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <ST7735_FillRectangle+0x10c>)
 80014c6:	f003 fcd0 	bl	8004e6a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	80fb      	strh	r3, [r7, #6]
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f1      	bne.n	80014ba <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80014d6:	88bb      	ldrh	r3, [r7, #4]
 80014d8:	3b01      	subs	r3, #1
 80014da:	80bb      	strh	r3, [r7, #4]
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e8      	bne.n	80014b4 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80014e2:	f7ff fd27 	bl	8000f34 <ST7735_Unselect>
 80014e6:	e000      	b.n	80014ea <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 80014e8:	bf00      	nop
}
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	2000024c 	.word	0x2000024c
 80014f4:	20000250 	.word	0x20000250
 80014f8:	40020400 	.word	0x40020400
 80014fc:	2000030c 	.word	0x2000030c

08001500 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	4613      	mov	r3, r2
 8001510:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fc90 	bl	8001e38 <null_ptr_check>
 8001518:	4603      	mov	r3, r0
 800151a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 800151c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d11c      	bne.n	800155e <bmp280_get_regs+0x5e>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d019      	beq.n	800155e <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	789b      	ldrb	r3, [r3, #2]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001538:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685c      	ldr	r4, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7858      	ldrb	r0, [r3, #1]
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	b29b      	uxth	r3, r3
 8001546:	7bf9      	ldrb	r1, [r7, #15]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	47a0      	blx	r4
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8001550:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8001558:	23fc      	movs	r3, #252	; 0xfc
 800155a:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 800155c:	e001      	b.n	8001562 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 800155e:	23ff      	movs	r3, #255	; 0xff
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}

0800156e <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b089      	sub	sp, #36	; 0x24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b04      	cmp	r3, #4
 8001582:	d901      	bls.n	8001588 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f000 fc55 	bl	8001e38 <null_ptr_check>
 800158e:	4603      	mov	r3, r0
 8001590:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001592:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d14d      	bne.n	8001636 <bmp280_set_regs+0xc8>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04a      	beq.n	8001636 <bmp280_set_regs+0xc8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d047      	beq.n	8001636 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d041      	beq.n	8001630 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d114      	bne.n	80015e4 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	76fb      	strb	r3, [r7, #27]
 80015be:	e00d      	b.n	80015dc <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	7efb      	ldrb	r3, [r7, #27]
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	440b      	add	r3, r1
 80015ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80015d6:	7efb      	ldrb	r3, [r7, #27]
 80015d8:	3301      	adds	r3, #1
 80015da:	76fb      	strb	r3, [r7, #27]
 80015dc:	7efa      	ldrb	r2, [r7, #27]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3ed      	bcc.n	80015c0 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d90d      	bls.n	8001606 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f107 0110 	add.w	r1, r7, #16
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fc40 	bl	8001e78 <interleave_data>
                temp_len = ((len * 2) - 1);
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	83bb      	strh	r3, [r7, #28]
 8001604:	e001      	b.n	800160a <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689c      	ldr	r4, [r3, #8]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	7858      	ldrb	r0, [r3, #1]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7819      	ldrb	r1, [r3, #0]
 8001616:	8bbb      	ldrh	r3, [r7, #28]
 8001618:	f107 0210 	add.w	r2, r7, #16
 800161c:	47a0      	blx	r4
 800161e:	4603      	mov	r3, r0
 8001620:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8001622:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 800162a:	23fc      	movs	r3, #252	; 0xfc
 800162c:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 800162e:	e005      	b.n	800163c <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8001630:	23fd      	movs	r3, #253	; 0xfd
 8001632:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8001634:	e002      	b.n	800163c <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001636:	23ff      	movs	r3, #255	; 0xff
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	e000      	b.n	800163e <bmp280_set_regs+0xd0>
        if (len != 0)
 800163c:	bf00      	nop
    }

    return rslt;
 800163e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}

0800164a <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8001652:	23e0      	movs	r3, #224	; 0xe0
 8001654:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8001656:	23b6      	movs	r3, #182	; 0xb6
 8001658:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fbec 	bl	8001e38 <null_ptr_check>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800166c:	f107 010d 	add.w	r1, r7, #13
 8001670:	f107 000e 	add.w	r0, r7, #14
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f7ff ff79 	bl	800156e <bmp280_set_regs>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2002      	movs	r0, #2
 8001686:	4798      	blx	r3
    }

    return rslt;
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 800169c:	2305      	movs	r3, #5
 800169e:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fbc9 	bl	8001e38 <null_ptr_check>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d150      	bne.n	8001754 <bmp280_init+0xc0>
    {
        while (try_count)
 80016b2:	e02d      	b.n	8001710 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	20d0      	movs	r0, #208	; 0xd0
 80016bc:	f7ff ff20 	bl	8001500 <bmp280_get_regs>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 80016c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d11a      	bne.n	8001702 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 80016d0:	2b56      	cmp	r3, #86	; 0x56
 80016d2:	d007      	beq.n	80016e4 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b57      	cmp	r3, #87	; 0x57
 80016da:	d003      	beq.n	80016e4 <bmp280_init+0x50>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b58      	cmp	r3, #88	; 0x58
 80016e2:	d10e      	bne.n	8001702 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffb0 	bl	800164a <bmp280_soft_reset>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d110      	bne.n	8001718 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fbea 	bl	8001ed0 <get_calib_param>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001700:	e00a      	b.n	8001718 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	200a      	movs	r0, #10
 8001708:	4798      	blx	r3
            --try_count;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3b01      	subs	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ce      	bne.n	80016b4 <bmp280_init+0x20>
 8001716:	e000      	b.n	800171a <bmp280_init+0x86>
                break;
 8001718:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8001720:	23fe      	movs	r3, #254	; 0xfe
 8001722:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d113      	bne.n	8001754 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800176a:	2300      	movs	r3, #0
 800176c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f000 fb62 	bl	8001e38 <null_ptr_check>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d137      	bne.n	80017f0 <bmp280_get_config+0x90>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d034      	beq.n	80017f0 <bmp280_get_config+0x90>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2202      	movs	r2, #2
 800178e:	20f4      	movs	r0, #244	; 0xf4
 8001790:	f7ff feb6 	bl	8001500 <bmp280_get_regs>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d129      	bne.n	80017f4 <bmp280_get_config+0x94>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80017a0:	7b3b      	ldrb	r3, [r7, #12]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	109b      	asrs	r3, r3, #2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80017ba:	7b7b      	ldrb	r3, [r7, #13]
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	109b      	asrs	r3, r3, #2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80017d4:	7b7b      	ldrb	r3, [r7, #13]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	332c      	adds	r3, #44	; 0x2c
 80017e6:	6810      	ldr	r0, [r2, #0]
 80017e8:	6018      	str	r0, [r3, #0]
 80017ea:	7912      	ldrb	r2, [r2, #4]
 80017ec:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80017ee:	e001      	b.n	80017f4 <bmp280_get_config+0x94>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	2000      	movs	r0, #0
 8001810:	f000 fbfc 	bl	800200c <conf_sensor>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	6039      	str	r1, [r7, #0]
 8001828:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f000 fb04 	bl	8001e38 <null_ptr_check>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fbe0 	bl	800200c <conf_sensor>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001850:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	2300      	movs	r3, #0
 800186c:	81bb      	strh	r3, [r7, #12]

    rslt = null_ptr_check(dev);
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f000 fae2 	bl	8001e38 <null_ptr_check>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d133      	bne.n	80018e8 <bmp280_get_uncomp_data+0x8c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d030      	beq.n	80018e8 <bmp280_get_uncomp_data+0x8c>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001886:	f107 0108 	add.w	r1, r7, #8
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2206      	movs	r2, #6
 800188e:	20f7      	movs	r0, #247	; 0xf7
 8001890:	f7ff fe36 	bl	8001500 <bmp280_get_regs>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d120      	bne.n	80018e2 <bmp280_get_uncomp_data+0x86>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80018a0:	7a3b      	ldrb	r3, [r7, #8]
 80018a2:	031a      	lsls	r2, r3, #12
 80018a4:	7a7b      	ldrb	r3, [r7, #9]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4313      	orrs	r3, r2
 80018aa:	7aba      	ldrb	r2, [r7, #10]
 80018ac:	0912      	lsrs	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80018b6:	7afb      	ldrb	r3, [r7, #11]
 80018b8:	031a      	lsls	r2, r3, #12
 80018ba:	7b3b      	ldrb	r3, [r7, #12]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4313      	orrs	r3, r2
 80018c0:	7b7a      	ldrb	r2, [r7, #13]
 80018c2:	0912      	lsrs	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f000 fc4e 	bl	8002178 <st_check_boundaries>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018e0:	e004      	b.n	80018ec <bmp280_get_uncomp_data+0x90>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80018e2:	23f3      	movs	r3, #243	; 0xf3
 80018e4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80018e6:	e001      	b.n	80018ec <bmp280_get_uncomp_data+0x90>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80018e8:	23ff      	movs	r3, #255	; 0xff
 80018ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b08a      	sub	sp, #40	; 0x28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fa96 	bl	8001e38 <null_ptr_check>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80ac 	bne.w	8001a74 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7fe fe09 	bl	8000534 <__aeabi_i2d>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <bmp280_get_comp_temp_double+0x1a0>)
 8001928:	f7fe ff98 	bl	800085c <__aeabi_ddiv>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	8a1b      	ldrh	r3, [r3, #16]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdeb 	bl	8000514 <__aeabi_ui2d>
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <bmp280_get_comp_temp_double+0x1a4>)
 8001944:	f7fe ff8a 	bl	800085c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fca2 	bl	8000298 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
               ((double) dev->calib_param.dig_t2);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_i2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fe4a 	bl	8000608 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800197c:	68b8      	ldr	r0, [r7, #8]
 800197e:	f7fe fdd9 	bl	8000534 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800198a:	f7fe ff67 	bl	800085c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8a1b      	ldrh	r3, [r3, #16]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdba 	bl	8000514 <__aeabi_ui2d>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <bmp280_get_comp_temp_double+0x1a8>)
 80019a6:	f7fe ff59 	bl	800085c <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc71 	bl	8000298 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f7fe fdb8 	bl	8000534 <__aeabi_i2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80019cc:	f7fe ff46 	bl	800085c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4690      	mov	r8, r2
 80019d6:	4699      	mov	r9, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	8a1b      	ldrh	r3, [r3, #16]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd99 	bl	8000514 <__aeabi_ui2d>
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <bmp280_get_comp_temp_double+0x1a8>)
 80019e8:	f7fe ff38 	bl	800085c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4640      	mov	r0, r8
 80019f2:	4649      	mov	r1, r9
 80019f4:	f7fe fc50 	bl	8000298 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fe02 	bl	8000608 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4614      	mov	r4, r2
 8001a0a:	461d      	mov	r5, r3
            ((double) dev->calib_param.dig_t3);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd8e 	bl	8000534 <__aeabi_i2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
        var2 =
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fdf2 	bl	8000608 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a34:	f7fe fc32 	bl	800029c <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f892 	bl	8000b68 <__aeabi_d2iz>
 8001a44:	4602      	mov	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8001a4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a52:	f7fe fc23 	bl	800029c <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <bmp280_get_comp_temp_double+0x1ac>)
 8001a64:	f7fe fefa 	bl	800085c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	e9c1 2300 	strd	r2, r3, [r1]
 8001a72:	e009      	b.n	8001a88 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9c1 2300 	strd	r2, r3, [r1]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 8001a82:	23ef      	movs	r3, #239	; 0xef
 8001a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a96:	bf00      	nop
 8001a98:	40d00000 	.word	0x40d00000
 8001a9c:	40900000 	.word	0x40900000
 8001aa0:	40c00000 	.word	0x40c00000
 8001aa4:	40b40000 	.word	0x40b40000

08001aa8 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8001aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aac:	b08a      	sub	sp, #40	; 0x28
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9be 	bl	8001e38 <null_ptr_check>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 8197 	bne.w	8001dfa <bmp280_get_comp_pres_double+0x352>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd2f 	bl	8000534 <__aeabi_i2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ade:	f7fe febd 	bl	800085c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4bc8      	ldr	r3, [pc, #800]	; (8001e10 <bmp280_get_comp_pres_double+0x368>)
 8001af0:	f7fe fbd2 	bl	8000298 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd0c 	bl	8000534 <__aeabi_i2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fd70 	bl	8000608 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4bb7      	ldr	r3, [pc, #732]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001b36:	f7fe fe91 	bl	800085c <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcf3 	bl	8000534 <__aeabi_i2d>
 8001b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b52:	f7fe fd59 	bl	8000608 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	f7fe fb9b 	bl	800029c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fb95 	bl	800029c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4ba6      	ldr	r3, [pc, #664]	; (8001e18 <bmp280_get_comp_pres_double+0x370>)
 8001b80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b84:	f7fe fe6a 	bl	800085c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fccc 	bl	8000534 <__aeabi_i2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b9e      	ldr	r3, [pc, #632]	; (8001e1c <bmp280_get_comp_pres_double+0x374>)
 8001ba2:	f7fe fd31 	bl	8000608 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fb75 	bl	800029c <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcb7 	bl	8000534 <__aeabi_i2d>
 8001bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bca:	f7fe fd1d 	bl	8000608 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	f7fe fd15 	bl	8000608 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <bmp280_get_comp_pres_double+0x378>)
 8001bec:	f7fe fe36 	bl	800085c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	461d      	mov	r5, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc98 	bl	8000534 <__aeabi_i2d>
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	f7fe fcfe 	bl	8000608 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fb42 	bl	800029c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <bmp280_get_comp_pres_double+0x378>)
 8001c26:	f7fe fe19 	bl	800085c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001c38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c3c:	f7fe fe0e 	bl	800085c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <bmp280_get_comp_pres_double+0x37c>)
 8001c4e:	f7fe fb25 	bl	800029c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8adb      	ldrh	r3, [r3, #22]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc58 	bl	8000514 <__aeabi_ui2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fccc 	bl	8000608 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	f7fe fc4b 	bl	8000514 <__aeabi_ui2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	4968      	ldr	r1, [pc, #416]	; (8001e28 <bmp280_get_comp_pres_double+0x380>)
 8001c88:	f7fe fb06 	bl	8000298 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	e9c1 2300 	strd	r2, r3, [r1]
        if (var1 < 0 || var1 > 0)
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca2:	f7fe ff23 	bl	8000aec <__aeabi_dcmplt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <bmp280_get_comp_pres_double+0x21c>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb8:	f7fe ff36 	bl	8000b28 <__aeabi_dcmpgt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8091 	beq.w	8001de6 <bmp280_get_comp_pres_double+0x33e>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <bmp280_get_comp_pres_double+0x384>)
 8001cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd4:	f7fe fdc2 	bl	800085c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fada 	bl	8000298 <__aeabi_dsub>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	a346      	add	r3, pc, #280	; (adr r3, 8001e08 <bmp280_get_comp_pres_double+0x360>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fc89 	bl	8000608 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc0c 	bl	8000534 <__aeabi_i2d>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <bmp280_get_comp_pres_double+0x388>)
 8001d46:	f7fe fd89 	bl	800085c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbe8 	bl	8000534 <__aeabi_i2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fc4c 	bl	8000608 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <bmp280_get_comp_pres_double+0x36c>)
 8001d7e:	f7fe fd6d 	bl	800085c <__aeabi_ddiv>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 2304 	strd	r2, r3, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe fa80 	bl	800029c <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4690      	mov	r8, r2
 8001da2:	4699      	mov	r9, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbc2 	bl	8000534 <__aeabi_i2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4640      	mov	r0, r8
 8001db6:	4649      	mov	r1, r9
 8001db8:	f7fe fa70 	bl	800029c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <bmp280_get_comp_pres_double+0x38c>)
 8001dca:	f7fe fd47 	bl	800085c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa61 	bl	800029c <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
 8001de4:	e009      	b.n	8001dfa <bmp280_get_comp_pres_double+0x352>
        }
        else
        {
            *pressure = 0;
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9c1 2300 	strd	r2, r3, [r1]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8001df4:	23ee      	movs	r3, #238	; 0xee
 8001df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8001dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40b86a00 	.word	0x40b86a00
 8001e10:	40ef4000 	.word	0x40ef4000
 8001e14:	40e00000 	.word	0x40e00000
 8001e18:	40100000 	.word	0x40100000
 8001e1c:	40f00000 	.word	0x40f00000
 8001e20:	41200000 	.word	0x41200000
 8001e24:	3ff00000 	.word	0x3ff00000
 8001e28:	41300000 	.word	0x41300000
 8001e2c:	40b00000 	.word	0x40b00000
 8001e30:	41e00000 	.word	0x41e00000
 8001e34:	40300000 	.word	0x40300000

08001e38 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <null_ptr_check+0x26>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8001e5e:	23ff      	movs	r3, #255	; 0xff
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	e001      	b.n	8001e68 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
 8001e8a:	e016      	b.n	8001eba <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	441a      	add	r2, r3
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	7812      	ldrb	r2, [r2, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	440b      	add	r3, r1
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
 8001eba:	7dfa      	ldrb	r2, [r7, #23]
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3e4      	bcc.n	8001e8c <interleave_data+0x14>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

    rslt = null_ptr_check(dev);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffa3 	bl	8001e38 <null_ptr_check>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d17f      	bne.n	8002000 <get_calib_param+0x130>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001f00:	f107 010c 	add.w	r1, r7, #12
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2218      	movs	r2, #24
 8001f08:	2088      	movs	r0, #136	; 0x88
 8001f0a:	f7ff faf9 	bl	8001500 <bmp280_get_regs>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d171      	bne.n	8002000 <get_calib_param+0x130>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001f1c:	7b7b      	ldrb	r3, [r7, #13]
 8001f1e:	021b      	lsls	r3, r3, #8
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001f42:	7c7b      	ldrb	r3, [r7, #17]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	7c3b      	ldrb	r3, [r7, #16]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	021b      	lsls	r3, r3, #8
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	7cbb      	ldrb	r3, [r7, #18]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001f68:	7d7b      	ldrb	r3, [r7, #21]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	7d3b      	ldrb	r3, [r7, #20]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001f8c:	7e7b      	ldrb	r3, [r7, #25]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	7e3b      	ldrb	r3, [r7, #24]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001f9e:	7efb      	ldrb	r3, [r7, #27]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	7ebb      	ldrb	r3, [r7, #26]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001fb0:	7f7b      	ldrb	r3, [r7, #29]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7f3b      	ldrb	r3, [r7, #28]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	7fbb      	ldrb	r3, [r7, #30]
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001fd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8002000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800201a:	2300      	movs	r3, #0
 800201c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 800201e:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8002022:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff07 	bl	8001e38 <null_ptr_check>
 800202a:	4603      	mov	r3, r0
 800202c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800202e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8095 	bne.w	8002162 <conf_sensor+0x156>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8091 	beq.w	8002162 <conf_sensor+0x156>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8002040:	f107 0114 	add.w	r1, r7, #20
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	20f4      	movs	r0, #244	; 0xf4
 800204a:	f7ff fa59 	bl	8001500 <bmp280_get_regs>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 8086 	bne.w	8002168 <conf_sensor+0x15c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff faf4 	bl	800164a <bmp280_soft_reset>
 8002062:	4603      	mov	r3, r0
 8002064:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8002066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17c      	bne.n	8002168 <conf_sensor+0x15c>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 800206e:	7d3b      	ldrb	r3, [r7, #20]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	b25a      	sxtb	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b25b      	sxtb	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8002088:	7d3b      	ldrb	r3, [r7, #20]
 800208a:	b25b      	sxtb	r3, r3
 800208c:	f023 031c 	bic.w	r3, r3, #28
 8002090:	b25a      	sxtb	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	b25b      	sxtb	r3, r3
 800209a:	f003 031c 	and.w	r3, r3, #28
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 80020a8:	7d7b      	ldrb	r3, [r7, #21]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	b25a      	sxtb	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 80020c2:	7d7b      	ldrb	r3, [r7, #21]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	f023 031c 	bic.w	r3, r3, #28
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	78db      	ldrb	r3, [r3, #3]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	f003 031c 	and.w	r3, r3, #28
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 80020e2:	7d7b      	ldrb	r3, [r7, #21]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	b25a      	sxtb	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8002100:	f107 0114 	add.w	r1, r7, #20
 8002104:	f107 0010 	add.w	r0, r7, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f7ff fa2f 	bl	800156e <bmp280_set_regs>
 8002110:	4603      	mov	r3, r0
 8002112:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8002114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d125      	bne.n	8002168 <conf_sensor+0x15c>
                {
                    dev->conf = *conf;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	332c      	adds	r3, #44	; 0x2c
 8002122:	6810      	ldr	r0, [r2, #0]
 8002124:	6018      	str	r0, [r3, #0]
 8002126:	7912      	ldrb	r2, [r2, #4]
 8002128:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <conf_sensor+0x15c>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8002130:	7d3b      	ldrb	r3, [r7, #20]
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f023 0303 	bic.w	r3, r3, #3
 8002138:	b25a      	sxtb	r2, r3
 800213a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	b25b      	sxtb	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b25b      	sxtb	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 800214c:	f107 0114 	add.w	r1, r7, #20
 8002150:	f107 0010 	add.w	r0, r7, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f7ff fa09 	bl	800156e <bmp280_set_regs>
 800215c:	4603      	mov	r3, r0
 800215e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002160:	e002      	b.n	8002168 <conf_sensor+0x15c>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8002162:	23ff      	movs	r3, #255	; 0xff
 8002164:	75fb      	strb	r3, [r7, #23]
 8002166:	e000      	b.n	800216a <conf_sensor+0x15e>
        if (rslt == BMP280_OK)
 8002168:	bf00      	nop
    }

    return rslt;
 800216a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dd03      	ble.n	8002194 <st_check_boundaries+0x1c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <st_check_boundaries+0x6c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	dd09      	ble.n	80021a8 <st_check_boundaries+0x30>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	dd03      	ble.n	80021a2 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <st_check_boundaries+0x6c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	dd02      	ble.n	80021a8 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 80021a2:	23f4      	movs	r3, #244	; 0xf4
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e015      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dd03      	ble.n	80021b6 <st_check_boundaries+0x3e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <st_check_boundaries+0x6c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	dd02      	ble.n	80021bc <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 80021b6:	23f6      	movs	r3, #246	; 0xf6
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e00b      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd03      	ble.n	80021ca <st_check_boundaries+0x52>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <st_check_boundaries+0x6c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	dd02      	ble.n	80021d0 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 80021ca:	23f5      	movs	r3, #245	; 0xf5
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e001      	b.n	80021d4 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80021d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	000fffef 	.word	0x000fffef

080021e8 <BMP280_init>:

/*
 * Funkcja inicjalizująca czujnik bmp280
 * Zwracana wartość rslt to kod błędu w przypadku błędu inicjalizacji
 */
int8_t BMP280_init(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
	int8_t rslt;
    struct bmp280_config conf;

    /* Map the delay function pointer with the function responsible for implementing the delay */
    bmp.delay_ms = delay_ms;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <BMP280_init+0x74>)
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <BMP280_init+0x78>)
 80021f2:	60da      	str	r2, [r3, #12]

    /* Assign device I2C address based on the status of SDO pin (GND for PRIMARY(0x76) & VDD for SECONDARY(0x77)) */
    bmp.dev_id = (BMP280_I2C_ADDR_PRIM<<1);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <BMP280_init+0x74>)
 80021f6:	22ec      	movs	r2, #236	; 0xec
 80021f8:	705a      	strb	r2, [r3, #1]

    /* Select the interface mode as I2C */
    bmp.intf = BMP280_I2C_INTF;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <BMP280_init+0x74>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	709a      	strb	r2, [r3, #2]

    /* Map the I2C read & write function pointer with the functions responsible for I2C bus transfer */
    bmp.read = i2c_reg_read;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <BMP280_init+0x74>)
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <BMP280_init+0x7c>)
 8002204:	605a      	str	r2, [r3, #4]
    bmp.write = i2c_reg_write;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <BMP280_init+0x74>)
 8002208:	4a17      	ldr	r2, [pc, #92]	; (8002268 <BMP280_init+0x80>)
 800220a:	609a      	str	r2, [r3, #8]

    rslt = bmp280_init(&bmp);
 800220c:	4813      	ldr	r0, [pc, #76]	; (800225c <BMP280_init+0x74>)
 800220e:	f7ff fa41 	bl	8001694 <bmp280_init>
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]


    /* Always read the current settings before writing, especially when
     * all the configuration is not modified
     */
    rslt = bmp280_get_config(&conf, &bmp);
 8002216:	463b      	mov	r3, r7
 8002218:	4910      	ldr	r1, [pc, #64]	; (800225c <BMP280_init+0x74>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff faa0 	bl	8001760 <bmp280_get_config>
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]


    /* configuring the temperature oversampling, filter coefficient and output data rate */
    /* Overwrite the desired settings */
    conf.filter = BMP280_FILTER_COEFF_2;
 8002224:	2301      	movs	r3, #1
 8002226:	70fb      	strb	r3, [r7, #3]

    /* Pressure oversampling set at 4x */
    conf.os_pres = BMP280_OS_4X;
 8002228:	2303      	movs	r3, #3
 800222a:	707b      	strb	r3, [r7, #1]

    /* Temperature oversampling set at 4x */
    conf.os_temp = BMP280_OS_4X;
 800222c:	2303      	movs	r3, #3
 800222e:	703b      	strb	r3, [r7, #0]

    /* Setting the output data rate as 1HZ(1000ms) */
    conf.odr = BMP280_ODR_1000_MS;
 8002230:	2305      	movs	r3, #5
 8002232:	70bb      	strb	r3, [r7, #2]
    rslt = bmp280_set_config(&conf, &bmp);
 8002234:	463b      	mov	r3, r7
 8002236:	4909      	ldr	r1, [pc, #36]	; (800225c <BMP280_init+0x74>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fae1 	bl	8001800 <bmp280_set_config>
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]


    /* Always set the power mode after setting the configuration */
    rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8002242:	4906      	ldr	r1, [pc, #24]	; (800225c <BMP280_init+0x74>)
 8002244:	2003      	movs	r0, #3
 8002246:	f7ff faea 	bl	800181e <bmp280_set_power_mode>
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]


    return rslt;
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000254 	.word	0x20000254
 8002260:	0800232d 	.word	0x0800232d
 8002264:	08002385 	.word	0x08002385
 8002268:	08002345 	.word	0x08002345

0800226c <BMP280_TempRead>:
/*
 * Funkcja odczytuje temperature z czujnika i przypisuje je do zmiennej globalnej
 * Zwracana wartość rslt to kod błędu przy złym odczycie
 */
int8_t BMP280_TempRead(double *temperature) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	 int8_t errGet = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	77fb      	strb	r3, [r7, #31]
	 int8_t errComp = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	77bb      	strb	r3, [r7, #30]
     struct bmp280_uncomp_data ucomp_data;
     double temp;
	 /* Pobranie danych z czujnika */
     if(errGet = bmp280_get_uncomp_data(&ucomp_data, &bmp) != BMP280_OK) {
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <BMP280_TempRead+0x78>)
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff faea 	bl	800185c <bmp280_get_uncomp_data>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	77fb      	strb	r3, [r7, #31]
 8002296:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <BMP280_TempRead+0x38>
    	 return errGet;
 800229e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a2:	e01b      	b.n	80022dc <BMP280_TempRead+0x70>
     }

     /* Konwersja na liczby zmiennoprzecinkowe */
      if(errComp = bmp280_get_comp_temp_double(&temp, ucomp_data.uncomp_temp, &bmp) != BMP280_OK){
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <BMP280_TempRead+0x78>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb23 	bl	80018f8 <bmp280_get_comp_temp_double>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	77bb      	strb	r3, [r7, #30]
 80022c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <BMP280_TempRead+0x62>
    	  return errComp;
 80022c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80022cc:	e006      	b.n	80022dc <BMP280_TempRead+0x70>
      }
     /*przypisanie wartości temperatury do zmiennej globalnej*/
     *temperature = temp;
 80022ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	e9c1 2300 	strd	r2, r3, [r1]
     return errComp;
 80022d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000254 	.word	0x20000254

080022e8 <BMP280_PressRead>:

/*
 * Funkcja odczytuje cisnienie z czujnika i przypisuje je do zmiennej globalnej
 * Zwracana wartość rslt to kod błędu przy złym odczycie
 */
int8_t BMP280_PressRead(double *pressure) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
     struct bmp280_uncomp_data ucomp_data;

     double pres;

	 /* Pobranie danych z czujnika */
     rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <BMP280_PressRead+0x40>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fab0 	bl	800185c <bmp280_get_uncomp_data>
 80022fc:	4603      	mov	r3, r0
 80022fe:	77fb      	strb	r3, [r7, #31]

     /* Konwersja na liczby zmiennoprzecinkowe */
     rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
 8002300:	69b9      	ldr	r1, [r7, #24]
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <BMP280_PressRead+0x40>)
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fbcd 	bl	8001aa8 <bmp280_get_comp_pres_double>
 800230e:	4603      	mov	r3, r0
 8002310:	77fb      	strb	r3, [r7, #31]

     /*przypisanie wartości ciśnienia do zmiennej globalnej*/
     *pressure = pres;
 8002312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	e9c1 2300 	strd	r2, r3, [r1]

     return rslt;
 800231c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000254 	.word	0x20000254

0800232c <delay_ms>:
 *  @param[in] period_ms  : the required wait time in milliseconds.
 *  @return void.
 *
 */
void delay_ms(uint32_t period_ms)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    /* Implement the delay routine according to the target machine */
	HAL_Delay(period_ms);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fe47 	bl	8002fc8 <HAL_Delay>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <i2c_reg_write>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_write(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af04      	add	r7, sp, #16
 800234a:	603a      	str	r2, [r7, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	460b      	mov	r3, r1
 8002354:	71bb      	strb	r3, [r7, #6]
 8002356:	4613      	mov	r3, r2
 8002358:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C write routine according to the target machine. */
	HAL_I2C_Mem_Write(&hi2c1, i2c_addr, reg_addr, 1, reg_data, length, 100);
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	b299      	uxth	r1, r3
 800235e:	79bb      	ldrb	r3, [r7, #6]
 8002360:	b29a      	uxth	r2, r3
 8002362:	2364      	movs	r3, #100	; 0x64
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	88bb      	ldrh	r3, [r7, #4]
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2301      	movs	r3, #1
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <i2c_reg_write+0x3c>)
 8002372:	f001 fa15 	bl	80037a0 <HAL_I2C_Mem_Write>
    return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000288 	.word	0x20000288

08002384 <i2c_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t i2c_reg_read(uint8_t i2c_addr, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af04      	add	r7, sp, #16
 800238a:	603a      	str	r2, [r7, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	460b      	mov	r3, r1
 8002394:	71bb      	strb	r3, [r7, #6]
 8002396:	4613      	mov	r3, r2
 8002398:	80bb      	strh	r3, [r7, #4]

    /* Implement the I2C read routine according to the target machine. */
	HAL_I2C_Mem_Read(&hi2c1, i2c_addr, reg_addr, 1, reg_data, length, 100);
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	b299      	uxth	r1, r3
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	2364      	movs	r3, #100	; 0x64
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <i2c_reg_read+0x3c>)
 80023b2:	f001 faef 	bl	8003994 <HAL_I2C_Mem_Read>
    return 0;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000288 	.word	0x20000288

080023c4 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <MX_GPIO_Init+0x114>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <MX_GPIO_Init+0x114>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <MX_GPIO_Init+0x114>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <MX_GPIO_Init+0x114>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <MX_GPIO_Init+0x114>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <MX_GPIO_Init+0x114>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	21e0      	movs	r1, #224	; 0xe0
 800244e:	4823      	ldr	r0, [pc, #140]	; (80024dc <MX_GPIO_Init+0x118>)
 8002450:	f001 f848 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	4821      	ldr	r0, [pc, #132]	; (80024e0 <MX_GPIO_Init+0x11c>)
 800245a:	f001 f843 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800245e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <MX_GPIO_Init+0x120>)
 8002466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	481d      	ldr	r0, [pc, #116]	; (80024e8 <MX_GPIO_Init+0x124>)
 8002474:	f000 feb2 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002478:	230c      	movs	r3, #12
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002488:	2307      	movs	r3, #7
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4812      	ldr	r0, [pc, #72]	; (80024dc <MX_GPIO_Init+0x118>)
 8002494:	f000 fea2 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002498:	23e0      	movs	r3, #224	; 0xe0
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	2301      	movs	r3, #1
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	480b      	ldr	r0, [pc, #44]	; (80024dc <MX_GPIO_Init+0x118>)
 80024b0:	f000 fe94 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_GPIO_Init+0x11c>)
 80024cc:	f000 fe86 	bl	80031dc <HAL_GPIO_Init>

}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020400 	.word	0x40020400
 80024e4:	10210000 	.word	0x10210000
 80024e8:	40020800 	.word	0x40020800

080024ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_I2C1_Init+0x50>)
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <MX_I2C1_Init+0x54>)
 80024f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_I2C1_Init+0x50>)
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_I2C1_Init+0x58>)
 80024fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_I2C1_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_I2C1_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_I2C1_Init+0x50>)
 800250a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <MX_I2C1_Init+0x50>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_I2C1_Init+0x50>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <MX_I2C1_Init+0x50>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_I2C1_Init+0x50>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <MX_I2C1_Init+0x50>)
 800252a:	f000 fff5 	bl	8003518 <HAL_I2C_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002534:	f000 f9b0 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000288 	.word	0x20000288
 8002540:	40005400 	.word	0x40005400
 8002544:	000186a0 	.word	0x000186a0

08002548 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_I2C_MspInit+0x84>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d12c      	bne.n	80025c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_I2C_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	4a17      	ldr	r2, [pc, #92]	; (80025d0 <HAL_I2C_MspInit+0x88>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	; 0x30
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_I2C_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002586:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258c:	2312      	movs	r3, #18
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002590:	2301      	movs	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002598:	2304      	movs	r3, #4
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	480c      	ldr	r0, [pc, #48]	; (80025d4 <HAL_I2C_MspInit+0x8c>)
 80025a4:	f000 fe1a 	bl	80031dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_I2C_MspInit+0x88>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_I2C_MspInit+0x88>)
 80025b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b6:	6413      	str	r3, [r2, #64]	; 0x40
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_I2C_MspInit+0x88>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025c4:	bf00      	nop
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400

080025d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025dc:	f000 fc82 	bl	8002ee4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025e0:	f000 f8f0 	bl	80027c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025e4:	f7ff feee 	bl	80023c4 <MX_GPIO_Init>
	MX_SPI2_Init();
 80025e8:	f000 fa8a 	bl	8002b00 <MX_SPI2_Init>
	MX_I2C1_Init();
 80025ec:	f7ff ff7e 	bl	80024ec <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	/*Initialize BMP280 sensor*/
	BMP280_init();
 80025f0:	f7ff fdfa 	bl	80021e8 <BMP280_init>
	/*Initialize and test TFT display ST7735*/
	ST7735_Init(0);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fd83 	bl	8001100 <ST7735_Init>
	fillScreen(BLACK);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fc74 	bl	8000ee8 <fillScreen>
	ST7735_SetRotation(3);
 8002600:	2003      	movs	r0, #3
 8002602:	f7fe fda9 	bl	8001158 <ST7735_SetRotation>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 8002606:	4865      	ldr	r0, [pc, #404]	; (800279c <main+0x1c4>)
 8002608:	f7ff fe30 	bl	800226c <BMP280_TempRead>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <main+0x1c8>)
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <main+0x1c8>)
 8002616:	f993 3000 	ldrsb.w	r3, [r3]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 809f 	bne.w	800275e <main+0x186>
				BMP280_PressRead(&pres)) == BMP280_OK) {
 8002620:	4860      	ldr	r0, [pc, #384]	; (80027a4 <main+0x1cc>)
 8002622:	f7ff fe61 	bl	80022e8 <BMP280_PressRead>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 800262a:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <main+0x1d0>)
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <main+0x1d0>)
 8002630:	f993 3000 	ldrsb.w	r3, [r3]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 8092 	bne.w	800275e <main+0x186>
			//jeśli funkcje nie zwróciły błędów zostanie wykonana ta część funkcji- BMP280_OK = 0;
			if (temp > 30) {
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <main+0x1c4>)
 800263c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <main+0x1d4>)
 8002646:	f7fe fa6f 	bl	8000b28 <__aeabi_dcmpgt>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01d      	beq.n	800268c <main+0xb4>
				if (refreshScreen1 == 0) {
 8002650:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <main+0x1d8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <main+0xa0>
					refreshScreen1 = 1;
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <main+0x1d8>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 0;
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <main+0x1dc>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 0;
 8002664:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <main+0x1e0>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <main+0x1e4>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
					fillScreen(RED);
 8002670:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002674:	f7fe fc38 	bl	8000ee8 <fillScreen>
				}
				writeTempHighWarn(temp);
 8002678:	4b48      	ldr	r3, [pc, #288]	; (800279c <main+0x1c4>)
 800267a:	ed93 7b00 	vldr	d7, [r3]
 800267e:	eeb0 0a47 	vmov.f32	s0, s14
 8002682:	eef0 0a67 	vmov.f32	s1, s15
 8002686:	f000 f9e7 	bl	8002a58 <writeTempHighWarn>
			if (temp > 30) {
 800268a:	e086      	b.n	800279a <main+0x1c2>
			} else if (temp < 15) {
 800268c:	4b43      	ldr	r3, [pc, #268]	; (800279c <main+0x1c4>)
 800268e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <main+0x1e8>)
 8002698:	f7fe fa28 	bl	8000aec <__aeabi_dcmplt>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01d      	beq.n	80026de <main+0x106>
				if (refreshScreen2 == 0) {
 80026a2:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <main+0x1dc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <main+0xf2>
					refreshScreen1 = 0;
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <main+0x1d8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 1;
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <main+0x1dc>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 0;
 80026b6:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <main+0x1e0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <main+0x1e4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
					fillScreen(RED);
 80026c2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80026c6:	f7fe fc0f 	bl	8000ee8 <fillScreen>
				}
				writeTempLowWarn(temp);
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <main+0x1c4>)
 80026cc:	ed93 7b00 	vldr	d7, [r3]
 80026d0:	eeb0 0a47 	vmov.f32	s0, s14
 80026d4:	eef0 0a67 	vmov.f32	s1, s15
 80026d8:	f000 fa06 	bl	8002ae8 <writeTempLowWarn>
			if (temp > 30) {
 80026dc:	e05d      	b.n	800279a <main+0x1c2>
			} else if (temp > 15 && temp < 30) {
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <main+0x1c4>)
 80026e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <main+0x1e8>)
 80026ea:	f7fe fa1d 	bl	8000b28 <__aeabi_dcmpgt>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d100      	bne.n	80026f6 <main+0x11e>
			if (temp > 30) {
 80026f4:	e051      	b.n	800279a <main+0x1c2>
			} else if (temp > 15 && temp < 30) {
 80026f6:	4b29      	ldr	r3, [pc, #164]	; (800279c <main+0x1c4>)
 80026f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <main+0x1d4>)
 8002702:	f7fe f9f3 	bl	8000aec <__aeabi_dcmplt>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d100      	bne.n	800270e <main+0x136>
			if (temp > 30) {
 800270c:	e045      	b.n	800279a <main+0x1c2>
				if (refreshScreen3 == 0) {
 800270e:	4b2a      	ldr	r3, [pc, #168]	; (80027b8 <main+0x1e0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10e      	bne.n	8002734 <main+0x15c>
					refreshScreen1 = 0;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <main+0x1d8>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
					refreshScreen2 = 0;
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <main+0x1dc>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
					refreshScreen3 = 1;
 8002722:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <main+0x1e0>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
					refreshScreen4 = 0;
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <main+0x1e4>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
					fillScreen(BLACK);
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fbda 	bl	8000ee8 <fillScreen>
					//jednokrotne odświeżenie wyświetlacza
				}
				writeMenu();
 8002734:	f000 f8fe 	bl	8002934 <writeMenu>
				writeTemp(temp);
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <main+0x1c4>)
 800273a:	ed93 7b00 	vldr	d7, [r3]
 800273e:	eeb0 0a47 	vmov.f32	s0, s14
 8002742:	eef0 0a67 	vmov.f32	s1, s15
 8002746:	f000 f8ad 	bl	80028a4 <writeTemp>
				writePress(pres);
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <main+0x1cc>)
 800274c:	ed93 7b00 	vldr	d7, [r3]
 8002750:	eeb0 0a47 	vmov.f32	s0, s14
 8002754:	eef0 0a67 	vmov.f32	s1, s15
 8002758:	f000 f8c8 	bl	80028ec <writePress>
			if (temp > 30) {
 800275c:	e01d      	b.n	800279a <main+0x1c2>
			}
		} else {
			if (refreshScreen4 == 0) {
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <main+0x1e4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <main+0x1ac>
				refreshScreen1 = 0;
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <main+0x1d8>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
				refreshScreen2 = 0;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <main+0x1dc>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
				refreshScreen3 = 0;
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <main+0x1e0>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
				refreshScreen4 = 1;
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <main+0x1e4>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
				fillScreen(BLACK);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe fbb2 	bl	8000ee8 <fillScreen>
				//jednokrotne odświeżenie wyświetlacza
			}
			errMenu(errTemp, errPres);
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <main+0x1c8>)
 8002786:	f993 3000 	ldrsb.w	r3, [r3]
 800278a:	461a      	mov	r2, r3
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <main+0x1d0>)
 800278e:	f993 3000 	ldrsb.w	r3, [r3]
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f000 f905 	bl	80029a4 <errMenu>
		if ((errTemp = BMP280_TempRead(&temp)) == BMP280_OK && (errPres =
 800279a:	e734      	b.n	8002606 <main+0x2e>
 800279c:	20000218 	.word	0x20000218
 80027a0:	20000214 	.word	0x20000214
 80027a4:	20000220 	.word	0x20000220
 80027a8:	20000215 	.word	0x20000215
 80027ac:	403e0000 	.word	0x403e0000
 80027b0:	20000228 	.word	0x20000228
 80027b4:	2000022c 	.word	0x2000022c
 80027b8:	20000230 	.word	0x20000230
 80027bc:	20000234 	.word	0x20000234
 80027c0:	402e0000 	.word	0x402e0000

080027c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b094      	sub	sp, #80	; 0x50
 80027c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027ca:	f107 0320 	add.w	r3, r7, #32
 80027ce:	2230      	movs	r2, #48	; 0x30
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fd7a 	bl	80052cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	4b28      	ldr	r3, [pc, #160]	; (8002890 <SystemClock_Config+0xcc>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a27      	ldr	r2, [pc, #156]	; (8002890 <SystemClock_Config+0xcc>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <SystemClock_Config+0xcc>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002804:	2300      	movs	r3, #0
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <SystemClock_Config+0xd0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <SystemClock_Config+0xd0>)
 8002812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <SystemClock_Config+0xd0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002824:	2302      	movs	r3, #2
 8002826:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002828:	2301      	movs	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282c:	2310      	movs	r3, #16
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002830:	2302      	movs	r3, #2
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002834:	2300      	movs	r3, #0
 8002836:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002838:	2308      	movs	r3, #8
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800283c:	2354      	movs	r3, #84	; 0x54
 800283e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002840:	2302      	movs	r3, #2
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002844:	2307      	movs	r3, #7
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002848:	f107 0320 	add.w	r3, r7, #32
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fe23 	bl	8004498 <HAL_RCC_OscConfig>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <SystemClock_Config+0x98>
		Error_Handler();
 8002858:	f000 f81e 	bl	8002898 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800285c:	230f      	movs	r3, #15
 800285e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002860:	2302      	movs	r3, #2
 8002862:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f002 f885 	bl	8004988 <HAL_RCC_ClockConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0xc4>
		Error_Handler();
 8002884:	f000 f808 	bl	8002898 <Error_Handler>
	}
}
 8002888:	bf00      	nop
 800288a:	3750      	adds	r7, #80	; 0x50
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000

08002898 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028a0:	e7fe      	b.n	80028a0 <Error_Handler+0x8>
	...

080028a4 <writeTemp>:
char TEMP_BUF[MAX_BUF_SIZE];
char PRES_BUF[MAX_BUF_SIZE];
char ERR_TEMP_BUF[MAX_BUF_SIZE];
char ERR_PRES_BUF[MAX_BUF_SIZE];

void writeTemp(double temperature){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af04      	add	r7, sp, #16
 80028aa:	ed87 0b00 	vstr	d0, [r7]
	sprintf(TEMP_BUF, "%.2f", temperature);
 80028ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b2:	490b      	ldr	r1, [pc, #44]	; (80028e0 <writeTemp+0x3c>)
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <writeTemp+0x40>)
 80028b6:	f003 f97b 	bl	8005bb0 <siprintf>
	ST7735_WriteString(50, 16, TEMP_BUF, Font_11x18, GREEN, BLACK);
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <writeTemp+0x44>)
 80028bc:	2200      	movs	r2, #0
 80028be:	9202      	str	r2, [sp, #8]
 80028c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028c4:	9201      	str	r2, [sp, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	9200      	str	r2, [sp, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <writeTemp+0x40>)
 80028ce:	2110      	movs	r1, #16
 80028d0:	2032      	movs	r0, #50	; 0x32
 80028d2:	f7fe fd39 	bl	8001348 <ST7735_WriteString>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	08008020 	.word	0x08008020
 80028e4:	200002f4 	.word	0x200002f4
 80028e8:	20000008 	.word	0x20000008

080028ec <writePress>:

void writePress(double pressure){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af04      	add	r7, sp, #16
 80028f2:	ed87 0b00 	vstr	d0, [r7]
    sprintf(PRES_BUF, "%.2f", pressure);
 80028f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028fa:	490b      	ldr	r1, [pc, #44]	; (8002928 <writePress+0x3c>)
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <writePress+0x40>)
 80028fe:	f003 f957 	bl	8005bb0 <siprintf>
    ST7735_WriteString(25, 46, PRES_BUF, Font_11x18, GREEN, BLACK);
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <writePress+0x44>)
 8002904:	2200      	movs	r2, #0
 8002906:	9202      	str	r2, [sp, #8]
 8002908:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800290c:	9201      	str	r2, [sp, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	9200      	str	r2, [sp, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <writePress+0x40>)
 8002916:	212e      	movs	r1, #46	; 0x2e
 8002918:	2019      	movs	r0, #25
 800291a:	f7fe fd15 	bl	8001348 <ST7735_WriteString>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	08008020 	.word	0x08008020
 800292c:	200002e8 	.word	0x200002e8
 8002930:	20000008 	.word	0x20000008

08002934 <writeMenu>:

void writeMenu(void){
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af04      	add	r7, sp, #16
	ST7735_WriteString(5, 5, "Temperatura [st. C]", Font_7x10, YELLOW,BLACK);
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <writeMenu+0x60>)
 800293c:	2200      	movs	r2, #0
 800293e:	9202      	str	r2, [sp, #8]
 8002940:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002944:	9201      	str	r2, [sp, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	9200      	str	r2, [sp, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <writeMenu+0x64>)
 800294e:	2105      	movs	r1, #5
 8002950:	2005      	movs	r0, #5
 8002952:	f7fe fcf9 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Cisnienie [Pa]", Font_7x10, YELLOW,BLACK);
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <writeMenu+0x60>)
 8002958:	2200      	movs	r2, #0
 800295a:	9202      	str	r2, [sp, #8]
 800295c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	9200      	str	r2, [sp, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <writeMenu+0x68>)
 800296a:	2123      	movs	r1, #35	; 0x23
 800296c:	2005      	movs	r0, #5
 800296e:	f7fe fceb 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 65, "Stezenie PM10", Font_7x10, YELLOW,BLACK);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <writeMenu+0x60>)
 8002974:	2200      	movs	r2, #0
 8002976:	9202      	str	r2, [sp, #8]
 8002978:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800297c:	9201      	str	r2, [sp, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <writeMenu+0x6c>)
 8002986:	2141      	movs	r1, #65	; 0x41
 8002988:	2005      	movs	r0, #5
 800298a:	f7fe fcdd 	bl	8001348 <ST7735_WriteString>
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000000 	.word	0x20000000
 8002998:	08008028 	.word	0x08008028
 800299c:	0800803c 	.word	0x0800803c
 80029a0:	0800804c 	.word	0x0800804c

080029a4 <errMenu>:

void errMenu(int errTemp, int errPres){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af04      	add	r7, sp, #16
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	sprintf(ERR_TEMP_BUF, "%d", errTemp);
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4922      	ldr	r1, [pc, #136]	; (8002a3c <errMenu+0x98>)
 80029b2:	4823      	ldr	r0, [pc, #140]	; (8002a40 <errMenu+0x9c>)
 80029b4:	f003 f8fc 	bl	8005bb0 <siprintf>
	sprintf(ERR_PRES_BUF, "%d", errPres);
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4920      	ldr	r1, [pc, #128]	; (8002a3c <errMenu+0x98>)
 80029bc:	4821      	ldr	r0, [pc, #132]	; (8002a44 <errMenu+0xa0>)
 80029be:	f003 f8f7 	bl	8005bb0 <siprintf>
	ST7735_WriteString(0, 10, "Blad odczytu czujnika BMP280 - kody bledow:", Font_7x10, YELLOW,BLACK);
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <errMenu+0xa4>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	9202      	str	r2, [sp, #8]
 80029c8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80029cc:	9201      	str	r2, [sp, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <errMenu+0xa8>)
 80029d6:	210a      	movs	r1, #10
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fcb5 	bl	8001348 <ST7735_WriteString>

	ST7735_WriteString(65, 30, ERR_TEMP_BUF, Font_16x26, RED, BLACK);
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <errMenu+0xac>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	9202      	str	r2, [sp, #8]
 80029e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	9200      	str	r2, [sp, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <errMenu+0x9c>)
 80029f2:	211e      	movs	r1, #30
 80029f4:	2041      	movs	r0, #65	; 0x41
 80029f6:	f7fe fca7 	bl	8001348 <ST7735_WriteString>
    ST7735_WriteString(65, 56, ERR_PRES_BUF, Font_16x26, RED, BLACK);
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <errMenu+0xac>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	9202      	str	r2, [sp, #8]
 8002a00:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a04:	9201      	str	r2, [sp, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <errMenu+0xa0>)
 8002a0e:	2138      	movs	r1, #56	; 0x38
 8002a10:	2041      	movs	r0, #65	; 0x41
 8002a12:	f7fe fc99 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(0, 80, "Sprawdz czujnik oraz  zresetuj urzadzenie", Font_7x10, YELLOW,BLACK);
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <errMenu+0xa4>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	9202      	str	r2, [sp, #8]
 8002a1c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a20:	9201      	str	r2, [sp, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	9200      	str	r2, [sp, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <errMenu+0xb0>)
 8002a2a:	2150      	movs	r1, #80	; 0x50
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe fc8b 	bl	8001348 <ST7735_WriteString>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800805c 	.word	0x0800805c
 8002a40:	200002dc 	.word	0x200002dc
 8002a44:	20000300 	.word	0x20000300
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	08008060 	.word	0x08008060
 8002a50:	20000010 	.word	0x20000010
 8002a54:	0800808c 	.word	0x0800808c

08002a58 <writeTempHighWarn>:


void writeTempHighWarn(double temperature){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af04      	add	r7, sp, #16
 8002a5e:	ed87 0b00 	vstr	d0, [r7]
	ST7735_WriteString(2, 5, "Wywietrz miejsce pracy", Font_7x10, BLACK,RED);
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <writeTempHighWarn+0x78>)
 8002a64:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a68:	9202      	str	r2, [sp, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <writeTempHighWarn+0x7c>)
 8002a76:	2105      	movs	r1, #5
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f7fe fc65 	bl	8001348 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Aktualna temperatura:", Font_7x10, YELLOW ,RED);
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <writeTempHighWarn+0x78>)
 8002a80:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a84:	9202      	str	r2, [sp, #8]
 8002a86:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a8a:	9201      	str	r2, [sp, #4]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	9200      	str	r2, [sp, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <writeTempHighWarn+0x80>)
 8002a94:	2114      	movs	r1, #20
 8002a96:	2005      	movs	r0, #5
 8002a98:	f7fe fc56 	bl	8001348 <ST7735_WriteString>
	sprintf(TEMP_BUF, "%.2f", temperature);
 8002a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <writeTempHighWarn+0x84>)
 8002aa2:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <writeTempHighWarn+0x88>)
 8002aa4:	f003 f884 	bl	8005bb0 <siprintf>
	ST7735_WriteString(35, 35, TEMP_BUF, Font_16x26, GREEN, RED);
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <writeTempHighWarn+0x8c>)
 8002aaa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002aae:	9202      	str	r2, [sp, #8]
 8002ab0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ab4:	9201      	str	r2, [sp, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	9200      	str	r2, [sp, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <writeTempHighWarn+0x88>)
 8002abe:	2123      	movs	r1, #35	; 0x23
 8002ac0:	2023      	movs	r0, #35	; 0x23
 8002ac2:	f7fe fc41 	bl	8001348 <ST7735_WriteString>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	080080b8 	.word	0x080080b8
 8002ad8:	080080d0 	.word	0x080080d0
 8002adc:	08008020 	.word	0x08008020
 8002ae0:	200002f4 	.word	0x200002f4
 8002ae4:	20000010 	.word	0x20000010

08002ae8 <writeTempLowWarn>:
void writeTempLowWarn(double temperatures){
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	ed87 0b00 	vstr	d0, [r7]

}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <MX_SPI2_Init+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b34:	2210      	movs	r2, #16
 8002b36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b4c:	220a      	movs	r2, #10
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_SPI2_Init+0x64>)
 8002b52:	f002 f901 	bl	8004d58 <HAL_SPI_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b5c:	f7ff fe9c 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2000030c 	.word	0x2000030c
 8002b68:	40003800 	.word	0x40003800

08002b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <HAL_SPI_MspInit+0xc0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d14a      	bne.n	8002c24 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b20      	ldr	r3, [pc, #128]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_SPI_MspInit+0xc4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002be2:	2308      	movs	r3, #8
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <HAL_SPI_MspInit+0xc8>)
 8002bfe:	f000 faed 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c14:	2305      	movs	r3, #5
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4806      	ldr	r0, [pc, #24]	; (8002c38 <HAL_SPI_MspInit+0xcc>)
 8002c20:	f000 fadc 	bl	80031dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40003800 	.word	0x40003800
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40020800 	.word	0x40020800
 8002c38:	40020400 	.word	0x40020400

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f000 fa7a 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <NMI_Handler+0x4>

08002c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <MemManage_Handler+0x4>

08002c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd8:	f000 f956 	bl	8002f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	return 1;
 8002ce4:	2301      	movs	r3, #1
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_kill>:

int _kill(int pid, int sig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cfa:	f002 fabd 	bl	8005278 <__errno>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2216      	movs	r2, #22
 8002d02:	601a      	str	r2, [r3, #0]
	return -1;
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_exit>:

void _exit (int status)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ffe7 	bl	8002cf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d22:	e7fe      	b.n	8002d22 <_exit+0x12>

08002d24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e00a      	b.n	8002d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d36:	f3af 8000 	nop.w
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	60ba      	str	r2, [r7, #8]
 8002d42:	b2ca      	uxtb	r2, r1
 8002d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf0      	blt.n	8002d36 <_read+0x12>
	}

return len;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e009      	b.n	8002d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbf1      	blt.n	8002d70 <_write+0x12>
	}
	return len;
 8002d8c:	687b      	ldr	r3, [r7, #4]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_close>:

int _close(int file)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_isatty>:

int _isatty(int file)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f002 fa22 	bl	8005278 <__errno>
 8002e34:	4603      	mov	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20018000 	.word	0x20018000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	20000238 	.word	0x20000238
 8002e68:	20000378 	.word	0x20000378

08002e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <SystemInit+0x20>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <SystemInit+0x20>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002eac:	4c0b      	ldr	r4, [pc, #44]	; (8002edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eba:	f7ff ffd7 	bl	8002e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ebe:	f002 f9e1 	bl	8005284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec2:	f7ff fb89 	bl	80025d8 <main>
  bx  lr    
 8002ec6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002ed4:	0800ad7c 	.word	0x0800ad7c
  ldr r2, =_sbss
 8002ed8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002edc:	20000378 	.word	0x20000378

08002ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_Init+0x40>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <HAL_Init+0x40>)
 8002eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_Init+0x40>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <HAL_Init+0x40>)
 8002efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_Init+0x40>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 f931 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f000 f808 	bl	8002f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f18:	f7ff fe90 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x54>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_InitTick+0x58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f93b 	bl	80031c2 <HAL_SYSTICK_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00e      	b.n	8002f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d80a      	bhi.n	8002f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f000 f911 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <HAL_InitTick+0x5c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000018 	.word	0x20000018
 8002f80:	20000020 	.word	0x20000020
 8002f84:	2000001c 	.word	0x2000001c

08002f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_IncTick+0x24>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_IncTick+0x24>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000020 	.word	0x20000020
 8002fac:	20000364 	.word	0x20000364

08002fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_GetTick+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000364 	.word	0x20000364

08002fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff ffee 	bl	8002fb0 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d005      	beq.n	8002fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_Delay+0x44>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fee:	bf00      	nop
 8002ff0:	f7ff ffde 	bl	8002fb0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d8f7      	bhi.n	8002ff0 <HAL_Delay+0x28>
  {
  }
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000020 	.word	0x20000020

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff47 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800319c:	f7ff ff5c 	bl	8003058 <__NVIC_GetPriorityGrouping>
 80031a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff ff8e 	bl	80030c8 <NVIC_EncodePriority>
 80031ac:	4602      	mov	r2, r0
 80031ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff5d 	bl	8003074 <__NVIC_SetPriority>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffb0 	bl	8003130 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e159      	b.n	80034ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8148 	bne.w	80034a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80a2 	beq.w	80034a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_GPIO_Init+0x2e8>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_GPIO_Init+0x2e8>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b54      	ldr	r3, [pc, #336]	; (80034c4 <HAL_GPIO_Init+0x2e8>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337e:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_GPIO_Init+0x2ec>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a49      	ldr	r2, [pc, #292]	; (80034cc <HAL_GPIO_Init+0x2f0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d019      	beq.n	80033de <HAL_GPIO_Init+0x202>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a48      	ldr	r2, [pc, #288]	; (80034d0 <HAL_GPIO_Init+0x2f4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_GPIO_Init+0x1fe>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a47      	ldr	r2, [pc, #284]	; (80034d4 <HAL_GPIO_Init+0x2f8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00d      	beq.n	80033d6 <HAL_GPIO_Init+0x1fa>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a46      	ldr	r2, [pc, #280]	; (80034d8 <HAL_GPIO_Init+0x2fc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <HAL_GPIO_Init+0x1f6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a45      	ldr	r2, [pc, #276]	; (80034dc <HAL_GPIO_Init+0x300>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_GPIO_Init+0x1f2>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e008      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e004      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033de:	2300      	movs	r3, #0
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f002 0203 	and.w	r2, r2, #3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	4093      	lsls	r3, r2
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f0:	4935      	ldr	r1, [pc, #212]	; (80034c8 <HAL_GPIO_Init+0x2ec>)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033fe:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_GPIO_Init+0x304>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003422:	4a2f      	ldr	r2, [pc, #188]	; (80034e0 <HAL_GPIO_Init+0x304>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <HAL_GPIO_Init+0x304>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <HAL_GPIO_Init+0x304>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_GPIO_Init+0x304>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_GPIO_Init+0x304>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800347c:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_GPIO_Init+0x304>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_GPIO_Init+0x304>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3301      	adds	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	f67f aea2 	bls.w	80031f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e12b      	b.n	8003782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff f802 	bl	8002548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800357c:	f001 fbd8 	bl	8004d30 <HAL_RCC_GetPCLK1Freq>
 8003580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a81      	ldr	r2, [pc, #516]	; (800378c <HAL_I2C_Init+0x274>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d807      	bhi.n	800359c <HAL_I2C_Init+0x84>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_I2C_Init+0x278>)
 8003590:	4293      	cmp	r3, r2
 8003592:	bf94      	ite	ls
 8003594:	2301      	movls	r3, #1
 8003596:	2300      	movhi	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e006      	b.n	80035aa <HAL_I2C_Init+0x92>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a7d      	ldr	r2, [pc, #500]	; (8003794 <HAL_I2C_Init+0x27c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bf94      	ite	ls
 80035a4:	2301      	movls	r3, #1
 80035a6:	2300      	movhi	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0e7      	b.n	8003782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a78      	ldr	r2, [pc, #480]	; (8003798 <HAL_I2C_Init+0x280>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0c9b      	lsrs	r3, r3, #18
 80035bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_I2C_Init+0x274>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <HAL_I2C_Init+0xd4>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	e009      	b.n	8003600 <HAL_I2C_Init+0xe8>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	4a69      	ldr	r2, [pc, #420]	; (800379c <HAL_I2C_Init+0x284>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	3301      	adds	r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	495c      	ldr	r1, [pc, #368]	; (800378c <HAL_I2C_Init+0x274>)
 800361c:	428b      	cmp	r3, r1
 800361e:	d819      	bhi.n	8003654 <HAL_I2C_Init+0x13c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e59      	subs	r1, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	fbb1 f3f3 	udiv	r3, r1, r3
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003634:	400b      	ands	r3, r1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_I2C_Init+0x138>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1e59      	subs	r1, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fbb1 f3f3 	udiv	r3, r1, r3
 8003648:	3301      	adds	r3, #1
 800364a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364e:	e051      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 8003650:	2304      	movs	r3, #4
 8003652:	e04f      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d111      	bne.n	8003680 <HAL_I2C_Init+0x168>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Init+0x18e>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	0099      	lsls	r1, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x196>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e022      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_I2C_Init+0x1bc>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e58      	subs	r0, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	440b      	add	r3, r1
 80036c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Init+0x1dc>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6809      	ldr	r1, [r1, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6911      	ldr	r1, [r2, #16]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	000186a0 	.word	0x000186a0
 8003790:	001e847f 	.word	0x001e847f
 8003794:	003d08ff 	.word	0x003d08ff
 8003798:	431bde83 	.word	0x431bde83
 800379c:	10624dd3 	.word	0x10624dd3

080037a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	460b      	mov	r3, r1
 80037b4:	813b      	strh	r3, [r7, #8]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ba:	f7ff fbf9 	bl	8002fb0 <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 80d9 	bne.w	8003980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	2319      	movs	r3, #25
 80037d4:	2201      	movs	r2, #1
 80037d6:	496d      	ldr	r1, [pc, #436]	; (800398c <HAL_I2C_Mem_Write+0x1ec>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fc7f 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037e4:	2302      	movs	r3, #2
 80037e6:	e0cc      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x56>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0c5      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d007      	beq.n	800381c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_I2C_Mem_Write+0x1f0>)
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800385e:	88f8      	ldrh	r0, [r7, #6]
 8003860:	893a      	ldrh	r2, [r7, #8]
 8003862:	8979      	ldrh	r1, [r7, #10]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fab6 	bl	8003de0 <I2C_RequestMemoryWrite>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d052      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e081      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fd00 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b04      	cmp	r3, #4
 8003894:	d107      	bne.n	80038a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d11b      	bne.n	8003920 <HAL_I2C_Mem_Write+0x180>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1aa      	bne.n	800387e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fcec 	bl	800430a <I2C_WaitOnBTFFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00d      	beq.n	8003954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b04      	cmp	r3, #4
 800393e:	d107      	bne.n	8003950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e016      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	00100002 	.word	0x00100002
 8003990:	ffff0000 	.word	0xffff0000

08003994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039ae:	f7ff faff 	bl	8002fb0 <HAL_GetTick>
 80039b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	f040 8208 	bne.w	8003dd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2319      	movs	r3, #25
 80039c8:	2201      	movs	r2, #1
 80039ca:	497b      	ldr	r1, [pc, #492]	; (8003bb8 <HAL_I2C_Mem_Read+0x224>)
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 fb85 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
 80039da:	e1fb      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Mem_Read+0x56>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e1f4      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d007      	beq.n	8003a10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2222      	movs	r2, #34	; 0x22
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2240      	movs	r2, #64	; 0x40
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_I2C_Mem_Read+0x228>)
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a52:	88f8      	ldrh	r0, [r7, #6]
 8003a54:	893a      	ldrh	r2, [r7, #8]
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	4603      	mov	r3, r0
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa52 	bl	8003f0c <I2C_RequestMemoryRead>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1b0      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e184      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e164      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d11b      	bne.n	8003b22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	e144      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b38:	e138      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	f200 80f1 	bhi.w	8003d26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d123      	bne.n	8003b94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fc1b 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e139      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b92:	e10b      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d14e      	bne.n	8003c3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_I2C_Mem_Read+0x22c>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa98 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e10e      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
 8003bb6:	bf00      	nop
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c38:	e0b8      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	2200      	movs	r2, #0
 8003c42:	4966      	ldr	r1, [pc, #408]	; (8003ddc <HAL_I2C_Mem_Read+0x448>)
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fa49 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0bf      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	494f      	ldr	r1, [pc, #316]	; (8003ddc <HAL_I2C_Mem_Read+0x448>)
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa1b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e091      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d24:	e042      	b.n	8003dac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fb2e 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e04c      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d118      	bne.n	8003dac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f aec2 	bne.w	8003b3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3728      	adds	r7, #40	; 0x28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	00010004 	.word	0x00010004

08003de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f960 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e30:	d103      	bne.n	8003e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e05f      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e3e:	897b      	ldrh	r3, [r7, #10]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <I2C_RequestMemoryWrite+0x128>)
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f998 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e04c      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fa02 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02b      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	e021      	b.n	8003efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f9dc 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e005      	b.n	8003efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef2:	893b      	ldrh	r3, [r7, #8]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	00010002 	.word	0x00010002

08003f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f8c2 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6c:	d103      	bne.n	8003f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0aa      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7a:	897b      	ldrh	r3, [r7, #10]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	4952      	ldr	r1, [pc, #328]	; (80040d8 <I2C_RequestMemoryRead+0x1cc>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f8fa 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e097      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb8:	6a39      	ldr	r1, [r7, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f964 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d107      	bne.n	8003fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e076      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe8:	893b      	ldrh	r3, [r7, #8]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	e021      	b.n	8004038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff4:	893b      	ldrh	r3, [r7, #8]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	6a39      	ldr	r1, [r7, #32]
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f93e 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b04      	cmp	r3, #4
 8004018:	d107      	bne.n	800402a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e050      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800402e:	893b      	ldrh	r3, [r7, #8]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	6a39      	ldr	r1, [r7, #32]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f923 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e035      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	2200      	movs	r2, #0
 800407c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 f82b 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d103      	bne.n	80040a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e013      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040a8:	897b      	ldrh	r3, [r7, #10]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	4906      	ldr	r1, [pc, #24]	; (80040d8 <I2C_RequestMemoryRead+0x1cc>)
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f863 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e025      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe ff5b 	bl	8002fb0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e023      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10d      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	e00c      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d0b6      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	e051      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d123      	bne.n	80041f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e046      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe fed9 	bl	8002fb0 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e00b      	b.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d18d      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	e02d      	b.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ce 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe fe7f 	bl	8002fb0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d1ca      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004316:	e02d      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f88d 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d021      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fe fe3e 	bl	8002fb0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ca      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e042      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fde8 	bl	8002fb0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d1b5      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d11b      	bne.n	8004488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e264      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d075      	beq.n	80045a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044b6:	4ba3      	ldr	r3, [pc, #652]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d00c      	beq.n	80044dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c2:	4ba0      	ldr	r3, [pc, #640]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d112      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4b9d      	ldr	r3, [pc, #628]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044da:	d10b      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044dc:	4b99      	ldr	r3, [pc, #612]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d05b      	beq.n	80045a0 <HAL_RCC_OscConfig+0x108>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d157      	bne.n	80045a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e23f      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d106      	bne.n	800450c <HAL_RCC_OscConfig+0x74>
 80044fe:	4b91      	ldr	r3, [pc, #580]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a90      	ldr	r2, [pc, #576]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e01d      	b.n	8004548 <HAL_RCC_OscConfig+0xb0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x98>
 8004516:	4b8b      	ldr	r3, [pc, #556]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a8a      	ldr	r2, [pc, #552]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a87      	ldr	r2, [pc, #540]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e00b      	b.n	8004548 <HAL_RCC_OscConfig+0xb0>
 8004530:	4b84      	ldr	r3, [pc, #528]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a83      	ldr	r2, [pc, #524]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4b81      	ldr	r3, [pc, #516]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a80      	ldr	r2, [pc, #512]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fe fd2e 	bl	8002fb0 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004558:	f7fe fd2a 	bl	8002fb0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e204      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0xc0>
 8004576:	e014      	b.n	80045a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe fd1a 	bl	8002fb0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7fe fd16 	bl	8002fb0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1f0      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004592:	4b6c      	ldr	r3, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0xe8>
 800459e:	e000      	b.n	80045a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d063      	beq.n	8004676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ae:	4b65      	ldr	r3, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ba:	4b62      	ldr	r3, [pc, #392]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b5f      	ldr	r3, [pc, #380]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	4b5c      	ldr	r3, [pc, #368]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_RCC_OscConfig+0x152>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e1c4      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ea:	4b56      	ldr	r3, [pc, #344]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4952      	ldr	r1, [pc, #328]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	e03a      	b.n	8004676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004608:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <HAL_RCC_OscConfig+0x2b0>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fe fccf 	bl	8002fb0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004616:	f7fe fccb 	bl	8002fb0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e1a5      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004628:	4b46      	ldr	r3, [pc, #280]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4940      	ldr	r1, [pc, #256]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	4313      	orrs	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_OscConfig+0x2b0>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe fcae 	bl	8002fb0 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004658:	f7fe fcaa 	bl	8002fb0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e184      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d030      	beq.n	80046e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_OscConfig+0x2b4>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fe fc8e 	bl	8002fb0 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004698:	f7fe fc8a 	bl	8002fb0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e164      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046aa:	4b26      	ldr	r3, [pc, #152]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCC_OscConfig+0x200>
 80046b6:	e015      	b.n	80046e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_OscConfig+0x2b4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046be:	f7fe fc77 	bl	8002fb0 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fe fc73 	bl	8002fb0 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e14d      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d8:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80a0 	beq.w	8004832 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x2b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d121      	bne.n	8004772 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCC_OscConfig+0x2b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <HAL_RCC_OscConfig+0x2b8>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fe fc39 	bl	8002fb0 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	e011      	b.n	8004766 <HAL_RCC_OscConfig+0x2ce>
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
 8004750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fe fc2c 	bl	8002fb0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e106      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b85      	ldr	r3, [pc, #532]	; (800497c <HAL_RCC_OscConfig+0x4e4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d106      	bne.n	8004788 <HAL_RCC_OscConfig+0x2f0>
 800477a:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a80      	ldr	r2, [pc, #512]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
 8004786:	e01c      	b.n	80047c2 <HAL_RCC_OscConfig+0x32a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b05      	cmp	r3, #5
 800478e:	d10c      	bne.n	80047aa <HAL_RCC_OscConfig+0x312>
 8004790:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	4a7a      	ldr	r2, [pc, #488]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6713      	str	r3, [r2, #112]	; 0x70
 800479c:	4b78      	ldr	r3, [pc, #480]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a77      	ldr	r2, [pc, #476]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e00b      	b.n	80047c2 <HAL_RCC_OscConfig+0x32a>
 80047aa:	4b75      	ldr	r3, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	4a74      	ldr	r2, [pc, #464]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6713      	str	r3, [r2, #112]	; 0x70
 80047b6:	4b72      	ldr	r3, [pc, #456]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a71      	ldr	r2, [pc, #452]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d015      	beq.n	80047f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fe fbf1 	bl	8002fb0 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fe fbed 	bl	8002fb0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0c5      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	4b65      	ldr	r3, [pc, #404]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ee      	beq.n	80047d2 <HAL_RCC_OscConfig+0x33a>
 80047f4:	e014      	b.n	8004820 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f6:	f7fe fbdb 	bl	8002fb0 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fe fbd7 	bl	8002fb0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0af      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	4b5a      	ldr	r3, [pc, #360]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ee      	bne.n	80047fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b56      	ldr	r3, [pc, #344]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a55      	ldr	r2, [pc, #340]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 809b 	beq.w	8004972 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483c:	4b50      	ldr	r3, [pc, #320]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d05c      	beq.n	8004902 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d141      	bne.n	80048d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b4c      	ldr	r3, [pc, #304]	; (8004984 <HAL_RCC_OscConfig+0x4ec>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004856:	f7fe fbab 	bl	8002fb0 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485e:	f7fe fba7 	bl	8002fb0 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e081      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	019b      	lsls	r3, r3, #6
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	3b01      	subs	r3, #1
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	4937      	ldr	r1, [pc, #220]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCC_OscConfig+0x4ec>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fe fb80 	bl	8002fb0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fe fb7c 	bl	8002fb0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e056      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x41c>
 80048d2:	e04e      	b.n	8004972 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_RCC_OscConfig+0x4ec>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048da:	f7fe fb69 	bl	8002fb0 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fe fb65 	bl	8002fb0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e03f      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x44a>
 8004900:	e037      	b.n	8004972 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e032      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d028      	beq.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d121      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d11a      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800493e:	4013      	ands	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004944:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004946:	4293      	cmp	r3, r2
 8004948:	d111      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d107      	bne.n	800496e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40007000 	.word	0x40007000
 8004980:	40023800 	.word	0x40023800
 8004984:	42470060 	.word	0x42470060

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0cc      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b68      	ldr	r3, [pc, #416]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d90c      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b8      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a58      	ldr	r2, [pc, #352]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a52      	ldr	r2, [pc, #328]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	494d      	ldr	r1, [pc, #308]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d044      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d119      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e067      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4934      	ldr	r1, [pc, #208]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a78:	f7fe fa9a 	bl	8002fb0 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fe fa96 	bl	8002fb0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e04f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d20c      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e032      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4916      	ldr	r1, [pc, #88]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	490e      	ldr	r1, [pc, #56]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b0e:	f000 f821 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	490a      	ldr	r1, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe f9fa 	bl	8002f28 <HAL_InitTick>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	0800a970 	.word	0x0800a970
 8004b4c:	20000018 	.word	0x20000018
 8004b50:	2000001c 	.word	0x2000001c

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	2300      	movs	r3, #0
 8004b66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6c:	4b67      	ldr	r3, [pc, #412]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d00d      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x40>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	f200 80bd 	bhi.w	8004cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x34>
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b86:	e0b7      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b8a:	60bb      	str	r3, [r7, #8]
       break;
 8004b8c:	e0b7      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8e:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b90:	60bb      	str	r3, [r7, #8]
      break;
 8004b92:	e0b4      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b94:	4b5d      	ldr	r3, [pc, #372]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b9e:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04d      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004baa:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bba:	f04f 0100 	mov.w	r1, #0
 8004bbe:	ea02 0800 	and.w	r8, r2, r0
 8004bc2:	ea03 0901 	and.w	r9, r3, r1
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	4649      	mov	r1, r9
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	014b      	lsls	r3, r1, #5
 8004bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bd8:	0142      	lsls	r2, r0, #5
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4619      	mov	r1, r3
 8004bde:	ebb0 0008 	subs.w	r0, r0, r8
 8004be2:	eb61 0109 	sbc.w	r1, r1, r9
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	018b      	lsls	r3, r1, #6
 8004bf0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bf4:	0182      	lsls	r2, r0, #6
 8004bf6:	1a12      	subs	r2, r2, r0
 8004bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8004bfc:	f04f 0000 	mov.w	r0, #0
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	00d9      	lsls	r1, r3, #3
 8004c06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c0a:	00d0      	lsls	r0, r2, #3
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	eb12 0208 	adds.w	r2, r2, r8
 8004c14:	eb43 0309 	adc.w	r3, r3, r9
 8004c18:	f04f 0000 	mov.w	r0, #0
 8004c1c:	f04f 0100 	mov.w	r1, #0
 8004c20:	0259      	lsls	r1, r3, #9
 8004c22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c26:	0250      	lsls	r0, r2, #9
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	f7fb ffbe 	bl	8000bb8 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e04a      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b31      	ldr	r3, [pc, #196]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c56:	f04f 0100 	mov.w	r1, #0
 8004c5a:	ea02 0400 	and.w	r4, r2, r0
 8004c5e:	ea03 0501 	and.w	r5, r3, r1
 8004c62:	4620      	mov	r0, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	014b      	lsls	r3, r1, #5
 8004c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c74:	0142      	lsls	r2, r0, #5
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	1b00      	subs	r0, r0, r4
 8004c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	018b      	lsls	r3, r1, #6
 8004c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c8e:	0182      	lsls	r2, r0, #6
 8004c90:	1a12      	subs	r2, r2, r0
 8004c92:	eb63 0301 	sbc.w	r3, r3, r1
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca4:	00d0      	lsls	r0, r2, #3
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	1912      	adds	r2, r2, r4
 8004cac:	eb45 0303 	adc.w	r3, r5, r3
 8004cb0:	f04f 0000 	mov.w	r0, #0
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	0299      	lsls	r1, r3, #10
 8004cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cbe:	0290      	lsls	r0, r2, #10
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	f7fb ff72 	bl	8000bb8 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4613      	mov	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	60bb      	str	r3, [r7, #8]
      break;
 8004cf6:	e002      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cfa:	60bb      	str	r3, [r7, #8]
      break;
 8004cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	00f42400 	.word	0x00f42400
 8004d14:	007a1200 	.word	0x007a1200

08004d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20000018 	.word	0x20000018

08004d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d34:	f7ff fff0 	bl	8004d18 <HAL_RCC_GetHCLKFreq>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	0a9b      	lsrs	r3, r3, #10
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d46:	5ccb      	ldrb	r3, [r1, r3]
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	0800a980 	.word	0x0800a980

08004d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e07b      	b.n	8004e62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7a:	d009      	beq.n	8004d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	61da      	str	r2, [r3, #28]
 8004d82:	e005      	b.n	8004d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fd fede 	bl	8002b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	ea42 0103 	orr.w	r1, r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	f003 0104 	and.w	r1, r3, #4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	f003 0210 	and.w	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b088      	sub	sp, #32
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_SPI_Transmit+0x22>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e126      	b.n	80050da <HAL_SPI_Transmit+0x270>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e94:	f7fe f88c 	bl	8002fb0 <HAL_GetTick>
 8004e98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d002      	beq.n	8004eb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eae:	e10b      	b.n	80050c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_SPI_Transmit+0x52>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ec0:	e102      	b.n	80050c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d10f      	bne.n	8004f2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d007      	beq.n	8004f48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f50:	d14b      	bne.n	8004fea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_SPI_Transmit+0xf6>
 8004f5a:	8afb      	ldrh	r3, [r7, #22]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d13e      	bne.n	8004fde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	881a      	ldrh	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f84:	e02b      	b.n	8004fde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d112      	bne.n	8004fba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	881a      	ldrh	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	1c9a      	adds	r2, r3, #2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fb8:	e011      	b.n	8004fde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fba:	f7fd fff9 	bl	8002fb0 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d803      	bhi.n	8004fd2 <HAL_SPI_Transmit+0x168>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_Transmit+0x16e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fdc:	e074      	b.n	80050c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1ce      	bne.n	8004f86 <HAL_SPI_Transmit+0x11c>
 8004fe8:	e04c      	b.n	8005084 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_SPI_Transmit+0x18e>
 8004ff2:	8afb      	ldrh	r3, [r7, #22]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d140      	bne.n	800507a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800501e:	e02c      	b.n	800507a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d113      	bne.n	8005056 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	86da      	strh	r2, [r3, #54]	; 0x36
 8005054:	e011      	b.n	800507a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005056:	f7fd ffab 	bl	8002fb0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d803      	bhi.n	800506e <HAL_SPI_Transmit+0x204>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d102      	bne.n	8005074 <HAL_SPI_Transmit+0x20a>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005078:	e026      	b.n	80050c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1cd      	bne.n	8005020 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f8b3 	bl	80051f4 <SPI_EndRxTxTransaction>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e000      	b.n	80050c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80050c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050f4:	f7fd ff5c 	bl	8002fb0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	4413      	add	r3, r2
 8005102:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005104:	f7fd ff54 	bl	8002fb0 <HAL_GetTick>
 8005108:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	015b      	lsls	r3, r3, #5
 8005110:	0d1b      	lsrs	r3, r3, #20
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511a:	e054      	b.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d050      	beq.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005124:	f7fd ff44 	bl	8002fb0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	429a      	cmp	r2, r3
 8005132:	d902      	bls.n	800513a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d13d      	bne.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005148:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005152:	d111      	bne.n	8005178 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800515c:	d004      	beq.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005166:	d107      	bne.n	8005178 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005180:	d10f      	bne.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e017      	b.n	80051e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4013      	ands	r3, r2
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d19b      	bne.n	800511c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000018 	.word	0x20000018

080051f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <SPI_EndRxTxTransaction+0x7c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <SPI_EndRxTxTransaction+0x80>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	0d5b      	lsrs	r3, r3, #21
 800520c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521e:	d112      	bne.n	8005246 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2200      	movs	r2, #0
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff5a 	bl	80050e4 <SPI_WaitFlagStateUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d016      	beq.n	8005264 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e00f      	b.n	8005266 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3b01      	subs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d0f2      	beq.n	8005246 <SPI_EndRxTxTransaction+0x52>
 8005260:	e000      	b.n	8005264 <SPI_EndRxTxTransaction+0x70>
        break;
 8005262:	bf00      	nop
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000018 	.word	0x20000018
 8005274:	165e9f81 	.word	0x165e9f81

08005278 <__errno>:
 8005278:	4b01      	ldr	r3, [pc, #4]	; (8005280 <__errno+0x8>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000024 	.word	0x20000024

08005284 <__libc_init_array>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	4d0d      	ldr	r5, [pc, #52]	; (80052bc <__libc_init_array+0x38>)
 8005288:	4c0d      	ldr	r4, [pc, #52]	; (80052c0 <__libc_init_array+0x3c>)
 800528a:	1b64      	subs	r4, r4, r5
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	2600      	movs	r6, #0
 8005290:	42a6      	cmp	r6, r4
 8005292:	d109      	bne.n	80052a8 <__libc_init_array+0x24>
 8005294:	4d0b      	ldr	r5, [pc, #44]	; (80052c4 <__libc_init_array+0x40>)
 8005296:	4c0c      	ldr	r4, [pc, #48]	; (80052c8 <__libc_init_array+0x44>)
 8005298:	f002 feb4 	bl	8008004 <_init>
 800529c:	1b64      	subs	r4, r4, r5
 800529e:	10a4      	asrs	r4, r4, #2
 80052a0:	2600      	movs	r6, #0
 80052a2:	42a6      	cmp	r6, r4
 80052a4:	d105      	bne.n	80052b2 <__libc_init_array+0x2e>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ac:	4798      	blx	r3
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7ee      	b.n	8005290 <__libc_init_array+0xc>
 80052b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b6:	4798      	blx	r3
 80052b8:	3601      	adds	r6, #1
 80052ba:	e7f2      	b.n	80052a2 <__libc_init_array+0x1e>
 80052bc:	0800ad74 	.word	0x0800ad74
 80052c0:	0800ad74 	.word	0x0800ad74
 80052c4:	0800ad74 	.word	0x0800ad74
 80052c8:	0800ad78 	.word	0x0800ad78

080052cc <memset>:
 80052cc:	4402      	add	r2, r0
 80052ce:	4603      	mov	r3, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <__cvt>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	ec55 4b10 	vmov	r4, r5, d0
 80052e4:	2d00      	cmp	r5, #0
 80052e6:	460e      	mov	r6, r1
 80052e8:	4619      	mov	r1, r3
 80052ea:	462b      	mov	r3, r5
 80052ec:	bfbb      	ittet	lt
 80052ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052f2:	461d      	movlt	r5, r3
 80052f4:	2300      	movge	r3, #0
 80052f6:	232d      	movlt	r3, #45	; 0x2d
 80052f8:	700b      	strb	r3, [r1, #0]
 80052fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005300:	4691      	mov	r9, r2
 8005302:	f023 0820 	bic.w	r8, r3, #32
 8005306:	bfbc      	itt	lt
 8005308:	4622      	movlt	r2, r4
 800530a:	4614      	movlt	r4, r2
 800530c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005310:	d005      	beq.n	800531e <__cvt+0x42>
 8005312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005316:	d100      	bne.n	800531a <__cvt+0x3e>
 8005318:	3601      	adds	r6, #1
 800531a:	2102      	movs	r1, #2
 800531c:	e000      	b.n	8005320 <__cvt+0x44>
 800531e:	2103      	movs	r1, #3
 8005320:	ab03      	add	r3, sp, #12
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	ab02      	add	r3, sp, #8
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	ec45 4b10 	vmov	d0, r4, r5
 800532c:	4653      	mov	r3, sl
 800532e:	4632      	mov	r2, r6
 8005330:	f000 fcea 	bl	8005d08 <_dtoa_r>
 8005334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005338:	4607      	mov	r7, r0
 800533a:	d102      	bne.n	8005342 <__cvt+0x66>
 800533c:	f019 0f01 	tst.w	r9, #1
 8005340:	d022      	beq.n	8005388 <__cvt+0xac>
 8005342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005346:	eb07 0906 	add.w	r9, r7, r6
 800534a:	d110      	bne.n	800536e <__cvt+0x92>
 800534c:	783b      	ldrb	r3, [r7, #0]
 800534e:	2b30      	cmp	r3, #48	; 0x30
 8005350:	d10a      	bne.n	8005368 <__cvt+0x8c>
 8005352:	2200      	movs	r2, #0
 8005354:	2300      	movs	r3, #0
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800535e:	b918      	cbnz	r0, 8005368 <__cvt+0x8c>
 8005360:	f1c6 0601 	rsb	r6, r6, #1
 8005364:	f8ca 6000 	str.w	r6, [sl]
 8005368:	f8da 3000 	ldr.w	r3, [sl]
 800536c:	4499      	add	r9, r3
 800536e:	2200      	movs	r2, #0
 8005370:	2300      	movs	r3, #0
 8005372:	4620      	mov	r0, r4
 8005374:	4629      	mov	r1, r5
 8005376:	f7fb fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800537a:	b108      	cbz	r0, 8005380 <__cvt+0xa4>
 800537c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005380:	2230      	movs	r2, #48	; 0x30
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	454b      	cmp	r3, r9
 8005386:	d307      	bcc.n	8005398 <__cvt+0xbc>
 8005388:	9b03      	ldr	r3, [sp, #12]
 800538a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800538c:	1bdb      	subs	r3, r3, r7
 800538e:	4638      	mov	r0, r7
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	b004      	add	sp, #16
 8005394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005398:	1c59      	adds	r1, r3, #1
 800539a:	9103      	str	r1, [sp, #12]
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e7f0      	b.n	8005382 <__cvt+0xa6>

080053a0 <__exponent>:
 80053a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a2:	4603      	mov	r3, r0
 80053a4:	2900      	cmp	r1, #0
 80053a6:	bfb8      	it	lt
 80053a8:	4249      	neglt	r1, r1
 80053aa:	f803 2b02 	strb.w	r2, [r3], #2
 80053ae:	bfb4      	ite	lt
 80053b0:	222d      	movlt	r2, #45	; 0x2d
 80053b2:	222b      	movge	r2, #43	; 0x2b
 80053b4:	2909      	cmp	r1, #9
 80053b6:	7042      	strb	r2, [r0, #1]
 80053b8:	dd2a      	ble.n	8005410 <__exponent+0x70>
 80053ba:	f10d 0407 	add.w	r4, sp, #7
 80053be:	46a4      	mov	ip, r4
 80053c0:	270a      	movs	r7, #10
 80053c2:	46a6      	mov	lr, r4
 80053c4:	460a      	mov	r2, r1
 80053c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80053ca:	fb07 1516 	mls	r5, r7, r6, r1
 80053ce:	3530      	adds	r5, #48	; 0x30
 80053d0:	2a63      	cmp	r2, #99	; 0x63
 80053d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80053d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053da:	4631      	mov	r1, r6
 80053dc:	dcf1      	bgt.n	80053c2 <__exponent+0x22>
 80053de:	3130      	adds	r1, #48	; 0x30
 80053e0:	f1ae 0502 	sub.w	r5, lr, #2
 80053e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053e8:	1c44      	adds	r4, r0, #1
 80053ea:	4629      	mov	r1, r5
 80053ec:	4561      	cmp	r1, ip
 80053ee:	d30a      	bcc.n	8005406 <__exponent+0x66>
 80053f0:	f10d 0209 	add.w	r2, sp, #9
 80053f4:	eba2 020e 	sub.w	r2, r2, lr
 80053f8:	4565      	cmp	r5, ip
 80053fa:	bf88      	it	hi
 80053fc:	2200      	movhi	r2, #0
 80053fe:	4413      	add	r3, r2
 8005400:	1a18      	subs	r0, r3, r0
 8005402:	b003      	add	sp, #12
 8005404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800540a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800540e:	e7ed      	b.n	80053ec <__exponent+0x4c>
 8005410:	2330      	movs	r3, #48	; 0x30
 8005412:	3130      	adds	r1, #48	; 0x30
 8005414:	7083      	strb	r3, [r0, #2]
 8005416:	70c1      	strb	r1, [r0, #3]
 8005418:	1d03      	adds	r3, r0, #4
 800541a:	e7f1      	b.n	8005400 <__exponent+0x60>

0800541c <_printf_float>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	ed2d 8b02 	vpush	{d8}
 8005424:	b08d      	sub	sp, #52	; 0x34
 8005426:	460c      	mov	r4, r1
 8005428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800542c:	4616      	mov	r6, r2
 800542e:	461f      	mov	r7, r3
 8005430:	4605      	mov	r5, r0
 8005432:	f001 fa55 	bl	80068e0 <_localeconv_r>
 8005436:	f8d0 a000 	ldr.w	sl, [r0]
 800543a:	4650      	mov	r0, sl
 800543c:	f7fa fed0 	bl	80001e0 <strlen>
 8005440:	2300      	movs	r3, #0
 8005442:	930a      	str	r3, [sp, #40]	; 0x28
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	f8d8 3000 	ldr.w	r3, [r8]
 800544c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005450:	3307      	adds	r3, #7
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	f103 0208 	add.w	r2, r3, #8
 800545a:	f8c8 2000 	str.w	r2, [r8]
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800546a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	f8cd 8018 	str.w	r8, [sp, #24]
 8005474:	ee08 0a10 	vmov	s16, r0
 8005478:	4b9f      	ldr	r3, [pc, #636]	; (80056f8 <_printf_float+0x2dc>)
 800547a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800547e:	f04f 32ff 	mov.w	r2, #4294967295
 8005482:	f7fb fb5b 	bl	8000b3c <__aeabi_dcmpun>
 8005486:	bb88      	cbnz	r0, 80054ec <_printf_float+0xd0>
 8005488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800548c:	4b9a      	ldr	r3, [pc, #616]	; (80056f8 <_printf_float+0x2dc>)
 800548e:	f04f 32ff 	mov.w	r2, #4294967295
 8005492:	f7fb fb35 	bl	8000b00 <__aeabi_dcmple>
 8005496:	bb48      	cbnz	r0, 80054ec <_printf_float+0xd0>
 8005498:	2200      	movs	r2, #0
 800549a:	2300      	movs	r3, #0
 800549c:	4640      	mov	r0, r8
 800549e:	4649      	mov	r1, r9
 80054a0:	f7fb fb24 	bl	8000aec <__aeabi_dcmplt>
 80054a4:	b110      	cbz	r0, 80054ac <_printf_float+0x90>
 80054a6:	232d      	movs	r3, #45	; 0x2d
 80054a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ac:	4b93      	ldr	r3, [pc, #588]	; (80056fc <_printf_float+0x2e0>)
 80054ae:	4894      	ldr	r0, [pc, #592]	; (8005700 <_printf_float+0x2e4>)
 80054b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054b4:	bf94      	ite	ls
 80054b6:	4698      	movls	r8, r3
 80054b8:	4680      	movhi	r8, r0
 80054ba:	2303      	movs	r3, #3
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	9b05      	ldr	r3, [sp, #20]
 80054c0:	f023 0204 	bic.w	r2, r3, #4
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	f04f 0900 	mov.w	r9, #0
 80054ca:	9700      	str	r7, [sp, #0]
 80054cc:	4633      	mov	r3, r6
 80054ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 f9d8 	bl	8005888 <_printf_common>
 80054d8:	3001      	adds	r0, #1
 80054da:	f040 8090 	bne.w	80055fe <_printf_float+0x1e2>
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
 80054e2:	b00d      	add	sp, #52	; 0x34
 80054e4:	ecbd 8b02 	vpop	{d8}
 80054e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fb fb22 	bl	8000b3c <__aeabi_dcmpun>
 80054f8:	b140      	cbz	r0, 800550c <_printf_float+0xf0>
 80054fa:	464b      	mov	r3, r9
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bfbc      	itt	lt
 8005500:	232d      	movlt	r3, #45	; 0x2d
 8005502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005506:	487f      	ldr	r0, [pc, #508]	; (8005704 <_printf_float+0x2e8>)
 8005508:	4b7f      	ldr	r3, [pc, #508]	; (8005708 <_printf_float+0x2ec>)
 800550a:	e7d1      	b.n	80054b0 <_printf_float+0x94>
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005512:	9206      	str	r2, [sp, #24]
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	d13f      	bne.n	8005598 <_printf_float+0x17c>
 8005518:	2306      	movs	r3, #6
 800551a:	6063      	str	r3, [r4, #4]
 800551c:	9b05      	ldr	r3, [sp, #20]
 800551e:	6861      	ldr	r1, [r4, #4]
 8005520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005524:	2300      	movs	r3, #0
 8005526:	9303      	str	r3, [sp, #12]
 8005528:	ab0a      	add	r3, sp, #40	; 0x28
 800552a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800552e:	ab09      	add	r3, sp, #36	; 0x24
 8005530:	ec49 8b10 	vmov	d0, r8, r9
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	6022      	str	r2, [r4, #0]
 8005538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800553c:	4628      	mov	r0, r5
 800553e:	f7ff fecd 	bl	80052dc <__cvt>
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005546:	2b47      	cmp	r3, #71	; 0x47
 8005548:	4680      	mov	r8, r0
 800554a:	d108      	bne.n	800555e <_printf_float+0x142>
 800554c:	1cc8      	adds	r0, r1, #3
 800554e:	db02      	blt.n	8005556 <_printf_float+0x13a>
 8005550:	6863      	ldr	r3, [r4, #4]
 8005552:	4299      	cmp	r1, r3
 8005554:	dd41      	ble.n	80055da <_printf_float+0x1be>
 8005556:	f1ab 0b02 	sub.w	fp, fp, #2
 800555a:	fa5f fb8b 	uxtb.w	fp, fp
 800555e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005562:	d820      	bhi.n	80055a6 <_printf_float+0x18a>
 8005564:	3901      	subs	r1, #1
 8005566:	465a      	mov	r2, fp
 8005568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800556c:	9109      	str	r1, [sp, #36]	; 0x24
 800556e:	f7ff ff17 	bl	80053a0 <__exponent>
 8005572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005574:	1813      	adds	r3, r2, r0
 8005576:	2a01      	cmp	r2, #1
 8005578:	4681      	mov	r9, r0
 800557a:	6123      	str	r3, [r4, #16]
 800557c:	dc02      	bgt.n	8005584 <_printf_float+0x168>
 800557e:	6822      	ldr	r2, [r4, #0]
 8005580:	07d2      	lsls	r2, r2, #31
 8005582:	d501      	bpl.n	8005588 <_printf_float+0x16c>
 8005584:	3301      	adds	r3, #1
 8005586:	6123      	str	r3, [r4, #16]
 8005588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800558c:	2b00      	cmp	r3, #0
 800558e:	d09c      	beq.n	80054ca <_printf_float+0xae>
 8005590:	232d      	movs	r3, #45	; 0x2d
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005596:	e798      	b.n	80054ca <_printf_float+0xae>
 8005598:	9a06      	ldr	r2, [sp, #24]
 800559a:	2a47      	cmp	r2, #71	; 0x47
 800559c:	d1be      	bne.n	800551c <_printf_float+0x100>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1bc      	bne.n	800551c <_printf_float+0x100>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e7b9      	b.n	800551a <_printf_float+0xfe>
 80055a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055aa:	d118      	bne.n	80055de <_printf_float+0x1c2>
 80055ac:	2900      	cmp	r1, #0
 80055ae:	6863      	ldr	r3, [r4, #4]
 80055b0:	dd0b      	ble.n	80055ca <_printf_float+0x1ae>
 80055b2:	6121      	str	r1, [r4, #16]
 80055b4:	b913      	cbnz	r3, 80055bc <_printf_float+0x1a0>
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	07d0      	lsls	r0, r2, #31
 80055ba:	d502      	bpl.n	80055c2 <_printf_float+0x1a6>
 80055bc:	3301      	adds	r3, #1
 80055be:	440b      	add	r3, r1
 80055c0:	6123      	str	r3, [r4, #16]
 80055c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80055c4:	f04f 0900 	mov.w	r9, #0
 80055c8:	e7de      	b.n	8005588 <_printf_float+0x16c>
 80055ca:	b913      	cbnz	r3, 80055d2 <_printf_float+0x1b6>
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	07d2      	lsls	r2, r2, #31
 80055d0:	d501      	bpl.n	80055d6 <_printf_float+0x1ba>
 80055d2:	3302      	adds	r3, #2
 80055d4:	e7f4      	b.n	80055c0 <_printf_float+0x1a4>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e7f2      	b.n	80055c0 <_printf_float+0x1a4>
 80055da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e0:	4299      	cmp	r1, r3
 80055e2:	db05      	blt.n	80055f0 <_printf_float+0x1d4>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	6121      	str	r1, [r4, #16]
 80055e8:	07d8      	lsls	r0, r3, #31
 80055ea:	d5ea      	bpl.n	80055c2 <_printf_float+0x1a6>
 80055ec:	1c4b      	adds	r3, r1, #1
 80055ee:	e7e7      	b.n	80055c0 <_printf_float+0x1a4>
 80055f0:	2900      	cmp	r1, #0
 80055f2:	bfd4      	ite	le
 80055f4:	f1c1 0202 	rsble	r2, r1, #2
 80055f8:	2201      	movgt	r2, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	e7e0      	b.n	80055c0 <_printf_float+0x1a4>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	055a      	lsls	r2, r3, #21
 8005602:	d407      	bmi.n	8005614 <_printf_float+0x1f8>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	4642      	mov	r2, r8
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	d12c      	bne.n	800566c <_printf_float+0x250>
 8005612:	e764      	b.n	80054de <_printf_float+0xc2>
 8005614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005618:	f240 80e0 	bls.w	80057dc <_printf_float+0x3c0>
 800561c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005620:	2200      	movs	r2, #0
 8005622:	2300      	movs	r3, #0
 8005624:	f7fb fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 8005628:	2800      	cmp	r0, #0
 800562a:	d034      	beq.n	8005696 <_printf_float+0x27a>
 800562c:	4a37      	ldr	r2, [pc, #220]	; (800570c <_printf_float+0x2f0>)
 800562e:	2301      	movs	r3, #1
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f af51 	beq.w	80054de <_printf_float+0xc2>
 800563c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005640:	429a      	cmp	r2, r3
 8005642:	db02      	blt.n	800564a <_printf_float+0x22e>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	07d8      	lsls	r0, r3, #31
 8005648:	d510      	bpl.n	800566c <_printf_float+0x250>
 800564a:	ee18 3a10 	vmov	r3, s16
 800564e:	4652      	mov	r2, sl
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f af41 	beq.w	80054de <_printf_float+0xc2>
 800565c:	f04f 0800 	mov.w	r8, #0
 8005660:	f104 091a 	add.w	r9, r4, #26
 8005664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005666:	3b01      	subs	r3, #1
 8005668:	4543      	cmp	r3, r8
 800566a:	dc09      	bgt.n	8005680 <_printf_float+0x264>
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	079b      	lsls	r3, r3, #30
 8005670:	f100 8105 	bmi.w	800587e <_printf_float+0x462>
 8005674:	68e0      	ldr	r0, [r4, #12]
 8005676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005678:	4298      	cmp	r0, r3
 800567a:	bfb8      	it	lt
 800567c:	4618      	movlt	r0, r3
 800567e:	e730      	b.n	80054e2 <_printf_float+0xc6>
 8005680:	2301      	movs	r3, #1
 8005682:	464a      	mov	r2, r9
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af27 	beq.w	80054de <_printf_float+0xc2>
 8005690:	f108 0801 	add.w	r8, r8, #1
 8005694:	e7e6      	b.n	8005664 <_printf_float+0x248>
 8005696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005698:	2b00      	cmp	r3, #0
 800569a:	dc39      	bgt.n	8005710 <_printf_float+0x2f4>
 800569c:	4a1b      	ldr	r2, [pc, #108]	; (800570c <_printf_float+0x2f0>)
 800569e:	2301      	movs	r3, #1
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f af19 	beq.w	80054de <_printf_float+0xc2>
 80056ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b0:	4313      	orrs	r3, r2
 80056b2:	d102      	bne.n	80056ba <_printf_float+0x29e>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	07d9      	lsls	r1, r3, #31
 80056b8:	d5d8      	bpl.n	800566c <_printf_float+0x250>
 80056ba:	ee18 3a10 	vmov	r3, s16
 80056be:	4652      	mov	r2, sl
 80056c0:	4631      	mov	r1, r6
 80056c2:	4628      	mov	r0, r5
 80056c4:	47b8      	blx	r7
 80056c6:	3001      	adds	r0, #1
 80056c8:	f43f af09 	beq.w	80054de <_printf_float+0xc2>
 80056cc:	f04f 0900 	mov.w	r9, #0
 80056d0:	f104 0a1a 	add.w	sl, r4, #26
 80056d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d6:	425b      	negs	r3, r3
 80056d8:	454b      	cmp	r3, r9
 80056da:	dc01      	bgt.n	80056e0 <_printf_float+0x2c4>
 80056dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056de:	e792      	b.n	8005606 <_printf_float+0x1ea>
 80056e0:	2301      	movs	r3, #1
 80056e2:	4652      	mov	r2, sl
 80056e4:	4631      	mov	r1, r6
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	f43f aef7 	beq.w	80054de <_printf_float+0xc2>
 80056f0:	f109 0901 	add.w	r9, r9, #1
 80056f4:	e7ee      	b.n	80056d4 <_printf_float+0x2b8>
 80056f6:	bf00      	nop
 80056f8:	7fefffff 	.word	0x7fefffff
 80056fc:	0800a98c 	.word	0x0800a98c
 8005700:	0800a990 	.word	0x0800a990
 8005704:	0800a998 	.word	0x0800a998
 8005708:	0800a994 	.word	0x0800a994
 800570c:	0800a99c 	.word	0x0800a99c
 8005710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005714:	429a      	cmp	r2, r3
 8005716:	bfa8      	it	ge
 8005718:	461a      	movge	r2, r3
 800571a:	2a00      	cmp	r2, #0
 800571c:	4691      	mov	r9, r2
 800571e:	dc37      	bgt.n	8005790 <_printf_float+0x374>
 8005720:	f04f 0b00 	mov.w	fp, #0
 8005724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005728:	f104 021a 	add.w	r2, r4, #26
 800572c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	eba3 0309 	sub.w	r3, r3, r9
 8005734:	455b      	cmp	r3, fp
 8005736:	dc33      	bgt.n	80057a0 <_printf_float+0x384>
 8005738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800573c:	429a      	cmp	r2, r3
 800573e:	db3b      	blt.n	80057b8 <_printf_float+0x39c>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07da      	lsls	r2, r3, #31
 8005744:	d438      	bmi.n	80057b8 <_printf_float+0x39c>
 8005746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005748:	9b05      	ldr	r3, [sp, #20]
 800574a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	eba2 0901 	sub.w	r9, r2, r1
 8005752:	4599      	cmp	r9, r3
 8005754:	bfa8      	it	ge
 8005756:	4699      	movge	r9, r3
 8005758:	f1b9 0f00 	cmp.w	r9, #0
 800575c:	dc35      	bgt.n	80057ca <_printf_float+0x3ae>
 800575e:	f04f 0800 	mov.w	r8, #0
 8005762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005766:	f104 0a1a 	add.w	sl, r4, #26
 800576a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	eba3 0309 	sub.w	r3, r3, r9
 8005774:	4543      	cmp	r3, r8
 8005776:	f77f af79 	ble.w	800566c <_printf_float+0x250>
 800577a:	2301      	movs	r3, #1
 800577c:	4652      	mov	r2, sl
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f aeaa 	beq.w	80054de <_printf_float+0xc2>
 800578a:	f108 0801 	add.w	r8, r8, #1
 800578e:	e7ec      	b.n	800576a <_printf_float+0x34e>
 8005790:	4613      	mov	r3, r2
 8005792:	4631      	mov	r1, r6
 8005794:	4642      	mov	r2, r8
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	d1c0      	bne.n	8005720 <_printf_float+0x304>
 800579e:	e69e      	b.n	80054de <_printf_float+0xc2>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	9205      	str	r2, [sp, #20]
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	f43f ae97 	beq.w	80054de <_printf_float+0xc2>
 80057b0:	9a05      	ldr	r2, [sp, #20]
 80057b2:	f10b 0b01 	add.w	fp, fp, #1
 80057b6:	e7b9      	b.n	800572c <_printf_float+0x310>
 80057b8:	ee18 3a10 	vmov	r3, s16
 80057bc:	4652      	mov	r2, sl
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1be      	bne.n	8005746 <_printf_float+0x32a>
 80057c8:	e689      	b.n	80054de <_printf_float+0xc2>
 80057ca:	9a05      	ldr	r2, [sp, #20]
 80057cc:	464b      	mov	r3, r9
 80057ce:	4442      	add	r2, r8
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	d1c1      	bne.n	800575e <_printf_float+0x342>
 80057da:	e680      	b.n	80054de <_printf_float+0xc2>
 80057dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057de:	2a01      	cmp	r2, #1
 80057e0:	dc01      	bgt.n	80057e6 <_printf_float+0x3ca>
 80057e2:	07db      	lsls	r3, r3, #31
 80057e4:	d538      	bpl.n	8005858 <_printf_float+0x43c>
 80057e6:	2301      	movs	r3, #1
 80057e8:	4642      	mov	r2, r8
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	f43f ae74 	beq.w	80054de <_printf_float+0xc2>
 80057f6:	ee18 3a10 	vmov	r3, s16
 80057fa:	4652      	mov	r2, sl
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f ae6b 	beq.w	80054de <_printf_float+0xc2>
 8005808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	f7fb f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8005814:	b9d8      	cbnz	r0, 800584e <_printf_float+0x432>
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	f108 0201 	add.w	r2, r8, #1
 800581c:	3b01      	subs	r3, #1
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	d10e      	bne.n	8005846 <_printf_float+0x42a>
 8005828:	e659      	b.n	80054de <_printf_float+0xc2>
 800582a:	2301      	movs	r3, #1
 800582c:	4652      	mov	r2, sl
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	f43f ae52 	beq.w	80054de <_printf_float+0xc2>
 800583a:	f108 0801 	add.w	r8, r8, #1
 800583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005840:	3b01      	subs	r3, #1
 8005842:	4543      	cmp	r3, r8
 8005844:	dcf1      	bgt.n	800582a <_printf_float+0x40e>
 8005846:	464b      	mov	r3, r9
 8005848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800584c:	e6dc      	b.n	8005608 <_printf_float+0x1ec>
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	f104 0a1a 	add.w	sl, r4, #26
 8005856:	e7f2      	b.n	800583e <_printf_float+0x422>
 8005858:	2301      	movs	r3, #1
 800585a:	4642      	mov	r2, r8
 800585c:	e7df      	b.n	800581e <_printf_float+0x402>
 800585e:	2301      	movs	r3, #1
 8005860:	464a      	mov	r2, r9
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f ae38 	beq.w	80054de <_printf_float+0xc2>
 800586e:	f108 0801 	add.w	r8, r8, #1
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005876:	1a5b      	subs	r3, r3, r1
 8005878:	4543      	cmp	r3, r8
 800587a:	dcf0      	bgt.n	800585e <_printf_float+0x442>
 800587c:	e6fa      	b.n	8005674 <_printf_float+0x258>
 800587e:	f04f 0800 	mov.w	r8, #0
 8005882:	f104 0919 	add.w	r9, r4, #25
 8005886:	e7f4      	b.n	8005872 <_printf_float+0x456>

08005888 <_printf_common>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4616      	mov	r6, r2
 800588e:	4699      	mov	r9, r3
 8005890:	688a      	ldr	r2, [r1, #8]
 8005892:	690b      	ldr	r3, [r1, #16]
 8005894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005898:	4293      	cmp	r3, r2
 800589a:	bfb8      	it	lt
 800589c:	4613      	movlt	r3, r2
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058a4:	4607      	mov	r7, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	b10a      	cbz	r2, 80058ae <_printf_common+0x26>
 80058aa:	3301      	adds	r3, #1
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	0699      	lsls	r1, r3, #26
 80058b2:	bf42      	ittt	mi
 80058b4:	6833      	ldrmi	r3, [r6, #0]
 80058b6:	3302      	addmi	r3, #2
 80058b8:	6033      	strmi	r3, [r6, #0]
 80058ba:	6825      	ldr	r5, [r4, #0]
 80058bc:	f015 0506 	ands.w	r5, r5, #6
 80058c0:	d106      	bne.n	80058d0 <_printf_common+0x48>
 80058c2:	f104 0a19 	add.w	sl, r4, #25
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	6832      	ldr	r2, [r6, #0]
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dc26      	bgt.n	800591e <_printf_common+0x96>
 80058d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058d4:	1e13      	subs	r3, r2, #0
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	bf18      	it	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	0692      	lsls	r2, r2, #26
 80058de:	d42b      	bmi.n	8005938 <_printf_common+0xb0>
 80058e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058e4:	4649      	mov	r1, r9
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c0      	blx	r8
 80058ea:	3001      	adds	r0, #1
 80058ec:	d01e      	beq.n	800592c <_printf_common+0xa4>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	68e5      	ldr	r5, [r4, #12]
 80058f2:	6832      	ldr	r2, [r6, #0]
 80058f4:	f003 0306 	and.w	r3, r3, #6
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	bf08      	it	eq
 80058fc:	1aad      	subeq	r5, r5, r2
 80058fe:	68a3      	ldr	r3, [r4, #8]
 8005900:	6922      	ldr	r2, [r4, #16]
 8005902:	bf0c      	ite	eq
 8005904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005908:	2500      	movne	r5, #0
 800590a:	4293      	cmp	r3, r2
 800590c:	bfc4      	itt	gt
 800590e:	1a9b      	subgt	r3, r3, r2
 8005910:	18ed      	addgt	r5, r5, r3
 8005912:	2600      	movs	r6, #0
 8005914:	341a      	adds	r4, #26
 8005916:	42b5      	cmp	r5, r6
 8005918:	d11a      	bne.n	8005950 <_printf_common+0xc8>
 800591a:	2000      	movs	r0, #0
 800591c:	e008      	b.n	8005930 <_printf_common+0xa8>
 800591e:	2301      	movs	r3, #1
 8005920:	4652      	mov	r2, sl
 8005922:	4649      	mov	r1, r9
 8005924:	4638      	mov	r0, r7
 8005926:	47c0      	blx	r8
 8005928:	3001      	adds	r0, #1
 800592a:	d103      	bne.n	8005934 <_printf_common+0xac>
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005934:	3501      	adds	r5, #1
 8005936:	e7c6      	b.n	80058c6 <_printf_common+0x3e>
 8005938:	18e1      	adds	r1, r4, r3
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	2030      	movs	r0, #48	; 0x30
 800593e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005942:	4422      	add	r2, r4
 8005944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800594c:	3302      	adds	r3, #2
 800594e:	e7c7      	b.n	80058e0 <_printf_common+0x58>
 8005950:	2301      	movs	r3, #1
 8005952:	4622      	mov	r2, r4
 8005954:	4649      	mov	r1, r9
 8005956:	4638      	mov	r0, r7
 8005958:	47c0      	blx	r8
 800595a:	3001      	adds	r0, #1
 800595c:	d0e6      	beq.n	800592c <_printf_common+0xa4>
 800595e:	3601      	adds	r6, #1
 8005960:	e7d9      	b.n	8005916 <_printf_common+0x8e>
	...

08005964 <_printf_i>:
 8005964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	460c      	mov	r4, r1
 800596a:	4691      	mov	r9, r2
 800596c:	7e27      	ldrb	r7, [r4, #24]
 800596e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005970:	2f78      	cmp	r7, #120	; 0x78
 8005972:	4680      	mov	r8, r0
 8005974:	469a      	mov	sl, r3
 8005976:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800597a:	d807      	bhi.n	800598c <_printf_i+0x28>
 800597c:	2f62      	cmp	r7, #98	; 0x62
 800597e:	d80a      	bhi.n	8005996 <_printf_i+0x32>
 8005980:	2f00      	cmp	r7, #0
 8005982:	f000 80d8 	beq.w	8005b36 <_printf_i+0x1d2>
 8005986:	2f58      	cmp	r7, #88	; 0x58
 8005988:	f000 80a3 	beq.w	8005ad2 <_printf_i+0x16e>
 800598c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005994:	e03a      	b.n	8005a0c <_printf_i+0xa8>
 8005996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800599a:	2b15      	cmp	r3, #21
 800599c:	d8f6      	bhi.n	800598c <_printf_i+0x28>
 800599e:	a001      	add	r0, pc, #4	; (adr r0, 80059a4 <_printf_i+0x40>)
 80059a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	0800598d 	.word	0x0800598d
 80059b0:	0800598d 	.word	0x0800598d
 80059b4:	0800598d 	.word	0x0800598d
 80059b8:	0800598d 	.word	0x0800598d
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	0800598d 	.word	0x0800598d
 80059c4:	0800598d 	.word	0x0800598d
 80059c8:	0800598d 	.word	0x0800598d
 80059cc:	0800598d 	.word	0x0800598d
 80059d0:	08005b1d 	.word	0x08005b1d
 80059d4:	08005a41 	.word	0x08005a41
 80059d8:	08005aff 	.word	0x08005aff
 80059dc:	0800598d 	.word	0x0800598d
 80059e0:	0800598d 	.word	0x0800598d
 80059e4:	08005b3f 	.word	0x08005b3f
 80059e8:	0800598d 	.word	0x0800598d
 80059ec:	08005a41 	.word	0x08005a41
 80059f0:	0800598d 	.word	0x0800598d
 80059f4:	0800598d 	.word	0x0800598d
 80059f8:	08005b07 	.word	0x08005b07
 80059fc:	680b      	ldr	r3, [r1, #0]
 80059fe:	1d1a      	adds	r2, r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	600a      	str	r2, [r1, #0]
 8005a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0a3      	b.n	8005b58 <_printf_i+0x1f4>
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	6808      	ldr	r0, [r1, #0]
 8005a14:	062e      	lsls	r6, r5, #24
 8005a16:	f100 0304 	add.w	r3, r0, #4
 8005a1a:	d50a      	bpl.n	8005a32 <_printf_i+0xce>
 8005a1c:	6805      	ldr	r5, [r0, #0]
 8005a1e:	600b      	str	r3, [r1, #0]
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	da03      	bge.n	8005a2c <_printf_i+0xc8>
 8005a24:	232d      	movs	r3, #45	; 0x2d
 8005a26:	426d      	negs	r5, r5
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	485e      	ldr	r0, [pc, #376]	; (8005ba8 <_printf_i+0x244>)
 8005a2e:	230a      	movs	r3, #10
 8005a30:	e019      	b.n	8005a66 <_printf_i+0x102>
 8005a32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a36:	6805      	ldr	r5, [r0, #0]
 8005a38:	600b      	str	r3, [r1, #0]
 8005a3a:	bf18      	it	ne
 8005a3c:	b22d      	sxthne	r5, r5
 8005a3e:	e7ef      	b.n	8005a20 <_printf_i+0xbc>
 8005a40:	680b      	ldr	r3, [r1, #0]
 8005a42:	6825      	ldr	r5, [r4, #0]
 8005a44:	1d18      	adds	r0, r3, #4
 8005a46:	6008      	str	r0, [r1, #0]
 8005a48:	0628      	lsls	r0, r5, #24
 8005a4a:	d501      	bpl.n	8005a50 <_printf_i+0xec>
 8005a4c:	681d      	ldr	r5, [r3, #0]
 8005a4e:	e002      	b.n	8005a56 <_printf_i+0xf2>
 8005a50:	0669      	lsls	r1, r5, #25
 8005a52:	d5fb      	bpl.n	8005a4c <_printf_i+0xe8>
 8005a54:	881d      	ldrh	r5, [r3, #0]
 8005a56:	4854      	ldr	r0, [pc, #336]	; (8005ba8 <_printf_i+0x244>)
 8005a58:	2f6f      	cmp	r7, #111	; 0x6f
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2308      	moveq	r3, #8
 8005a5e:	230a      	movne	r3, #10
 8005a60:	2100      	movs	r1, #0
 8005a62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a66:	6866      	ldr	r6, [r4, #4]
 8005a68:	60a6      	str	r6, [r4, #8]
 8005a6a:	2e00      	cmp	r6, #0
 8005a6c:	bfa2      	ittt	ge
 8005a6e:	6821      	ldrge	r1, [r4, #0]
 8005a70:	f021 0104 	bicge.w	r1, r1, #4
 8005a74:	6021      	strge	r1, [r4, #0]
 8005a76:	b90d      	cbnz	r5, 8005a7c <_printf_i+0x118>
 8005a78:	2e00      	cmp	r6, #0
 8005a7a:	d04d      	beq.n	8005b18 <_printf_i+0x1b4>
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a82:	fb03 5711 	mls	r7, r3, r1, r5
 8005a86:	5dc7      	ldrb	r7, [r0, r7]
 8005a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a8c:	462f      	mov	r7, r5
 8005a8e:	42bb      	cmp	r3, r7
 8005a90:	460d      	mov	r5, r1
 8005a92:	d9f4      	bls.n	8005a7e <_printf_i+0x11a>
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d10b      	bne.n	8005ab0 <_printf_i+0x14c>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	07df      	lsls	r7, r3, #31
 8005a9c:	d508      	bpl.n	8005ab0 <_printf_i+0x14c>
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	6861      	ldr	r1, [r4, #4]
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	bfde      	ittt	le
 8005aa6:	2330      	movle	r3, #48	; 0x30
 8005aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ab0:	1b92      	subs	r2, r2, r6
 8005ab2:	6122      	str	r2, [r4, #16]
 8005ab4:	f8cd a000 	str.w	sl, [sp]
 8005ab8:	464b      	mov	r3, r9
 8005aba:	aa03      	add	r2, sp, #12
 8005abc:	4621      	mov	r1, r4
 8005abe:	4640      	mov	r0, r8
 8005ac0:	f7ff fee2 	bl	8005888 <_printf_common>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d14c      	bne.n	8005b62 <_printf_i+0x1fe>
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	b004      	add	sp, #16
 8005ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad2:	4835      	ldr	r0, [pc, #212]	; (8005ba8 <_printf_i+0x244>)
 8005ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	680e      	ldr	r6, [r1, #0]
 8005adc:	061f      	lsls	r7, r3, #24
 8005ade:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ae2:	600e      	str	r6, [r1, #0]
 8005ae4:	d514      	bpl.n	8005b10 <_printf_i+0x1ac>
 8005ae6:	07d9      	lsls	r1, r3, #31
 8005ae8:	bf44      	itt	mi
 8005aea:	f043 0320 	orrmi.w	r3, r3, #32
 8005aee:	6023      	strmi	r3, [r4, #0]
 8005af0:	b91d      	cbnz	r5, 8005afa <_printf_i+0x196>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	f023 0320 	bic.w	r3, r3, #32
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	2310      	movs	r3, #16
 8005afc:	e7b0      	b.n	8005a60 <_printf_i+0xfc>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	f043 0320 	orr.w	r3, r3, #32
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	2378      	movs	r3, #120	; 0x78
 8005b08:	4828      	ldr	r0, [pc, #160]	; (8005bac <_printf_i+0x248>)
 8005b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b0e:	e7e3      	b.n	8005ad8 <_printf_i+0x174>
 8005b10:	065e      	lsls	r6, r3, #25
 8005b12:	bf48      	it	mi
 8005b14:	b2ad      	uxthmi	r5, r5
 8005b16:	e7e6      	b.n	8005ae6 <_printf_i+0x182>
 8005b18:	4616      	mov	r6, r2
 8005b1a:	e7bb      	b.n	8005a94 <_printf_i+0x130>
 8005b1c:	680b      	ldr	r3, [r1, #0]
 8005b1e:	6826      	ldr	r6, [r4, #0]
 8005b20:	6960      	ldr	r0, [r4, #20]
 8005b22:	1d1d      	adds	r5, r3, #4
 8005b24:	600d      	str	r5, [r1, #0]
 8005b26:	0635      	lsls	r5, r6, #24
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	d501      	bpl.n	8005b30 <_printf_i+0x1cc>
 8005b2c:	6018      	str	r0, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <_printf_i+0x1d2>
 8005b30:	0671      	lsls	r1, r6, #25
 8005b32:	d5fb      	bpl.n	8005b2c <_printf_i+0x1c8>
 8005b34:	8018      	strh	r0, [r3, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	4616      	mov	r6, r2
 8005b3c:	e7ba      	b.n	8005ab4 <_printf_i+0x150>
 8005b3e:	680b      	ldr	r3, [r1, #0]
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	600a      	str	r2, [r1, #0]
 8005b44:	681e      	ldr	r6, [r3, #0]
 8005b46:	6862      	ldr	r2, [r4, #4]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7fa fb50 	bl	80001f0 <memchr>
 8005b50:	b108      	cbz	r0, 8005b56 <_printf_i+0x1f2>
 8005b52:	1b80      	subs	r0, r0, r6
 8005b54:	6060      	str	r0, [r4, #4]
 8005b56:	6863      	ldr	r3, [r4, #4]
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b60:	e7a8      	b.n	8005ab4 <_printf_i+0x150>
 8005b62:	6923      	ldr	r3, [r4, #16]
 8005b64:	4632      	mov	r2, r6
 8005b66:	4649      	mov	r1, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	47d0      	blx	sl
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d0ab      	beq.n	8005ac8 <_printf_i+0x164>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	079b      	lsls	r3, r3, #30
 8005b74:	d413      	bmi.n	8005b9e <_printf_i+0x23a>
 8005b76:	68e0      	ldr	r0, [r4, #12]
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	4298      	cmp	r0, r3
 8005b7c:	bfb8      	it	lt
 8005b7e:	4618      	movlt	r0, r3
 8005b80:	e7a4      	b.n	8005acc <_printf_i+0x168>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4632      	mov	r2, r6
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d09b      	beq.n	8005ac8 <_printf_i+0x164>
 8005b90:	3501      	adds	r5, #1
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	9903      	ldr	r1, [sp, #12]
 8005b96:	1a5b      	subs	r3, r3, r1
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	dcf2      	bgt.n	8005b82 <_printf_i+0x21e>
 8005b9c:	e7eb      	b.n	8005b76 <_printf_i+0x212>
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	f104 0619 	add.w	r6, r4, #25
 8005ba4:	e7f5      	b.n	8005b92 <_printf_i+0x22e>
 8005ba6:	bf00      	nop
 8005ba8:	0800a99e 	.word	0x0800a99e
 8005bac:	0800a9af 	.word	0x0800a9af

08005bb0 <siprintf>:
 8005bb0:	b40e      	push	{r1, r2, r3}
 8005bb2:	b500      	push	{lr}
 8005bb4:	b09c      	sub	sp, #112	; 0x70
 8005bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8005bb8:	9002      	str	r0, [sp, #8]
 8005bba:	9006      	str	r0, [sp, #24]
 8005bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bc0:	4809      	ldr	r0, [pc, #36]	; (8005be8 <siprintf+0x38>)
 8005bc2:	9107      	str	r1, [sp, #28]
 8005bc4:	9104      	str	r1, [sp, #16]
 8005bc6:	4909      	ldr	r1, [pc, #36]	; (8005bec <siprintf+0x3c>)
 8005bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bcc:	9105      	str	r1, [sp, #20]
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	a902      	add	r1, sp, #8
 8005bd4:	f001 fb32 	bl	800723c <_svfiprintf_r>
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	b01c      	add	sp, #112	; 0x70
 8005be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005be4:	b003      	add	sp, #12
 8005be6:	4770      	bx	lr
 8005be8:	20000024 	.word	0x20000024
 8005bec:	ffff0208 	.word	0xffff0208

08005bf0 <quorem>:
 8005bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	6903      	ldr	r3, [r0, #16]
 8005bf6:	690c      	ldr	r4, [r1, #16]
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	f2c0 8081 	blt.w	8005d02 <quorem+0x112>
 8005c00:	3c01      	subs	r4, #1
 8005c02:	f101 0814 	add.w	r8, r1, #20
 8005c06:	f100 0514 	add.w	r5, r0, #20
 8005c0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c24:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c28:	d331      	bcc.n	8005c8e <quorem+0x9e>
 8005c2a:	f04f 0e00 	mov.w	lr, #0
 8005c2e:	4640      	mov	r0, r8
 8005c30:	46ac      	mov	ip, r5
 8005c32:	46f2      	mov	sl, lr
 8005c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c38:	b293      	uxth	r3, r2
 8005c3a:	fb06 e303 	mla	r3, r6, r3, lr
 8005c3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ebaa 0303 	sub.w	r3, sl, r3
 8005c48:	0c12      	lsrs	r2, r2, #16
 8005c4a:	f8dc a000 	ldr.w	sl, [ip]
 8005c4e:	fb06 e202 	mla	r2, r6, r2, lr
 8005c52:	fa13 f38a 	uxtah	r3, r3, sl
 8005c56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c5a:	fa1f fa82 	uxth.w	sl, r2
 8005c5e:	f8dc 2000 	ldr.w	r2, [ip]
 8005c62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c70:	4581      	cmp	r9, r0
 8005c72:	f84c 3b04 	str.w	r3, [ip], #4
 8005c76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c7a:	d2db      	bcs.n	8005c34 <quorem+0x44>
 8005c7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c80:	b92b      	cbnz	r3, 8005c8e <quorem+0x9e>
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	3b04      	subs	r3, #4
 8005c86:	429d      	cmp	r5, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	d32e      	bcc.n	8005cea <quorem+0xfa>
 8005c8c:	613c      	str	r4, [r7, #16]
 8005c8e:	4638      	mov	r0, r7
 8005c90:	f001 f8be 	bl	8006e10 <__mcmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	db24      	blt.n	8005ce2 <quorem+0xf2>
 8005c98:	3601      	adds	r6, #1
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f04f 0c00 	mov.w	ip, #0
 8005ca0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ca4:	f8d0 e000 	ldr.w	lr, [r0]
 8005ca8:	b293      	uxth	r3, r2
 8005caa:	ebac 0303 	sub.w	r3, ip, r3
 8005cae:	0c12      	lsrs	r2, r2, #16
 8005cb0:	fa13 f38e 	uxtah	r3, r3, lr
 8005cb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cc2:	45c1      	cmp	r9, r8
 8005cc4:	f840 3b04 	str.w	r3, [r0], #4
 8005cc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ccc:	d2e8      	bcs.n	8005ca0 <quorem+0xb0>
 8005cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd6:	b922      	cbnz	r2, 8005ce2 <quorem+0xf2>
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	429d      	cmp	r5, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	d30a      	bcc.n	8005cf6 <quorem+0x106>
 8005ce0:	613c      	str	r4, [r7, #16]
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	b003      	add	sp, #12
 8005ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	3b04      	subs	r3, #4
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	d1cc      	bne.n	8005c8c <quorem+0x9c>
 8005cf2:	3c01      	subs	r4, #1
 8005cf4:	e7c7      	b.n	8005c86 <quorem+0x96>
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	3b04      	subs	r3, #4
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <quorem+0xf0>
 8005cfe:	3c01      	subs	r4, #1
 8005d00:	e7eb      	b.n	8005cda <quorem+0xea>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e7ee      	b.n	8005ce4 <quorem+0xf4>
	...

08005d08 <_dtoa_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	ed2d 8b02 	vpush	{d8}
 8005d10:	ec57 6b10 	vmov	r6, r7, d0
 8005d14:	b095      	sub	sp, #84	; 0x54
 8005d16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d1c:	9105      	str	r1, [sp, #20]
 8005d1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d22:	4604      	mov	r4, r0
 8005d24:	9209      	str	r2, [sp, #36]	; 0x24
 8005d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d28:	b975      	cbnz	r5, 8005d48 <_dtoa_r+0x40>
 8005d2a:	2010      	movs	r0, #16
 8005d2c:	f000 fddc 	bl	80068e8 <malloc>
 8005d30:	4602      	mov	r2, r0
 8005d32:	6260      	str	r0, [r4, #36]	; 0x24
 8005d34:	b920      	cbnz	r0, 8005d40 <_dtoa_r+0x38>
 8005d36:	4bb2      	ldr	r3, [pc, #712]	; (8006000 <_dtoa_r+0x2f8>)
 8005d38:	21ea      	movs	r1, #234	; 0xea
 8005d3a:	48b2      	ldr	r0, [pc, #712]	; (8006004 <_dtoa_r+0x2fc>)
 8005d3c:	f001 fb8e 	bl	800745c <__assert_func>
 8005d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d44:	6005      	str	r5, [r0, #0]
 8005d46:	60c5      	str	r5, [r0, #12]
 8005d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4a:	6819      	ldr	r1, [r3, #0]
 8005d4c:	b151      	cbz	r1, 8005d64 <_dtoa_r+0x5c>
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	604a      	str	r2, [r1, #4]
 8005d52:	2301      	movs	r3, #1
 8005d54:	4093      	lsls	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fe1b 	bl	8006994 <_Bfree>
 8005d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	1e3b      	subs	r3, r7, #0
 8005d66:	bfb9      	ittee	lt
 8005d68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	9303      	strlt	r3, [sp, #12]
 8005d6e:	2300      	movge	r3, #0
 8005d70:	f8c8 3000 	strge.w	r3, [r8]
 8005d74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005d78:	4ba3      	ldr	r3, [pc, #652]	; (8006008 <_dtoa_r+0x300>)
 8005d7a:	bfbc      	itt	lt
 8005d7c:	2201      	movlt	r2, #1
 8005d7e:	f8c8 2000 	strlt.w	r2, [r8]
 8005d82:	ea33 0309 	bics.w	r3, r3, r9
 8005d86:	d11b      	bne.n	8005dc0 <_dtoa_r+0xb8>
 8005d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d94:	4333      	orrs	r3, r6
 8005d96:	f000 857a 	beq.w	800688e <_dtoa_r+0xb86>
 8005d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d9c:	b963      	cbnz	r3, 8005db8 <_dtoa_r+0xb0>
 8005d9e:	4b9b      	ldr	r3, [pc, #620]	; (800600c <_dtoa_r+0x304>)
 8005da0:	e024      	b.n	8005dec <_dtoa_r+0xe4>
 8005da2:	4b9b      	ldr	r3, [pc, #620]	; (8006010 <_dtoa_r+0x308>)
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	9800      	ldr	r0, [sp, #0]
 8005dae:	b015      	add	sp, #84	; 0x54
 8005db0:	ecbd 8b02 	vpop	{d8}
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db8:	4b94      	ldr	r3, [pc, #592]	; (800600c <_dtoa_r+0x304>)
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	3303      	adds	r3, #3
 8005dbe:	e7f3      	b.n	8005da8 <_dtoa_r+0xa0>
 8005dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	ec51 0b17 	vmov	r0, r1, d7
 8005dca:	2300      	movs	r3, #0
 8005dcc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005dd0:	f7fa fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	b158      	cbz	r0, 8005df0 <_dtoa_r+0xe8>
 8005dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dda:	2301      	movs	r3, #1
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8551 	beq.w	8006888 <_dtoa_r+0xb80>
 8005de6:	488b      	ldr	r0, [pc, #556]	; (8006014 <_dtoa_r+0x30c>)
 8005de8:	6018      	str	r0, [r3, #0]
 8005dea:	1e43      	subs	r3, r0, #1
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	e7dd      	b.n	8005dac <_dtoa_r+0xa4>
 8005df0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005df4:	aa12      	add	r2, sp, #72	; 0x48
 8005df6:	a913      	add	r1, sp, #76	; 0x4c
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f001 f8ad 	bl	8006f58 <__d2b>
 8005dfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e02:	4683      	mov	fp, r0
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	d07c      	beq.n	8005f02 <_dtoa_r+0x1fa>
 8005e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e22:	4b7d      	ldr	r3, [pc, #500]	; (8006018 <_dtoa_r+0x310>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	f7fa fa35 	bl	8000298 <__aeabi_dsub>
 8005e2e:	a36e      	add	r3, pc, #440	; (adr r3, 8005fe8 <_dtoa_r+0x2e0>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa fbe8 	bl	8000608 <__aeabi_dmul>
 8005e38:	a36d      	add	r3, pc, #436	; (adr r3, 8005ff0 <_dtoa_r+0x2e8>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fa2d 	bl	800029c <__adddf3>
 8005e42:	4606      	mov	r6, r0
 8005e44:	4628      	mov	r0, r5
 8005e46:	460f      	mov	r7, r1
 8005e48:	f7fa fb74 	bl	8000534 <__aeabi_i2d>
 8005e4c:	a36a      	add	r3, pc, #424	; (adr r3, 8005ff8 <_dtoa_r+0x2f0>)
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f7fa fbd9 	bl	8000608 <__aeabi_dmul>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	f7fa fa1d 	bl	800029c <__adddf3>
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	f7fa fe7f 	bl	8000b68 <__aeabi_d2iz>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa fe3a 	bl	8000aec <__aeabi_dcmplt>
 8005e78:	b148      	cbz	r0, 8005e8e <_dtoa_r+0x186>
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	f7fa fb5a 	bl	8000534 <__aeabi_i2d>
 8005e80:	4632      	mov	r2, r6
 8005e82:	463b      	mov	r3, r7
 8005e84:	f7fa fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e88:	b908      	cbnz	r0, 8005e8e <_dtoa_r+0x186>
 8005e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e8e:	f1ba 0f16 	cmp.w	sl, #22
 8005e92:	d854      	bhi.n	8005f3e <_dtoa_r+0x236>
 8005e94:	4b61      	ldr	r3, [pc, #388]	; (800601c <_dtoa_r+0x314>)
 8005e96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ea2:	f7fa fe23 	bl	8000aec <__aeabi_dcmplt>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d04b      	beq.n	8005f42 <_dtoa_r+0x23a>
 8005eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eae:	2300      	movs	r3, #0
 8005eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8005eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eb4:	1b5d      	subs	r5, r3, r5
 8005eb6:	1e6b      	subs	r3, r5, #1
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	bf43      	ittte	mi
 8005ebc:	2300      	movmi	r3, #0
 8005ebe:	f1c5 0801 	rsbmi	r8, r5, #1
 8005ec2:	9304      	strmi	r3, [sp, #16]
 8005ec4:	f04f 0800 	movpl.w	r8, #0
 8005ec8:	f1ba 0f00 	cmp.w	sl, #0
 8005ecc:	db3b      	blt.n	8005f46 <_dtoa_r+0x23e>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005ed4:	4453      	add	r3, sl
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9306      	str	r3, [sp, #24]
 8005edc:	9b05      	ldr	r3, [sp, #20]
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d869      	bhi.n	8005fb6 <_dtoa_r+0x2ae>
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	bfc4      	itt	gt
 8005ee6:	3b04      	subgt	r3, #4
 8005ee8:	9305      	strgt	r3, [sp, #20]
 8005eea:	9b05      	ldr	r3, [sp, #20]
 8005eec:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef0:	bfcc      	ite	gt
 8005ef2:	2500      	movgt	r5, #0
 8005ef4:	2501      	movle	r5, #1
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d869      	bhi.n	8005fce <_dtoa_r+0x2c6>
 8005efa:	e8df f003 	tbb	[pc, r3]
 8005efe:	4e2c      	.short	0x4e2c
 8005f00:	5a4c      	.short	0x5a4c
 8005f02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f06:	441d      	add	r5, r3
 8005f08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f0c:	2b20      	cmp	r3, #32
 8005f0e:	bfc1      	itttt	gt
 8005f10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f18:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f20:	bfda      	itte	le
 8005f22:	f1c3 0320 	rsble	r3, r3, #32
 8005f26:	fa06 f003 	lslle.w	r0, r6, r3
 8005f2a:	4318      	orrgt	r0, r3
 8005f2c:	f7fa faf2 	bl	8000514 <__aeabi_ui2d>
 8005f30:	2301      	movs	r3, #1
 8005f32:	4606      	mov	r6, r0
 8005f34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f38:	3d01      	subs	r5, #1
 8005f3a:	9310      	str	r3, [sp, #64]	; 0x40
 8005f3c:	e771      	b.n	8005e22 <_dtoa_r+0x11a>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e7b6      	b.n	8005eb0 <_dtoa_r+0x1a8>
 8005f42:	900e      	str	r0, [sp, #56]	; 0x38
 8005f44:	e7b5      	b.n	8005eb2 <_dtoa_r+0x1aa>
 8005f46:	f1ca 0300 	rsb	r3, sl, #0
 8005f4a:	9306      	str	r3, [sp, #24]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	eba8 080a 	sub.w	r8, r8, sl
 8005f52:	930d      	str	r3, [sp, #52]	; 0x34
 8005f54:	e7c2      	b.n	8005edc <_dtoa_r+0x1d4>
 8005f56:	2300      	movs	r3, #0
 8005f58:	9308      	str	r3, [sp, #32]
 8005f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dc39      	bgt.n	8005fd4 <_dtoa_r+0x2cc>
 8005f60:	f04f 0901 	mov.w	r9, #1
 8005f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f68:	464b      	mov	r3, r9
 8005f6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005f6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f70:	2200      	movs	r2, #0
 8005f72:	6042      	str	r2, [r0, #4]
 8005f74:	2204      	movs	r2, #4
 8005f76:	f102 0614 	add.w	r6, r2, #20
 8005f7a:	429e      	cmp	r6, r3
 8005f7c:	6841      	ldr	r1, [r0, #4]
 8005f7e:	d92f      	bls.n	8005fe0 <_dtoa_r+0x2d8>
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fcc7 	bl	8006914 <_Balloc>
 8005f86:	9000      	str	r0, [sp, #0]
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d14b      	bne.n	8006024 <_dtoa_r+0x31c>
 8005f8c:	4b24      	ldr	r3, [pc, #144]	; (8006020 <_dtoa_r+0x318>)
 8005f8e:	4602      	mov	r2, r0
 8005f90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f94:	e6d1      	b.n	8005d3a <_dtoa_r+0x32>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7de      	b.n	8005f58 <_dtoa_r+0x250>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9308      	str	r3, [sp, #32]
 8005f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa0:	eb0a 0903 	add.w	r9, sl, r3
 8005fa4:	f109 0301 	add.w	r3, r9, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	bfb8      	it	lt
 8005fae:	2301      	movlt	r3, #1
 8005fb0:	e7dd      	b.n	8005f6e <_dtoa_r+0x266>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e7f2      	b.n	8005f9c <_dtoa_r+0x294>
 8005fb6:	2501      	movs	r5, #1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	9508      	str	r5, [sp, #32]
 8005fbe:	f04f 39ff 	mov.w	r9, #4294967295
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fc8:	2312      	movs	r3, #18
 8005fca:	9209      	str	r2, [sp, #36]	; 0x24
 8005fcc:	e7cf      	b.n	8005f6e <_dtoa_r+0x266>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	9308      	str	r3, [sp, #32]
 8005fd2:	e7f4      	b.n	8005fbe <_dtoa_r+0x2b6>
 8005fd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fdc:	464b      	mov	r3, r9
 8005fde:	e7c6      	b.n	8005f6e <_dtoa_r+0x266>
 8005fe0:	3101      	adds	r1, #1
 8005fe2:	6041      	str	r1, [r0, #4]
 8005fe4:	0052      	lsls	r2, r2, #1
 8005fe6:	e7c6      	b.n	8005f76 <_dtoa_r+0x26e>
 8005fe8:	636f4361 	.word	0x636f4361
 8005fec:	3fd287a7 	.word	0x3fd287a7
 8005ff0:	8b60c8b3 	.word	0x8b60c8b3
 8005ff4:	3fc68a28 	.word	0x3fc68a28
 8005ff8:	509f79fb 	.word	0x509f79fb
 8005ffc:	3fd34413 	.word	0x3fd34413
 8006000:	0800a9cd 	.word	0x0800a9cd
 8006004:	0800a9e4 	.word	0x0800a9e4
 8006008:	7ff00000 	.word	0x7ff00000
 800600c:	0800a9c9 	.word	0x0800a9c9
 8006010:	0800a9c0 	.word	0x0800a9c0
 8006014:	0800a99d 	.word	0x0800a99d
 8006018:	3ff80000 	.word	0x3ff80000
 800601c:	0800aae0 	.word	0x0800aae0
 8006020:	0800aa43 	.word	0x0800aa43
 8006024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006026:	9a00      	ldr	r2, [sp, #0]
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	9b01      	ldr	r3, [sp, #4]
 800602c:	2b0e      	cmp	r3, #14
 800602e:	f200 80ad 	bhi.w	800618c <_dtoa_r+0x484>
 8006032:	2d00      	cmp	r5, #0
 8006034:	f000 80aa 	beq.w	800618c <_dtoa_r+0x484>
 8006038:	f1ba 0f00 	cmp.w	sl, #0
 800603c:	dd36      	ble.n	80060ac <_dtoa_r+0x3a4>
 800603e:	4ac3      	ldr	r2, [pc, #780]	; (800634c <_dtoa_r+0x644>)
 8006040:	f00a 030f 	and.w	r3, sl, #15
 8006044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006048:	ed93 7b00 	vldr	d7, [r3]
 800604c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006050:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006054:	eeb0 8a47 	vmov.f32	s16, s14
 8006058:	eef0 8a67 	vmov.f32	s17, s15
 800605c:	d016      	beq.n	800608c <_dtoa_r+0x384>
 800605e:	4bbc      	ldr	r3, [pc, #752]	; (8006350 <_dtoa_r+0x648>)
 8006060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006068:	f7fa fbf8 	bl	800085c <__aeabi_ddiv>
 800606c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006070:	f007 070f 	and.w	r7, r7, #15
 8006074:	2503      	movs	r5, #3
 8006076:	4eb6      	ldr	r6, [pc, #728]	; (8006350 <_dtoa_r+0x648>)
 8006078:	b957      	cbnz	r7, 8006090 <_dtoa_r+0x388>
 800607a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607e:	ec53 2b18 	vmov	r2, r3, d8
 8006082:	f7fa fbeb 	bl	800085c <__aeabi_ddiv>
 8006086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800608a:	e029      	b.n	80060e0 <_dtoa_r+0x3d8>
 800608c:	2502      	movs	r5, #2
 800608e:	e7f2      	b.n	8006076 <_dtoa_r+0x36e>
 8006090:	07f9      	lsls	r1, r7, #31
 8006092:	d508      	bpl.n	80060a6 <_dtoa_r+0x39e>
 8006094:	ec51 0b18 	vmov	r0, r1, d8
 8006098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800609c:	f7fa fab4 	bl	8000608 <__aeabi_dmul>
 80060a0:	ec41 0b18 	vmov	d8, r0, r1
 80060a4:	3501      	adds	r5, #1
 80060a6:	107f      	asrs	r7, r7, #1
 80060a8:	3608      	adds	r6, #8
 80060aa:	e7e5      	b.n	8006078 <_dtoa_r+0x370>
 80060ac:	f000 80a6 	beq.w	80061fc <_dtoa_r+0x4f4>
 80060b0:	f1ca 0600 	rsb	r6, sl, #0
 80060b4:	4ba5      	ldr	r3, [pc, #660]	; (800634c <_dtoa_r+0x644>)
 80060b6:	4fa6      	ldr	r7, [pc, #664]	; (8006350 <_dtoa_r+0x648>)
 80060b8:	f006 020f 	and.w	r2, r6, #15
 80060bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060c8:	f7fa fa9e 	bl	8000608 <__aeabi_dmul>
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	1136      	asrs	r6, r6, #4
 80060d2:	2300      	movs	r3, #0
 80060d4:	2502      	movs	r5, #2
 80060d6:	2e00      	cmp	r6, #0
 80060d8:	f040 8085 	bne.w	80061e6 <_dtoa_r+0x4de>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1d2      	bne.n	8006086 <_dtoa_r+0x37e>
 80060e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 808c 	beq.w	8006200 <_dtoa_r+0x4f8>
 80060e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060ec:	4b99      	ldr	r3, [pc, #612]	; (8006354 <_dtoa_r+0x64c>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	4630      	mov	r0, r6
 80060f2:	4639      	mov	r1, r7
 80060f4:	f7fa fcfa 	bl	8000aec <__aeabi_dcmplt>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f000 8081 	beq.w	8006200 <_dtoa_r+0x4f8>
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d07d      	beq.n	8006200 <_dtoa_r+0x4f8>
 8006104:	f1b9 0f00 	cmp.w	r9, #0
 8006108:	dd3c      	ble.n	8006184 <_dtoa_r+0x47c>
 800610a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800610e:	9307      	str	r3, [sp, #28]
 8006110:	2200      	movs	r2, #0
 8006112:	4b91      	ldr	r3, [pc, #580]	; (8006358 <_dtoa_r+0x650>)
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa fa76 	bl	8000608 <__aeabi_dmul>
 800611c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006120:	3501      	adds	r5, #1
 8006122:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006126:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800612a:	4628      	mov	r0, r5
 800612c:	f7fa fa02 	bl	8000534 <__aeabi_i2d>
 8006130:	4632      	mov	r2, r6
 8006132:	463b      	mov	r3, r7
 8006134:	f7fa fa68 	bl	8000608 <__aeabi_dmul>
 8006138:	4b88      	ldr	r3, [pc, #544]	; (800635c <_dtoa_r+0x654>)
 800613a:	2200      	movs	r2, #0
 800613c:	f7fa f8ae 	bl	800029c <__adddf3>
 8006140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006148:	9303      	str	r3, [sp, #12]
 800614a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d15c      	bne.n	800620a <_dtoa_r+0x502>
 8006150:	4b83      	ldr	r3, [pc, #524]	; (8006360 <_dtoa_r+0x658>)
 8006152:	2200      	movs	r2, #0
 8006154:	4630      	mov	r0, r6
 8006156:	4639      	mov	r1, r7
 8006158:	f7fa f89e 	bl	8000298 <__aeabi_dsub>
 800615c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006160:	4606      	mov	r6, r0
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa fce0 	bl	8000b28 <__aeabi_dcmpgt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f040 8296 	bne.w	800669a <_dtoa_r+0x992>
 800616e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006172:	4630      	mov	r0, r6
 8006174:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa fcb7 	bl	8000aec <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	f040 8288 	bne.w	8006694 <_dtoa_r+0x98c>
 8006184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800618c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800618e:	2b00      	cmp	r3, #0
 8006190:	f2c0 8158 	blt.w	8006444 <_dtoa_r+0x73c>
 8006194:	f1ba 0f0e 	cmp.w	sl, #14
 8006198:	f300 8154 	bgt.w	8006444 <_dtoa_r+0x73c>
 800619c:	4b6b      	ldr	r3, [pc, #428]	; (800634c <_dtoa_r+0x644>)
 800619e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f280 80e3 	bge.w	8006374 <_dtoa_r+0x66c>
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f300 80df 	bgt.w	8006374 <_dtoa_r+0x66c>
 80061b6:	f040 826d 	bne.w	8006694 <_dtoa_r+0x98c>
 80061ba:	4b69      	ldr	r3, [pc, #420]	; (8006360 <_dtoa_r+0x658>)
 80061bc:	2200      	movs	r2, #0
 80061be:	4640      	mov	r0, r8
 80061c0:	4649      	mov	r1, r9
 80061c2:	f7fa fa21 	bl	8000608 <__aeabi_dmul>
 80061c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ca:	f7fa fca3 	bl	8000b14 <__aeabi_dcmpge>
 80061ce:	9e01      	ldr	r6, [sp, #4]
 80061d0:	4637      	mov	r7, r6
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f040 8243 	bne.w	800665e <_dtoa_r+0x956>
 80061d8:	9d00      	ldr	r5, [sp, #0]
 80061da:	2331      	movs	r3, #49	; 0x31
 80061dc:	f805 3b01 	strb.w	r3, [r5], #1
 80061e0:	f10a 0a01 	add.w	sl, sl, #1
 80061e4:	e23f      	b.n	8006666 <_dtoa_r+0x95e>
 80061e6:	07f2      	lsls	r2, r6, #31
 80061e8:	d505      	bpl.n	80061f6 <_dtoa_r+0x4ee>
 80061ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ee:	f7fa fa0b 	bl	8000608 <__aeabi_dmul>
 80061f2:	3501      	adds	r5, #1
 80061f4:	2301      	movs	r3, #1
 80061f6:	1076      	asrs	r6, r6, #1
 80061f8:	3708      	adds	r7, #8
 80061fa:	e76c      	b.n	80060d6 <_dtoa_r+0x3ce>
 80061fc:	2502      	movs	r5, #2
 80061fe:	e76f      	b.n	80060e0 <_dtoa_r+0x3d8>
 8006200:	9b01      	ldr	r3, [sp, #4]
 8006202:	f8cd a01c 	str.w	sl, [sp, #28]
 8006206:	930c      	str	r3, [sp, #48]	; 0x30
 8006208:	e78d      	b.n	8006126 <_dtoa_r+0x41e>
 800620a:	9900      	ldr	r1, [sp, #0]
 800620c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800620e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006210:	4b4e      	ldr	r3, [pc, #312]	; (800634c <_dtoa_r+0x644>)
 8006212:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006216:	4401      	add	r1, r0
 8006218:	9102      	str	r1, [sp, #8]
 800621a:	9908      	ldr	r1, [sp, #32]
 800621c:	eeb0 8a47 	vmov.f32	s16, s14
 8006220:	eef0 8a67 	vmov.f32	s17, s15
 8006224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006228:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800622c:	2900      	cmp	r1, #0
 800622e:	d045      	beq.n	80062bc <_dtoa_r+0x5b4>
 8006230:	494c      	ldr	r1, [pc, #304]	; (8006364 <_dtoa_r+0x65c>)
 8006232:	2000      	movs	r0, #0
 8006234:	f7fa fb12 	bl	800085c <__aeabi_ddiv>
 8006238:	ec53 2b18 	vmov	r2, r3, d8
 800623c:	f7fa f82c 	bl	8000298 <__aeabi_dsub>
 8006240:	9d00      	ldr	r5, [sp, #0]
 8006242:	ec41 0b18 	vmov	d8, r0, r1
 8006246:	4639      	mov	r1, r7
 8006248:	4630      	mov	r0, r6
 800624a:	f7fa fc8d 	bl	8000b68 <__aeabi_d2iz>
 800624e:	900c      	str	r0, [sp, #48]	; 0x30
 8006250:	f7fa f970 	bl	8000534 <__aeabi_i2d>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4630      	mov	r0, r6
 800625a:	4639      	mov	r1, r7
 800625c:	f7fa f81c 	bl	8000298 <__aeabi_dsub>
 8006260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006262:	3330      	adds	r3, #48	; 0x30
 8006264:	f805 3b01 	strb.w	r3, [r5], #1
 8006268:	ec53 2b18 	vmov	r2, r3, d8
 800626c:	4606      	mov	r6, r0
 800626e:	460f      	mov	r7, r1
 8006270:	f7fa fc3c 	bl	8000aec <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	d165      	bne.n	8006344 <_dtoa_r+0x63c>
 8006278:	4632      	mov	r2, r6
 800627a:	463b      	mov	r3, r7
 800627c:	4935      	ldr	r1, [pc, #212]	; (8006354 <_dtoa_r+0x64c>)
 800627e:	2000      	movs	r0, #0
 8006280:	f7fa f80a 	bl	8000298 <__aeabi_dsub>
 8006284:	ec53 2b18 	vmov	r2, r3, d8
 8006288:	f7fa fc30 	bl	8000aec <__aeabi_dcmplt>
 800628c:	2800      	cmp	r0, #0
 800628e:	f040 80b9 	bne.w	8006404 <_dtoa_r+0x6fc>
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	429d      	cmp	r5, r3
 8006296:	f43f af75 	beq.w	8006184 <_dtoa_r+0x47c>
 800629a:	4b2f      	ldr	r3, [pc, #188]	; (8006358 <_dtoa_r+0x650>)
 800629c:	ec51 0b18 	vmov	r0, r1, d8
 80062a0:	2200      	movs	r2, #0
 80062a2:	f7fa f9b1 	bl	8000608 <__aeabi_dmul>
 80062a6:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <_dtoa_r+0x650>)
 80062a8:	ec41 0b18 	vmov	d8, r0, r1
 80062ac:	2200      	movs	r2, #0
 80062ae:	4630      	mov	r0, r6
 80062b0:	4639      	mov	r1, r7
 80062b2:	f7fa f9a9 	bl	8000608 <__aeabi_dmul>
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	e7c4      	b.n	8006246 <_dtoa_r+0x53e>
 80062bc:	ec51 0b17 	vmov	r0, r1, d7
 80062c0:	f7fa f9a2 	bl	8000608 <__aeabi_dmul>
 80062c4:	9b02      	ldr	r3, [sp, #8]
 80062c6:	9d00      	ldr	r5, [sp, #0]
 80062c8:	930c      	str	r3, [sp, #48]	; 0x30
 80062ca:	ec41 0b18 	vmov	d8, r0, r1
 80062ce:	4639      	mov	r1, r7
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7fa fc49 	bl	8000b68 <__aeabi_d2iz>
 80062d6:	9011      	str	r0, [sp, #68]	; 0x44
 80062d8:	f7fa f92c 	bl	8000534 <__aeabi_i2d>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4630      	mov	r0, r6
 80062e2:	4639      	mov	r1, r7
 80062e4:	f7f9 ffd8 	bl	8000298 <__aeabi_dsub>
 80062e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062ea:	3330      	adds	r3, #48	; 0x30
 80062ec:	f805 3b01 	strb.w	r3, [r5], #1
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	429d      	cmp	r5, r3
 80062f4:	4606      	mov	r6, r0
 80062f6:	460f      	mov	r7, r1
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	d134      	bne.n	8006368 <_dtoa_r+0x660>
 80062fe:	4b19      	ldr	r3, [pc, #100]	; (8006364 <_dtoa_r+0x65c>)
 8006300:	ec51 0b18 	vmov	r0, r1, d8
 8006304:	f7f9 ffca 	bl	800029c <__adddf3>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4630      	mov	r0, r6
 800630e:	4639      	mov	r1, r7
 8006310:	f7fa fc0a 	bl	8000b28 <__aeabi_dcmpgt>
 8006314:	2800      	cmp	r0, #0
 8006316:	d175      	bne.n	8006404 <_dtoa_r+0x6fc>
 8006318:	ec53 2b18 	vmov	r2, r3, d8
 800631c:	4911      	ldr	r1, [pc, #68]	; (8006364 <_dtoa_r+0x65c>)
 800631e:	2000      	movs	r0, #0
 8006320:	f7f9 ffba 	bl	8000298 <__aeabi_dsub>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa fbde 	bl	8000aec <__aeabi_dcmplt>
 8006330:	2800      	cmp	r0, #0
 8006332:	f43f af27 	beq.w	8006184 <_dtoa_r+0x47c>
 8006336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006338:	1e6b      	subs	r3, r5, #1
 800633a:	930c      	str	r3, [sp, #48]	; 0x30
 800633c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006340:	2b30      	cmp	r3, #48	; 0x30
 8006342:	d0f8      	beq.n	8006336 <_dtoa_r+0x62e>
 8006344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006348:	e04a      	b.n	80063e0 <_dtoa_r+0x6d8>
 800634a:	bf00      	nop
 800634c:	0800aae0 	.word	0x0800aae0
 8006350:	0800aab8 	.word	0x0800aab8
 8006354:	3ff00000 	.word	0x3ff00000
 8006358:	40240000 	.word	0x40240000
 800635c:	401c0000 	.word	0x401c0000
 8006360:	40140000 	.word	0x40140000
 8006364:	3fe00000 	.word	0x3fe00000
 8006368:	4baf      	ldr	r3, [pc, #700]	; (8006628 <_dtoa_r+0x920>)
 800636a:	f7fa f94d 	bl	8000608 <__aeabi_dmul>
 800636e:	4606      	mov	r6, r0
 8006370:	460f      	mov	r7, r1
 8006372:	e7ac      	b.n	80062ce <_dtoa_r+0x5c6>
 8006374:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006378:	9d00      	ldr	r5, [sp, #0]
 800637a:	4642      	mov	r2, r8
 800637c:	464b      	mov	r3, r9
 800637e:	4630      	mov	r0, r6
 8006380:	4639      	mov	r1, r7
 8006382:	f7fa fa6b 	bl	800085c <__aeabi_ddiv>
 8006386:	f7fa fbef 	bl	8000b68 <__aeabi_d2iz>
 800638a:	9002      	str	r0, [sp, #8]
 800638c:	f7fa f8d2 	bl	8000534 <__aeabi_i2d>
 8006390:	4642      	mov	r2, r8
 8006392:	464b      	mov	r3, r9
 8006394:	f7fa f938 	bl	8000608 <__aeabi_dmul>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	f7f9 ff7a 	bl	8000298 <__aeabi_dsub>
 80063a4:	9e02      	ldr	r6, [sp, #8]
 80063a6:	9f01      	ldr	r7, [sp, #4]
 80063a8:	3630      	adds	r6, #48	; 0x30
 80063aa:	f805 6b01 	strb.w	r6, [r5], #1
 80063ae:	9e00      	ldr	r6, [sp, #0]
 80063b0:	1bae      	subs	r6, r5, r6
 80063b2:	42b7      	cmp	r7, r6
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	d137      	bne.n	800642a <_dtoa_r+0x722>
 80063ba:	f7f9 ff6f 	bl	800029c <__adddf3>
 80063be:	4642      	mov	r2, r8
 80063c0:	464b      	mov	r3, r9
 80063c2:	4606      	mov	r6, r0
 80063c4:	460f      	mov	r7, r1
 80063c6:	f7fa fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 80063ca:	b9c8      	cbnz	r0, 8006400 <_dtoa_r+0x6f8>
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	4630      	mov	r0, r6
 80063d2:	4639      	mov	r1, r7
 80063d4:	f7fa fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 80063d8:	b110      	cbz	r0, 80063e0 <_dtoa_r+0x6d8>
 80063da:	9b02      	ldr	r3, [sp, #8]
 80063dc:	07d9      	lsls	r1, r3, #31
 80063de:	d40f      	bmi.n	8006400 <_dtoa_r+0x6f8>
 80063e0:	4620      	mov	r0, r4
 80063e2:	4659      	mov	r1, fp
 80063e4:	f000 fad6 	bl	8006994 <_Bfree>
 80063e8:	2300      	movs	r3, #0
 80063ea:	702b      	strb	r3, [r5, #0]
 80063ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ee:	f10a 0001 	add.w	r0, sl, #1
 80063f2:	6018      	str	r0, [r3, #0]
 80063f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f43f acd8 	beq.w	8005dac <_dtoa_r+0xa4>
 80063fc:	601d      	str	r5, [r3, #0]
 80063fe:	e4d5      	b.n	8005dac <_dtoa_r+0xa4>
 8006400:	f8cd a01c 	str.w	sl, [sp, #28]
 8006404:	462b      	mov	r3, r5
 8006406:	461d      	mov	r5, r3
 8006408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800640c:	2a39      	cmp	r2, #57	; 0x39
 800640e:	d108      	bne.n	8006422 <_dtoa_r+0x71a>
 8006410:	9a00      	ldr	r2, [sp, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d1f7      	bne.n	8006406 <_dtoa_r+0x6fe>
 8006416:	9a07      	ldr	r2, [sp, #28]
 8006418:	9900      	ldr	r1, [sp, #0]
 800641a:	3201      	adds	r2, #1
 800641c:	9207      	str	r2, [sp, #28]
 800641e:	2230      	movs	r2, #48	; 0x30
 8006420:	700a      	strb	r2, [r1, #0]
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	3201      	adds	r2, #1
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e78c      	b.n	8006344 <_dtoa_r+0x63c>
 800642a:	4b7f      	ldr	r3, [pc, #508]	; (8006628 <_dtoa_r+0x920>)
 800642c:	2200      	movs	r2, #0
 800642e:	f7fa f8eb 	bl	8000608 <__aeabi_dmul>
 8006432:	2200      	movs	r2, #0
 8006434:	2300      	movs	r3, #0
 8006436:	4606      	mov	r6, r0
 8006438:	460f      	mov	r7, r1
 800643a:	f7fa fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800643e:	2800      	cmp	r0, #0
 8006440:	d09b      	beq.n	800637a <_dtoa_r+0x672>
 8006442:	e7cd      	b.n	80063e0 <_dtoa_r+0x6d8>
 8006444:	9a08      	ldr	r2, [sp, #32]
 8006446:	2a00      	cmp	r2, #0
 8006448:	f000 80c4 	beq.w	80065d4 <_dtoa_r+0x8cc>
 800644c:	9a05      	ldr	r2, [sp, #20]
 800644e:	2a01      	cmp	r2, #1
 8006450:	f300 80a8 	bgt.w	80065a4 <_dtoa_r+0x89c>
 8006454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006456:	2a00      	cmp	r2, #0
 8006458:	f000 80a0 	beq.w	800659c <_dtoa_r+0x894>
 800645c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006460:	9e06      	ldr	r6, [sp, #24]
 8006462:	4645      	mov	r5, r8
 8006464:	9a04      	ldr	r2, [sp, #16]
 8006466:	2101      	movs	r1, #1
 8006468:	441a      	add	r2, r3
 800646a:	4620      	mov	r0, r4
 800646c:	4498      	add	r8, r3
 800646e:	9204      	str	r2, [sp, #16]
 8006470:	f000 fb4c 	bl	8006b0c <__i2b>
 8006474:	4607      	mov	r7, r0
 8006476:	2d00      	cmp	r5, #0
 8006478:	dd0b      	ble.n	8006492 <_dtoa_r+0x78a>
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd08      	ble.n	8006492 <_dtoa_r+0x78a>
 8006480:	42ab      	cmp	r3, r5
 8006482:	9a04      	ldr	r2, [sp, #16]
 8006484:	bfa8      	it	ge
 8006486:	462b      	movge	r3, r5
 8006488:	eba8 0803 	sub.w	r8, r8, r3
 800648c:	1aed      	subs	r5, r5, r3
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	9b06      	ldr	r3, [sp, #24]
 8006494:	b1fb      	cbz	r3, 80064d6 <_dtoa_r+0x7ce>
 8006496:	9b08      	ldr	r3, [sp, #32]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 809f 	beq.w	80065dc <_dtoa_r+0x8d4>
 800649e:	2e00      	cmp	r6, #0
 80064a0:	dd11      	ble.n	80064c6 <_dtoa_r+0x7be>
 80064a2:	4639      	mov	r1, r7
 80064a4:	4632      	mov	r2, r6
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 fbec 	bl	8006c84 <__pow5mult>
 80064ac:	465a      	mov	r2, fp
 80064ae:	4601      	mov	r1, r0
 80064b0:	4607      	mov	r7, r0
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fb40 	bl	8006b38 <__multiply>
 80064b8:	4659      	mov	r1, fp
 80064ba:	9007      	str	r0, [sp, #28]
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fa69 	bl	8006994 <_Bfree>
 80064c2:	9b07      	ldr	r3, [sp, #28]
 80064c4:	469b      	mov	fp, r3
 80064c6:	9b06      	ldr	r3, [sp, #24]
 80064c8:	1b9a      	subs	r2, r3, r6
 80064ca:	d004      	beq.n	80064d6 <_dtoa_r+0x7ce>
 80064cc:	4659      	mov	r1, fp
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 fbd8 	bl	8006c84 <__pow5mult>
 80064d4:	4683      	mov	fp, r0
 80064d6:	2101      	movs	r1, #1
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fb17 	bl	8006b0c <__i2b>
 80064de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	4606      	mov	r6, r0
 80064e4:	dd7c      	ble.n	80065e0 <_dtoa_r+0x8d8>
 80064e6:	461a      	mov	r2, r3
 80064e8:	4601      	mov	r1, r0
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 fbca 	bl	8006c84 <__pow5mult>
 80064f0:	9b05      	ldr	r3, [sp, #20]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	4606      	mov	r6, r0
 80064f6:	dd76      	ble.n	80065e6 <_dtoa_r+0x8de>
 80064f8:	2300      	movs	r3, #0
 80064fa:	9306      	str	r3, [sp, #24]
 80064fc:	6933      	ldr	r3, [r6, #16]
 80064fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006502:	6918      	ldr	r0, [r3, #16]
 8006504:	f000 fab2 	bl	8006a6c <__hi0bits>
 8006508:	f1c0 0020 	rsb	r0, r0, #32
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	4418      	add	r0, r3
 8006510:	f010 001f 	ands.w	r0, r0, #31
 8006514:	f000 8086 	beq.w	8006624 <_dtoa_r+0x91c>
 8006518:	f1c0 0320 	rsb	r3, r0, #32
 800651c:	2b04      	cmp	r3, #4
 800651e:	dd7f      	ble.n	8006620 <_dtoa_r+0x918>
 8006520:	f1c0 001c 	rsb	r0, r0, #28
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	4403      	add	r3, r0
 8006528:	4480      	add	r8, r0
 800652a:	4405      	add	r5, r0
 800652c:	9304      	str	r3, [sp, #16]
 800652e:	f1b8 0f00 	cmp.w	r8, #0
 8006532:	dd05      	ble.n	8006540 <_dtoa_r+0x838>
 8006534:	4659      	mov	r1, fp
 8006536:	4642      	mov	r2, r8
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fbfd 	bl	8006d38 <__lshift>
 800653e:	4683      	mov	fp, r0
 8006540:	9b04      	ldr	r3, [sp, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	dd05      	ble.n	8006552 <_dtoa_r+0x84a>
 8006546:	4631      	mov	r1, r6
 8006548:	461a      	mov	r2, r3
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fbf4 	bl	8006d38 <__lshift>
 8006550:	4606      	mov	r6, r0
 8006552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d069      	beq.n	800662c <_dtoa_r+0x924>
 8006558:	4631      	mov	r1, r6
 800655a:	4658      	mov	r0, fp
 800655c:	f000 fc58 	bl	8006e10 <__mcmp>
 8006560:	2800      	cmp	r0, #0
 8006562:	da63      	bge.n	800662c <_dtoa_r+0x924>
 8006564:	2300      	movs	r3, #0
 8006566:	4659      	mov	r1, fp
 8006568:	220a      	movs	r2, #10
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fa34 	bl	80069d8 <__multadd>
 8006570:	9b08      	ldr	r3, [sp, #32]
 8006572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006576:	4683      	mov	fp, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 818f 	beq.w	800689c <_dtoa_r+0xb94>
 800657e:	4639      	mov	r1, r7
 8006580:	2300      	movs	r3, #0
 8006582:	220a      	movs	r2, #10
 8006584:	4620      	mov	r0, r4
 8006586:	f000 fa27 	bl	80069d8 <__multadd>
 800658a:	f1b9 0f00 	cmp.w	r9, #0
 800658e:	4607      	mov	r7, r0
 8006590:	f300 808e 	bgt.w	80066b0 <_dtoa_r+0x9a8>
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	2b02      	cmp	r3, #2
 8006598:	dc50      	bgt.n	800663c <_dtoa_r+0x934>
 800659a:	e089      	b.n	80066b0 <_dtoa_r+0x9a8>
 800659c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800659e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065a2:	e75d      	b.n	8006460 <_dtoa_r+0x758>
 80065a4:	9b01      	ldr	r3, [sp, #4]
 80065a6:	1e5e      	subs	r6, r3, #1
 80065a8:	9b06      	ldr	r3, [sp, #24]
 80065aa:	42b3      	cmp	r3, r6
 80065ac:	bfbf      	itttt	lt
 80065ae:	9b06      	ldrlt	r3, [sp, #24]
 80065b0:	9606      	strlt	r6, [sp, #24]
 80065b2:	1af2      	sublt	r2, r6, r3
 80065b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80065b6:	bfb6      	itet	lt
 80065b8:	189b      	addlt	r3, r3, r2
 80065ba:	1b9e      	subge	r6, r3, r6
 80065bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80065be:	9b01      	ldr	r3, [sp, #4]
 80065c0:	bfb8      	it	lt
 80065c2:	2600      	movlt	r6, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bfb5      	itete	lt
 80065c8:	eba8 0503 	sublt.w	r5, r8, r3
 80065cc:	9b01      	ldrge	r3, [sp, #4]
 80065ce:	2300      	movlt	r3, #0
 80065d0:	4645      	movge	r5, r8
 80065d2:	e747      	b.n	8006464 <_dtoa_r+0x75c>
 80065d4:	9e06      	ldr	r6, [sp, #24]
 80065d6:	9f08      	ldr	r7, [sp, #32]
 80065d8:	4645      	mov	r5, r8
 80065da:	e74c      	b.n	8006476 <_dtoa_r+0x76e>
 80065dc:	9a06      	ldr	r2, [sp, #24]
 80065de:	e775      	b.n	80064cc <_dtoa_r+0x7c4>
 80065e0:	9b05      	ldr	r3, [sp, #20]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	dc18      	bgt.n	8006618 <_dtoa_r+0x910>
 80065e6:	9b02      	ldr	r3, [sp, #8]
 80065e8:	b9b3      	cbnz	r3, 8006618 <_dtoa_r+0x910>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f0:	b9a3      	cbnz	r3, 800661c <_dtoa_r+0x914>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f8:	0d1b      	lsrs	r3, r3, #20
 80065fa:	051b      	lsls	r3, r3, #20
 80065fc:	b12b      	cbz	r3, 800660a <_dtoa_r+0x902>
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	f108 0801 	add.w	r8, r8, #1
 8006608:	2301      	movs	r3, #1
 800660a:	9306      	str	r3, [sp, #24]
 800660c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800660e:	2b00      	cmp	r3, #0
 8006610:	f47f af74 	bne.w	80064fc <_dtoa_r+0x7f4>
 8006614:	2001      	movs	r0, #1
 8006616:	e779      	b.n	800650c <_dtoa_r+0x804>
 8006618:	2300      	movs	r3, #0
 800661a:	e7f6      	b.n	800660a <_dtoa_r+0x902>
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	e7f4      	b.n	800660a <_dtoa_r+0x902>
 8006620:	d085      	beq.n	800652e <_dtoa_r+0x826>
 8006622:	4618      	mov	r0, r3
 8006624:	301c      	adds	r0, #28
 8006626:	e77d      	b.n	8006524 <_dtoa_r+0x81c>
 8006628:	40240000 	.word	0x40240000
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	dc38      	bgt.n	80066a4 <_dtoa_r+0x99c>
 8006632:	9b05      	ldr	r3, [sp, #20]
 8006634:	2b02      	cmp	r3, #2
 8006636:	dd35      	ble.n	80066a4 <_dtoa_r+0x99c>
 8006638:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800663c:	f1b9 0f00 	cmp.w	r9, #0
 8006640:	d10d      	bne.n	800665e <_dtoa_r+0x956>
 8006642:	4631      	mov	r1, r6
 8006644:	464b      	mov	r3, r9
 8006646:	2205      	movs	r2, #5
 8006648:	4620      	mov	r0, r4
 800664a:	f000 f9c5 	bl	80069d8 <__multadd>
 800664e:	4601      	mov	r1, r0
 8006650:	4606      	mov	r6, r0
 8006652:	4658      	mov	r0, fp
 8006654:	f000 fbdc 	bl	8006e10 <__mcmp>
 8006658:	2800      	cmp	r0, #0
 800665a:	f73f adbd 	bgt.w	80061d8 <_dtoa_r+0x4d0>
 800665e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006660:	9d00      	ldr	r5, [sp, #0]
 8006662:	ea6f 0a03 	mvn.w	sl, r3
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	4631      	mov	r1, r6
 800666c:	4620      	mov	r0, r4
 800666e:	f000 f991 	bl	8006994 <_Bfree>
 8006672:	2f00      	cmp	r7, #0
 8006674:	f43f aeb4 	beq.w	80063e0 <_dtoa_r+0x6d8>
 8006678:	f1b8 0f00 	cmp.w	r8, #0
 800667c:	d005      	beq.n	800668a <_dtoa_r+0x982>
 800667e:	45b8      	cmp	r8, r7
 8006680:	d003      	beq.n	800668a <_dtoa_r+0x982>
 8006682:	4641      	mov	r1, r8
 8006684:	4620      	mov	r0, r4
 8006686:	f000 f985 	bl	8006994 <_Bfree>
 800668a:	4639      	mov	r1, r7
 800668c:	4620      	mov	r0, r4
 800668e:	f000 f981 	bl	8006994 <_Bfree>
 8006692:	e6a5      	b.n	80063e0 <_dtoa_r+0x6d8>
 8006694:	2600      	movs	r6, #0
 8006696:	4637      	mov	r7, r6
 8006698:	e7e1      	b.n	800665e <_dtoa_r+0x956>
 800669a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800669c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80066a0:	4637      	mov	r7, r6
 80066a2:	e599      	b.n	80061d8 <_dtoa_r+0x4d0>
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 80fd 	beq.w	80068aa <_dtoa_r+0xba2>
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	dd05      	ble.n	80066c0 <_dtoa_r+0x9b8>
 80066b4:	4639      	mov	r1, r7
 80066b6:	462a      	mov	r2, r5
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fb3d 	bl	8006d38 <__lshift>
 80066be:	4607      	mov	r7, r0
 80066c0:	9b06      	ldr	r3, [sp, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d05c      	beq.n	8006780 <_dtoa_r+0xa78>
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 f923 	bl	8006914 <_Balloc>
 80066ce:	4605      	mov	r5, r0
 80066d0:	b928      	cbnz	r0, 80066de <_dtoa_r+0x9d6>
 80066d2:	4b80      	ldr	r3, [pc, #512]	; (80068d4 <_dtoa_r+0xbcc>)
 80066d4:	4602      	mov	r2, r0
 80066d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066da:	f7ff bb2e 	b.w	8005d3a <_dtoa_r+0x32>
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	3202      	adds	r2, #2
 80066e2:	0092      	lsls	r2, r2, #2
 80066e4:	f107 010c 	add.w	r1, r7, #12
 80066e8:	300c      	adds	r0, #12
 80066ea:	f000 f905 	bl	80068f8 <memcpy>
 80066ee:	2201      	movs	r2, #1
 80066f0:	4629      	mov	r1, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fb20 	bl	8006d38 <__lshift>
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	9b00      	ldr	r3, [sp, #0]
 8006700:	444b      	add	r3, r9
 8006702:	9307      	str	r3, [sp, #28]
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	46b8      	mov	r8, r7
 800670c:	9306      	str	r3, [sp, #24]
 800670e:	4607      	mov	r7, r0
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	4631      	mov	r1, r6
 8006714:	3b01      	subs	r3, #1
 8006716:	4658      	mov	r0, fp
 8006718:	9302      	str	r3, [sp, #8]
 800671a:	f7ff fa69 	bl	8005bf0 <quorem>
 800671e:	4603      	mov	r3, r0
 8006720:	3330      	adds	r3, #48	; 0x30
 8006722:	9004      	str	r0, [sp, #16]
 8006724:	4641      	mov	r1, r8
 8006726:	4658      	mov	r0, fp
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	f000 fb71 	bl	8006e10 <__mcmp>
 800672e:	463a      	mov	r2, r7
 8006730:	4681      	mov	r9, r0
 8006732:	4631      	mov	r1, r6
 8006734:	4620      	mov	r0, r4
 8006736:	f000 fb87 	bl	8006e48 <__mdiff>
 800673a:	68c2      	ldr	r2, [r0, #12]
 800673c:	9b08      	ldr	r3, [sp, #32]
 800673e:	4605      	mov	r5, r0
 8006740:	bb02      	cbnz	r2, 8006784 <_dtoa_r+0xa7c>
 8006742:	4601      	mov	r1, r0
 8006744:	4658      	mov	r0, fp
 8006746:	f000 fb63 	bl	8006e10 <__mcmp>
 800674a:	9b08      	ldr	r3, [sp, #32]
 800674c:	4602      	mov	r2, r0
 800674e:	4629      	mov	r1, r5
 8006750:	4620      	mov	r0, r4
 8006752:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006756:	f000 f91d 	bl	8006994 <_Bfree>
 800675a:	9b05      	ldr	r3, [sp, #20]
 800675c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800675e:	9d01      	ldr	r5, [sp, #4]
 8006760:	ea43 0102 	orr.w	r1, r3, r2
 8006764:	9b06      	ldr	r3, [sp, #24]
 8006766:	430b      	orrs	r3, r1
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	d10d      	bne.n	8006788 <_dtoa_r+0xa80>
 800676c:	2b39      	cmp	r3, #57	; 0x39
 800676e:	d029      	beq.n	80067c4 <_dtoa_r+0xabc>
 8006770:	f1b9 0f00 	cmp.w	r9, #0
 8006774:	dd01      	ble.n	800677a <_dtoa_r+0xa72>
 8006776:	9b04      	ldr	r3, [sp, #16]
 8006778:	3331      	adds	r3, #49	; 0x31
 800677a:	9a02      	ldr	r2, [sp, #8]
 800677c:	7013      	strb	r3, [r2, #0]
 800677e:	e774      	b.n	800666a <_dtoa_r+0x962>
 8006780:	4638      	mov	r0, r7
 8006782:	e7b9      	b.n	80066f8 <_dtoa_r+0x9f0>
 8006784:	2201      	movs	r2, #1
 8006786:	e7e2      	b.n	800674e <_dtoa_r+0xa46>
 8006788:	f1b9 0f00 	cmp.w	r9, #0
 800678c:	db06      	blt.n	800679c <_dtoa_r+0xa94>
 800678e:	9905      	ldr	r1, [sp, #20]
 8006790:	ea41 0909 	orr.w	r9, r1, r9
 8006794:	9906      	ldr	r1, [sp, #24]
 8006796:	ea59 0101 	orrs.w	r1, r9, r1
 800679a:	d120      	bne.n	80067de <_dtoa_r+0xad6>
 800679c:	2a00      	cmp	r2, #0
 800679e:	ddec      	ble.n	800677a <_dtoa_r+0xa72>
 80067a0:	4659      	mov	r1, fp
 80067a2:	2201      	movs	r2, #1
 80067a4:	4620      	mov	r0, r4
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	f000 fac6 	bl	8006d38 <__lshift>
 80067ac:	4631      	mov	r1, r6
 80067ae:	4683      	mov	fp, r0
 80067b0:	f000 fb2e 	bl	8006e10 <__mcmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	dc02      	bgt.n	80067c0 <_dtoa_r+0xab8>
 80067ba:	d1de      	bne.n	800677a <_dtoa_r+0xa72>
 80067bc:	07da      	lsls	r2, r3, #31
 80067be:	d5dc      	bpl.n	800677a <_dtoa_r+0xa72>
 80067c0:	2b39      	cmp	r3, #57	; 0x39
 80067c2:	d1d8      	bne.n	8006776 <_dtoa_r+0xa6e>
 80067c4:	9a02      	ldr	r2, [sp, #8]
 80067c6:	2339      	movs	r3, #57	; 0x39
 80067c8:	7013      	strb	r3, [r2, #0]
 80067ca:	462b      	mov	r3, r5
 80067cc:	461d      	mov	r5, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067d4:	2a39      	cmp	r2, #57	; 0x39
 80067d6:	d050      	beq.n	800687a <_dtoa_r+0xb72>
 80067d8:	3201      	adds	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e745      	b.n	800666a <_dtoa_r+0x962>
 80067de:	2a00      	cmp	r2, #0
 80067e0:	dd03      	ble.n	80067ea <_dtoa_r+0xae2>
 80067e2:	2b39      	cmp	r3, #57	; 0x39
 80067e4:	d0ee      	beq.n	80067c4 <_dtoa_r+0xabc>
 80067e6:	3301      	adds	r3, #1
 80067e8:	e7c7      	b.n	800677a <_dtoa_r+0xa72>
 80067ea:	9a01      	ldr	r2, [sp, #4]
 80067ec:	9907      	ldr	r1, [sp, #28]
 80067ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067f2:	428a      	cmp	r2, r1
 80067f4:	d02a      	beq.n	800684c <_dtoa_r+0xb44>
 80067f6:	4659      	mov	r1, fp
 80067f8:	2300      	movs	r3, #0
 80067fa:	220a      	movs	r2, #10
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f8eb 	bl	80069d8 <__multadd>
 8006802:	45b8      	cmp	r8, r7
 8006804:	4683      	mov	fp, r0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	f04f 020a 	mov.w	r2, #10
 800680e:	4641      	mov	r1, r8
 8006810:	4620      	mov	r0, r4
 8006812:	d107      	bne.n	8006824 <_dtoa_r+0xb1c>
 8006814:	f000 f8e0 	bl	80069d8 <__multadd>
 8006818:	4680      	mov	r8, r0
 800681a:	4607      	mov	r7, r0
 800681c:	9b01      	ldr	r3, [sp, #4]
 800681e:	3301      	adds	r3, #1
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	e775      	b.n	8006710 <_dtoa_r+0xa08>
 8006824:	f000 f8d8 	bl	80069d8 <__multadd>
 8006828:	4639      	mov	r1, r7
 800682a:	4680      	mov	r8, r0
 800682c:	2300      	movs	r3, #0
 800682e:	220a      	movs	r2, #10
 8006830:	4620      	mov	r0, r4
 8006832:	f000 f8d1 	bl	80069d8 <__multadd>
 8006836:	4607      	mov	r7, r0
 8006838:	e7f0      	b.n	800681c <_dtoa_r+0xb14>
 800683a:	f1b9 0f00 	cmp.w	r9, #0
 800683e:	9a00      	ldr	r2, [sp, #0]
 8006840:	bfcc      	ite	gt
 8006842:	464d      	movgt	r5, r9
 8006844:	2501      	movle	r5, #1
 8006846:	4415      	add	r5, r2
 8006848:	f04f 0800 	mov.w	r8, #0
 800684c:	4659      	mov	r1, fp
 800684e:	2201      	movs	r2, #1
 8006850:	4620      	mov	r0, r4
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	f000 fa70 	bl	8006d38 <__lshift>
 8006858:	4631      	mov	r1, r6
 800685a:	4683      	mov	fp, r0
 800685c:	f000 fad8 	bl	8006e10 <__mcmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	dcb2      	bgt.n	80067ca <_dtoa_r+0xac2>
 8006864:	d102      	bne.n	800686c <_dtoa_r+0xb64>
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	07db      	lsls	r3, r3, #31
 800686a:	d4ae      	bmi.n	80067ca <_dtoa_r+0xac2>
 800686c:	462b      	mov	r3, r5
 800686e:	461d      	mov	r5, r3
 8006870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006874:	2a30      	cmp	r2, #48	; 0x30
 8006876:	d0fa      	beq.n	800686e <_dtoa_r+0xb66>
 8006878:	e6f7      	b.n	800666a <_dtoa_r+0x962>
 800687a:	9a00      	ldr	r2, [sp, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d1a5      	bne.n	80067cc <_dtoa_r+0xac4>
 8006880:	f10a 0a01 	add.w	sl, sl, #1
 8006884:	2331      	movs	r3, #49	; 0x31
 8006886:	e779      	b.n	800677c <_dtoa_r+0xa74>
 8006888:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <_dtoa_r+0xbd0>)
 800688a:	f7ff baaf 	b.w	8005dec <_dtoa_r+0xe4>
 800688e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006890:	2b00      	cmp	r3, #0
 8006892:	f47f aa86 	bne.w	8005da2 <_dtoa_r+0x9a>
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <_dtoa_r+0xbd4>)
 8006898:	f7ff baa8 	b.w	8005dec <_dtoa_r+0xe4>
 800689c:	f1b9 0f00 	cmp.w	r9, #0
 80068a0:	dc03      	bgt.n	80068aa <_dtoa_r+0xba2>
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	f73f aec9 	bgt.w	800663c <_dtoa_r+0x934>
 80068aa:	9d00      	ldr	r5, [sp, #0]
 80068ac:	4631      	mov	r1, r6
 80068ae:	4658      	mov	r0, fp
 80068b0:	f7ff f99e 	bl	8005bf0 <quorem>
 80068b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068b8:	f805 3b01 	strb.w	r3, [r5], #1
 80068bc:	9a00      	ldr	r2, [sp, #0]
 80068be:	1aaa      	subs	r2, r5, r2
 80068c0:	4591      	cmp	r9, r2
 80068c2:	ddba      	ble.n	800683a <_dtoa_r+0xb32>
 80068c4:	4659      	mov	r1, fp
 80068c6:	2300      	movs	r3, #0
 80068c8:	220a      	movs	r2, #10
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 f884 	bl	80069d8 <__multadd>
 80068d0:	4683      	mov	fp, r0
 80068d2:	e7eb      	b.n	80068ac <_dtoa_r+0xba4>
 80068d4:	0800aa43 	.word	0x0800aa43
 80068d8:	0800a99c 	.word	0x0800a99c
 80068dc:	0800a9c0 	.word	0x0800a9c0

080068e0 <_localeconv_r>:
 80068e0:	4800      	ldr	r0, [pc, #0]	; (80068e4 <_localeconv_r+0x4>)
 80068e2:	4770      	bx	lr
 80068e4:	20000178 	.word	0x20000178

080068e8 <malloc>:
 80068e8:	4b02      	ldr	r3, [pc, #8]	; (80068f4 <malloc+0xc>)
 80068ea:	4601      	mov	r1, r0
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f000 bbef 	b.w	80070d0 <_malloc_r>
 80068f2:	bf00      	nop
 80068f4:	20000024 	.word	0x20000024

080068f8 <memcpy>:
 80068f8:	440a      	add	r2, r1
 80068fa:	4291      	cmp	r1, r2
 80068fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006900:	d100      	bne.n	8006904 <memcpy+0xc>
 8006902:	4770      	bx	lr
 8006904:	b510      	push	{r4, lr}
 8006906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800690a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800690e:	4291      	cmp	r1, r2
 8006910:	d1f9      	bne.n	8006906 <memcpy+0xe>
 8006912:	bd10      	pop	{r4, pc}

08006914 <_Balloc>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006918:	4604      	mov	r4, r0
 800691a:	460d      	mov	r5, r1
 800691c:	b976      	cbnz	r6, 800693c <_Balloc+0x28>
 800691e:	2010      	movs	r0, #16
 8006920:	f7ff ffe2 	bl	80068e8 <malloc>
 8006924:	4602      	mov	r2, r0
 8006926:	6260      	str	r0, [r4, #36]	; 0x24
 8006928:	b920      	cbnz	r0, 8006934 <_Balloc+0x20>
 800692a:	4b18      	ldr	r3, [pc, #96]	; (800698c <_Balloc+0x78>)
 800692c:	4818      	ldr	r0, [pc, #96]	; (8006990 <_Balloc+0x7c>)
 800692e:	2166      	movs	r1, #102	; 0x66
 8006930:	f000 fd94 	bl	800745c <__assert_func>
 8006934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006938:	6006      	str	r6, [r0, #0]
 800693a:	60c6      	str	r6, [r0, #12]
 800693c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800693e:	68f3      	ldr	r3, [r6, #12]
 8006940:	b183      	cbz	r3, 8006964 <_Balloc+0x50>
 8006942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800694a:	b9b8      	cbnz	r0, 800697c <_Balloc+0x68>
 800694c:	2101      	movs	r1, #1
 800694e:	fa01 f605 	lsl.w	r6, r1, r5
 8006952:	1d72      	adds	r2, r6, #5
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	4620      	mov	r0, r4
 8006958:	f000 fb5a 	bl	8007010 <_calloc_r>
 800695c:	b160      	cbz	r0, 8006978 <_Balloc+0x64>
 800695e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006962:	e00e      	b.n	8006982 <_Balloc+0x6e>
 8006964:	2221      	movs	r2, #33	; 0x21
 8006966:	2104      	movs	r1, #4
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fb51 	bl	8007010 <_calloc_r>
 800696e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006970:	60f0      	str	r0, [r6, #12]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e4      	bne.n	8006942 <_Balloc+0x2e>
 8006978:	2000      	movs	r0, #0
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	6802      	ldr	r2, [r0, #0]
 800697e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006982:	2300      	movs	r3, #0
 8006984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006988:	e7f7      	b.n	800697a <_Balloc+0x66>
 800698a:	bf00      	nop
 800698c:	0800a9cd 	.word	0x0800a9cd
 8006990:	0800aa54 	.word	0x0800aa54

08006994 <_Bfree>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006998:	4605      	mov	r5, r0
 800699a:	460c      	mov	r4, r1
 800699c:	b976      	cbnz	r6, 80069bc <_Bfree+0x28>
 800699e:	2010      	movs	r0, #16
 80069a0:	f7ff ffa2 	bl	80068e8 <malloc>
 80069a4:	4602      	mov	r2, r0
 80069a6:	6268      	str	r0, [r5, #36]	; 0x24
 80069a8:	b920      	cbnz	r0, 80069b4 <_Bfree+0x20>
 80069aa:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <_Bfree+0x3c>)
 80069ac:	4809      	ldr	r0, [pc, #36]	; (80069d4 <_Bfree+0x40>)
 80069ae:	218a      	movs	r1, #138	; 0x8a
 80069b0:	f000 fd54 	bl	800745c <__assert_func>
 80069b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069b8:	6006      	str	r6, [r0, #0]
 80069ba:	60c6      	str	r6, [r0, #12]
 80069bc:	b13c      	cbz	r4, 80069ce <_Bfree+0x3a>
 80069be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069c0:	6862      	ldr	r2, [r4, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069c8:	6021      	str	r1, [r4, #0]
 80069ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	0800a9cd 	.word	0x0800a9cd
 80069d4:	0800aa54 	.word	0x0800aa54

080069d8 <__multadd>:
 80069d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069dc:	690e      	ldr	r6, [r1, #16]
 80069de:	4607      	mov	r7, r0
 80069e0:	4698      	mov	r8, r3
 80069e2:	460c      	mov	r4, r1
 80069e4:	f101 0014 	add.w	r0, r1, #20
 80069e8:	2300      	movs	r3, #0
 80069ea:	6805      	ldr	r5, [r0, #0]
 80069ec:	b2a9      	uxth	r1, r5
 80069ee:	fb02 8101 	mla	r1, r2, r1, r8
 80069f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80069f6:	0c2d      	lsrs	r5, r5, #16
 80069f8:	fb02 c505 	mla	r5, r2, r5, ip
 80069fc:	b289      	uxth	r1, r1
 80069fe:	3301      	adds	r3, #1
 8006a00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006a04:	429e      	cmp	r6, r3
 8006a06:	f840 1b04 	str.w	r1, [r0], #4
 8006a0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006a0e:	dcec      	bgt.n	80069ea <__multadd+0x12>
 8006a10:	f1b8 0f00 	cmp.w	r8, #0
 8006a14:	d022      	beq.n	8006a5c <__multadd+0x84>
 8006a16:	68a3      	ldr	r3, [r4, #8]
 8006a18:	42b3      	cmp	r3, r6
 8006a1a:	dc19      	bgt.n	8006a50 <__multadd+0x78>
 8006a1c:	6861      	ldr	r1, [r4, #4]
 8006a1e:	4638      	mov	r0, r7
 8006a20:	3101      	adds	r1, #1
 8006a22:	f7ff ff77 	bl	8006914 <_Balloc>
 8006a26:	4605      	mov	r5, r0
 8006a28:	b928      	cbnz	r0, 8006a36 <__multadd+0x5e>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <__multadd+0x8c>)
 8006a2e:	480e      	ldr	r0, [pc, #56]	; (8006a68 <__multadd+0x90>)
 8006a30:	21b5      	movs	r1, #181	; 0xb5
 8006a32:	f000 fd13 	bl	800745c <__assert_func>
 8006a36:	6922      	ldr	r2, [r4, #16]
 8006a38:	3202      	adds	r2, #2
 8006a3a:	f104 010c 	add.w	r1, r4, #12
 8006a3e:	0092      	lsls	r2, r2, #2
 8006a40:	300c      	adds	r0, #12
 8006a42:	f7ff ff59 	bl	80068f8 <memcpy>
 8006a46:	4621      	mov	r1, r4
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff ffa3 	bl	8006994 <_Bfree>
 8006a4e:	462c      	mov	r4, r5
 8006a50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a54:	3601      	adds	r6, #1
 8006a56:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a5a:	6126      	str	r6, [r4, #16]
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a62:	bf00      	nop
 8006a64:	0800aa43 	.word	0x0800aa43
 8006a68:	0800aa54 	.word	0x0800aa54

08006a6c <__hi0bits>:
 8006a6c:	0c03      	lsrs	r3, r0, #16
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	b9d3      	cbnz	r3, 8006aa8 <__hi0bits+0x3c>
 8006a72:	0400      	lsls	r0, r0, #16
 8006a74:	2310      	movs	r3, #16
 8006a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a7a:	bf04      	itt	eq
 8006a7c:	0200      	lsleq	r0, r0, #8
 8006a7e:	3308      	addeq	r3, #8
 8006a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a84:	bf04      	itt	eq
 8006a86:	0100      	lsleq	r0, r0, #4
 8006a88:	3304      	addeq	r3, #4
 8006a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a8e:	bf04      	itt	eq
 8006a90:	0080      	lsleq	r0, r0, #2
 8006a92:	3302      	addeq	r3, #2
 8006a94:	2800      	cmp	r0, #0
 8006a96:	db05      	blt.n	8006aa4 <__hi0bits+0x38>
 8006a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a9c:	f103 0301 	add.w	r3, r3, #1
 8006aa0:	bf08      	it	eq
 8006aa2:	2320      	moveq	r3, #32
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	4770      	bx	lr
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e7e4      	b.n	8006a76 <__hi0bits+0xa>

08006aac <__lo0bits>:
 8006aac:	6803      	ldr	r3, [r0, #0]
 8006aae:	f013 0207 	ands.w	r2, r3, #7
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	d00b      	beq.n	8006ace <__lo0bits+0x22>
 8006ab6:	07da      	lsls	r2, r3, #31
 8006ab8:	d424      	bmi.n	8006b04 <__lo0bits+0x58>
 8006aba:	0798      	lsls	r0, r3, #30
 8006abc:	bf49      	itett	mi
 8006abe:	085b      	lsrmi	r3, r3, #1
 8006ac0:	089b      	lsrpl	r3, r3, #2
 8006ac2:	2001      	movmi	r0, #1
 8006ac4:	600b      	strmi	r3, [r1, #0]
 8006ac6:	bf5c      	itt	pl
 8006ac8:	600b      	strpl	r3, [r1, #0]
 8006aca:	2002      	movpl	r0, #2
 8006acc:	4770      	bx	lr
 8006ace:	b298      	uxth	r0, r3
 8006ad0:	b9b0      	cbnz	r0, 8006b00 <__lo0bits+0x54>
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	2010      	movs	r0, #16
 8006ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ada:	bf04      	itt	eq
 8006adc:	0a1b      	lsreq	r3, r3, #8
 8006ade:	3008      	addeq	r0, #8
 8006ae0:	071a      	lsls	r2, r3, #28
 8006ae2:	bf04      	itt	eq
 8006ae4:	091b      	lsreq	r3, r3, #4
 8006ae6:	3004      	addeq	r0, #4
 8006ae8:	079a      	lsls	r2, r3, #30
 8006aea:	bf04      	itt	eq
 8006aec:	089b      	lsreq	r3, r3, #2
 8006aee:	3002      	addeq	r0, #2
 8006af0:	07da      	lsls	r2, r3, #31
 8006af2:	d403      	bmi.n	8006afc <__lo0bits+0x50>
 8006af4:	085b      	lsrs	r3, r3, #1
 8006af6:	f100 0001 	add.w	r0, r0, #1
 8006afa:	d005      	beq.n	8006b08 <__lo0bits+0x5c>
 8006afc:	600b      	str	r3, [r1, #0]
 8006afe:	4770      	bx	lr
 8006b00:	4610      	mov	r0, r2
 8006b02:	e7e8      	b.n	8006ad6 <__lo0bits+0x2a>
 8006b04:	2000      	movs	r0, #0
 8006b06:	4770      	bx	lr
 8006b08:	2020      	movs	r0, #32
 8006b0a:	4770      	bx	lr

08006b0c <__i2b>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	460c      	mov	r4, r1
 8006b10:	2101      	movs	r1, #1
 8006b12:	f7ff feff 	bl	8006914 <_Balloc>
 8006b16:	4602      	mov	r2, r0
 8006b18:	b928      	cbnz	r0, 8006b26 <__i2b+0x1a>
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <__i2b+0x24>)
 8006b1c:	4805      	ldr	r0, [pc, #20]	; (8006b34 <__i2b+0x28>)
 8006b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b22:	f000 fc9b 	bl	800745c <__assert_func>
 8006b26:	2301      	movs	r3, #1
 8006b28:	6144      	str	r4, [r0, #20]
 8006b2a:	6103      	str	r3, [r0, #16]
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	0800aa43 	.word	0x0800aa43
 8006b34:	0800aa54 	.word	0x0800aa54

08006b38 <__multiply>:
 8006b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	690a      	ldr	r2, [r1, #16]
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	bfb8      	it	lt
 8006b46:	460b      	movlt	r3, r1
 8006b48:	460d      	mov	r5, r1
 8006b4a:	bfbc      	itt	lt
 8006b4c:	4625      	movlt	r5, r4
 8006b4e:	461c      	movlt	r4, r3
 8006b50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b58:	68ab      	ldr	r3, [r5, #8]
 8006b5a:	6869      	ldr	r1, [r5, #4]
 8006b5c:	eb0a 0709 	add.w	r7, sl, r9
 8006b60:	42bb      	cmp	r3, r7
 8006b62:	b085      	sub	sp, #20
 8006b64:	bfb8      	it	lt
 8006b66:	3101      	addlt	r1, #1
 8006b68:	f7ff fed4 	bl	8006914 <_Balloc>
 8006b6c:	b930      	cbnz	r0, 8006b7c <__multiply+0x44>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	4b42      	ldr	r3, [pc, #264]	; (8006c7c <__multiply+0x144>)
 8006b72:	4843      	ldr	r0, [pc, #268]	; (8006c80 <__multiply+0x148>)
 8006b74:	f240 115d 	movw	r1, #349	; 0x15d
 8006b78:	f000 fc70 	bl	800745c <__assert_func>
 8006b7c:	f100 0614 	add.w	r6, r0, #20
 8006b80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b84:	4633      	mov	r3, r6
 8006b86:	2200      	movs	r2, #0
 8006b88:	4543      	cmp	r3, r8
 8006b8a:	d31e      	bcc.n	8006bca <__multiply+0x92>
 8006b8c:	f105 0c14 	add.w	ip, r5, #20
 8006b90:	f104 0314 	add.w	r3, r4, #20
 8006b94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	ebac 0205 	sub.w	r2, ip, r5
 8006ba2:	3a15      	subs	r2, #21
 8006ba4:	f022 0203 	bic.w	r2, r2, #3
 8006ba8:	3204      	adds	r2, #4
 8006baa:	f105 0115 	add.w	r1, r5, #21
 8006bae:	458c      	cmp	ip, r1
 8006bb0:	bf38      	it	cc
 8006bb2:	2204      	movcc	r2, #4
 8006bb4:	9201      	str	r2, [sp, #4]
 8006bb6:	9a02      	ldr	r2, [sp, #8]
 8006bb8:	9303      	str	r3, [sp, #12]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d808      	bhi.n	8006bd0 <__multiply+0x98>
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	dc55      	bgt.n	8006c6e <__multiply+0x136>
 8006bc2:	6107      	str	r7, [r0, #16]
 8006bc4:	b005      	add	sp, #20
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bca:	f843 2b04 	str.w	r2, [r3], #4
 8006bce:	e7db      	b.n	8006b88 <__multiply+0x50>
 8006bd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bd4:	f1ba 0f00 	cmp.w	sl, #0
 8006bd8:	d020      	beq.n	8006c1c <__multiply+0xe4>
 8006bda:	f105 0e14 	add.w	lr, r5, #20
 8006bde:	46b1      	mov	r9, r6
 8006be0:	2200      	movs	r2, #0
 8006be2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006be6:	f8d9 b000 	ldr.w	fp, [r9]
 8006bea:	b2a1      	uxth	r1, r4
 8006bec:	fa1f fb8b 	uxth.w	fp, fp
 8006bf0:	fb0a b101 	mla	r1, sl, r1, fp
 8006bf4:	4411      	add	r1, r2
 8006bf6:	f8d9 2000 	ldr.w	r2, [r9]
 8006bfa:	0c24      	lsrs	r4, r4, #16
 8006bfc:	0c12      	lsrs	r2, r2, #16
 8006bfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c06:	b289      	uxth	r1, r1
 8006c08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c0c:	45f4      	cmp	ip, lr
 8006c0e:	f849 1b04 	str.w	r1, [r9], #4
 8006c12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c16:	d8e4      	bhi.n	8006be2 <__multiply+0xaa>
 8006c18:	9901      	ldr	r1, [sp, #4]
 8006c1a:	5072      	str	r2, [r6, r1]
 8006c1c:	9a03      	ldr	r2, [sp, #12]
 8006c1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c22:	3304      	adds	r3, #4
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	d01f      	beq.n	8006c6a <__multiply+0x132>
 8006c2a:	6834      	ldr	r4, [r6, #0]
 8006c2c:	f105 0114 	add.w	r1, r5, #20
 8006c30:	46b6      	mov	lr, r6
 8006c32:	f04f 0a00 	mov.w	sl, #0
 8006c36:	880a      	ldrh	r2, [r1, #0]
 8006c38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c3c:	fb09 b202 	mla	r2, r9, r2, fp
 8006c40:	4492      	add	sl, r2
 8006c42:	b2a4      	uxth	r4, r4
 8006c44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c48:	f84e 4b04 	str.w	r4, [lr], #4
 8006c4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c50:	f8be 2000 	ldrh.w	r2, [lr]
 8006c54:	0c24      	lsrs	r4, r4, #16
 8006c56:	fb09 2404 	mla	r4, r9, r4, r2
 8006c5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c5e:	458c      	cmp	ip, r1
 8006c60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c64:	d8e7      	bhi.n	8006c36 <__multiply+0xfe>
 8006c66:	9a01      	ldr	r2, [sp, #4]
 8006c68:	50b4      	str	r4, [r6, r2]
 8006c6a:	3604      	adds	r6, #4
 8006c6c:	e7a3      	b.n	8006bb6 <__multiply+0x7e>
 8006c6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1a5      	bne.n	8006bc2 <__multiply+0x8a>
 8006c76:	3f01      	subs	r7, #1
 8006c78:	e7a1      	b.n	8006bbe <__multiply+0x86>
 8006c7a:	bf00      	nop
 8006c7c:	0800aa43 	.word	0x0800aa43
 8006c80:	0800aa54 	.word	0x0800aa54

08006c84 <__pow5mult>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	4615      	mov	r5, r2
 8006c8a:	f012 0203 	ands.w	r2, r2, #3
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460f      	mov	r7, r1
 8006c92:	d007      	beq.n	8006ca4 <__pow5mult+0x20>
 8006c94:	4c25      	ldr	r4, [pc, #148]	; (8006d2c <__pow5mult+0xa8>)
 8006c96:	3a01      	subs	r2, #1
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c9e:	f7ff fe9b 	bl	80069d8 <__multadd>
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	10ad      	asrs	r5, r5, #2
 8006ca6:	d03d      	beq.n	8006d24 <__pow5mult+0xa0>
 8006ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006caa:	b97c      	cbnz	r4, 8006ccc <__pow5mult+0x48>
 8006cac:	2010      	movs	r0, #16
 8006cae:	f7ff fe1b 	bl	80068e8 <malloc>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6270      	str	r0, [r6, #36]	; 0x24
 8006cb6:	b928      	cbnz	r0, 8006cc4 <__pow5mult+0x40>
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <__pow5mult+0xac>)
 8006cba:	481e      	ldr	r0, [pc, #120]	; (8006d34 <__pow5mult+0xb0>)
 8006cbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006cc0:	f000 fbcc 	bl	800745c <__assert_func>
 8006cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cc8:	6004      	str	r4, [r0, #0]
 8006cca:	60c4      	str	r4, [r0, #12]
 8006ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cd4:	b94c      	cbnz	r4, 8006cea <__pow5mult+0x66>
 8006cd6:	f240 2171 	movw	r1, #625	; 0x271
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff ff16 	bl	8006b0c <__i2b>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	6003      	str	r3, [r0, #0]
 8006cea:	f04f 0900 	mov.w	r9, #0
 8006cee:	07eb      	lsls	r3, r5, #31
 8006cf0:	d50a      	bpl.n	8006d08 <__pow5mult+0x84>
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	f7ff ff1e 	bl	8006b38 <__multiply>
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff fe47 	bl	8006994 <_Bfree>
 8006d06:	4647      	mov	r7, r8
 8006d08:	106d      	asrs	r5, r5, #1
 8006d0a:	d00b      	beq.n	8006d24 <__pow5mult+0xa0>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	b938      	cbnz	r0, 8006d20 <__pow5mult+0x9c>
 8006d10:	4622      	mov	r2, r4
 8006d12:	4621      	mov	r1, r4
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7ff ff0f 	bl	8006b38 <__multiply>
 8006d1a:	6020      	str	r0, [r4, #0]
 8006d1c:	f8c0 9000 	str.w	r9, [r0]
 8006d20:	4604      	mov	r4, r0
 8006d22:	e7e4      	b.n	8006cee <__pow5mult+0x6a>
 8006d24:	4638      	mov	r0, r7
 8006d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d2a:	bf00      	nop
 8006d2c:	0800aba8 	.word	0x0800aba8
 8006d30:	0800a9cd 	.word	0x0800a9cd
 8006d34:	0800aa54 	.word	0x0800aa54

08006d38 <__lshift>:
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	6849      	ldr	r1, [r1, #4]
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	4607      	mov	r7, r0
 8006d4a:	4691      	mov	r9, r2
 8006d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d50:	f108 0601 	add.w	r6, r8, #1
 8006d54:	42b3      	cmp	r3, r6
 8006d56:	db0b      	blt.n	8006d70 <__lshift+0x38>
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff fddb 	bl	8006914 <_Balloc>
 8006d5e:	4605      	mov	r5, r0
 8006d60:	b948      	cbnz	r0, 8006d76 <__lshift+0x3e>
 8006d62:	4602      	mov	r2, r0
 8006d64:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <__lshift+0xd0>)
 8006d66:	4829      	ldr	r0, [pc, #164]	; (8006e0c <__lshift+0xd4>)
 8006d68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d6c:	f000 fb76 	bl	800745c <__assert_func>
 8006d70:	3101      	adds	r1, #1
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	e7ee      	b.n	8006d54 <__lshift+0x1c>
 8006d76:	2300      	movs	r3, #0
 8006d78:	f100 0114 	add.w	r1, r0, #20
 8006d7c:	f100 0210 	add.w	r2, r0, #16
 8006d80:	4618      	mov	r0, r3
 8006d82:	4553      	cmp	r3, sl
 8006d84:	db33      	blt.n	8006dee <__lshift+0xb6>
 8006d86:	6920      	ldr	r0, [r4, #16]
 8006d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d8c:	f104 0314 	add.w	r3, r4, #20
 8006d90:	f019 091f 	ands.w	r9, r9, #31
 8006d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d9c:	d02b      	beq.n	8006df6 <__lshift+0xbe>
 8006d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8006da2:	468a      	mov	sl, r1
 8006da4:	2200      	movs	r2, #0
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	fa00 f009 	lsl.w	r0, r0, r9
 8006dac:	4302      	orrs	r2, r0
 8006dae:	f84a 2b04 	str.w	r2, [sl], #4
 8006db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db6:	459c      	cmp	ip, r3
 8006db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dbc:	d8f3      	bhi.n	8006da6 <__lshift+0x6e>
 8006dbe:	ebac 0304 	sub.w	r3, ip, r4
 8006dc2:	3b15      	subs	r3, #21
 8006dc4:	f023 0303 	bic.w	r3, r3, #3
 8006dc8:	3304      	adds	r3, #4
 8006dca:	f104 0015 	add.w	r0, r4, #21
 8006dce:	4584      	cmp	ip, r0
 8006dd0:	bf38      	it	cc
 8006dd2:	2304      	movcc	r3, #4
 8006dd4:	50ca      	str	r2, [r1, r3]
 8006dd6:	b10a      	cbz	r2, 8006ddc <__lshift+0xa4>
 8006dd8:	f108 0602 	add.w	r6, r8, #2
 8006ddc:	3e01      	subs	r6, #1
 8006dde:	4638      	mov	r0, r7
 8006de0:	612e      	str	r6, [r5, #16]
 8006de2:	4621      	mov	r1, r4
 8006de4:	f7ff fdd6 	bl	8006994 <_Bfree>
 8006de8:	4628      	mov	r0, r5
 8006dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8006df2:	3301      	adds	r3, #1
 8006df4:	e7c5      	b.n	8006d82 <__lshift+0x4a>
 8006df6:	3904      	subs	r1, #4
 8006df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e00:	459c      	cmp	ip, r3
 8006e02:	d8f9      	bhi.n	8006df8 <__lshift+0xc0>
 8006e04:	e7ea      	b.n	8006ddc <__lshift+0xa4>
 8006e06:	bf00      	nop
 8006e08:	0800aa43 	.word	0x0800aa43
 8006e0c:	0800aa54 	.word	0x0800aa54

08006e10 <__mcmp>:
 8006e10:	b530      	push	{r4, r5, lr}
 8006e12:	6902      	ldr	r2, [r0, #16]
 8006e14:	690c      	ldr	r4, [r1, #16]
 8006e16:	1b12      	subs	r2, r2, r4
 8006e18:	d10e      	bne.n	8006e38 <__mcmp+0x28>
 8006e1a:	f100 0314 	add.w	r3, r0, #20
 8006e1e:	3114      	adds	r1, #20
 8006e20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e30:	42a5      	cmp	r5, r4
 8006e32:	d003      	beq.n	8006e3c <__mcmp+0x2c>
 8006e34:	d305      	bcc.n	8006e42 <__mcmp+0x32>
 8006e36:	2201      	movs	r2, #1
 8006e38:	4610      	mov	r0, r2
 8006e3a:	bd30      	pop	{r4, r5, pc}
 8006e3c:	4283      	cmp	r3, r0
 8006e3e:	d3f3      	bcc.n	8006e28 <__mcmp+0x18>
 8006e40:	e7fa      	b.n	8006e38 <__mcmp+0x28>
 8006e42:	f04f 32ff 	mov.w	r2, #4294967295
 8006e46:	e7f7      	b.n	8006e38 <__mcmp+0x28>

08006e48 <__mdiff>:
 8006e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	4606      	mov	r6, r0
 8006e50:	4611      	mov	r1, r2
 8006e52:	4620      	mov	r0, r4
 8006e54:	4617      	mov	r7, r2
 8006e56:	f7ff ffdb 	bl	8006e10 <__mcmp>
 8006e5a:	1e05      	subs	r5, r0, #0
 8006e5c:	d110      	bne.n	8006e80 <__mdiff+0x38>
 8006e5e:	4629      	mov	r1, r5
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff fd57 	bl	8006914 <_Balloc>
 8006e66:	b930      	cbnz	r0, 8006e76 <__mdiff+0x2e>
 8006e68:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <__mdiff+0x108>)
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	f240 2132 	movw	r1, #562	; 0x232
 8006e70:	4838      	ldr	r0, [pc, #224]	; (8006f54 <__mdiff+0x10c>)
 8006e72:	f000 faf3 	bl	800745c <__assert_func>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e80:	bfa4      	itt	ge
 8006e82:	463b      	movge	r3, r7
 8006e84:	4627      	movge	r7, r4
 8006e86:	4630      	mov	r0, r6
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	bfa6      	itte	ge
 8006e8c:	461c      	movge	r4, r3
 8006e8e:	2500      	movge	r5, #0
 8006e90:	2501      	movlt	r5, #1
 8006e92:	f7ff fd3f 	bl	8006914 <_Balloc>
 8006e96:	b920      	cbnz	r0, 8006ea2 <__mdiff+0x5a>
 8006e98:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <__mdiff+0x108>)
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ea0:	e7e6      	b.n	8006e70 <__mdiff+0x28>
 8006ea2:	693e      	ldr	r6, [r7, #16]
 8006ea4:	60c5      	str	r5, [r0, #12]
 8006ea6:	6925      	ldr	r5, [r4, #16]
 8006ea8:	f107 0114 	add.w	r1, r7, #20
 8006eac:	f104 0914 	add.w	r9, r4, #20
 8006eb0:	f100 0e14 	add.w	lr, r0, #20
 8006eb4:	f107 0210 	add.w	r2, r7, #16
 8006eb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ebc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ec0:	46f2      	mov	sl, lr
 8006ec2:	2700      	movs	r7, #0
 8006ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ecc:	fa1f f883 	uxth.w	r8, r3
 8006ed0:	fa17 f78b 	uxtah	r7, r7, fp
 8006ed4:	0c1b      	lsrs	r3, r3, #16
 8006ed6:	eba7 0808 	sub.w	r8, r7, r8
 8006eda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ee2:	fa1f f888 	uxth.w	r8, r8
 8006ee6:	141f      	asrs	r7, r3, #16
 8006ee8:	454d      	cmp	r5, r9
 8006eea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006eee:	f84a 3b04 	str.w	r3, [sl], #4
 8006ef2:	d8e7      	bhi.n	8006ec4 <__mdiff+0x7c>
 8006ef4:	1b2b      	subs	r3, r5, r4
 8006ef6:	3b15      	subs	r3, #21
 8006ef8:	f023 0303 	bic.w	r3, r3, #3
 8006efc:	3304      	adds	r3, #4
 8006efe:	3415      	adds	r4, #21
 8006f00:	42a5      	cmp	r5, r4
 8006f02:	bf38      	it	cc
 8006f04:	2304      	movcc	r3, #4
 8006f06:	4419      	add	r1, r3
 8006f08:	4473      	add	r3, lr
 8006f0a:	469e      	mov	lr, r3
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4565      	cmp	r5, ip
 8006f10:	d30e      	bcc.n	8006f30 <__mdiff+0xe8>
 8006f12:	f10c 0203 	add.w	r2, ip, #3
 8006f16:	1a52      	subs	r2, r2, r1
 8006f18:	f022 0203 	bic.w	r2, r2, #3
 8006f1c:	3903      	subs	r1, #3
 8006f1e:	458c      	cmp	ip, r1
 8006f20:	bf38      	it	cc
 8006f22:	2200      	movcc	r2, #0
 8006f24:	441a      	add	r2, r3
 8006f26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f2a:	b17b      	cbz	r3, 8006f4c <__mdiff+0x104>
 8006f2c:	6106      	str	r6, [r0, #16]
 8006f2e:	e7a5      	b.n	8006e7c <__mdiff+0x34>
 8006f30:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f34:	fa17 f488 	uxtah	r4, r7, r8
 8006f38:	1422      	asrs	r2, r4, #16
 8006f3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f3e:	b2a4      	uxth	r4, r4
 8006f40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f44:	f84e 4b04 	str.w	r4, [lr], #4
 8006f48:	1417      	asrs	r7, r2, #16
 8006f4a:	e7e0      	b.n	8006f0e <__mdiff+0xc6>
 8006f4c:	3e01      	subs	r6, #1
 8006f4e:	e7ea      	b.n	8006f26 <__mdiff+0xde>
 8006f50:	0800aa43 	.word	0x0800aa43
 8006f54:	0800aa54 	.word	0x0800aa54

08006f58 <__d2b>:
 8006f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	2101      	movs	r1, #1
 8006f60:	ec57 6b10 	vmov	r6, r7, d0
 8006f64:	4690      	mov	r8, r2
 8006f66:	f7ff fcd5 	bl	8006914 <_Balloc>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	b930      	cbnz	r0, 8006f7c <__d2b+0x24>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <__d2b+0xb0>)
 8006f72:	4826      	ldr	r0, [pc, #152]	; (800700c <__d2b+0xb4>)
 8006f74:	f240 310a 	movw	r1, #778	; 0x30a
 8006f78:	f000 fa70 	bl	800745c <__assert_func>
 8006f7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f84:	bb35      	cbnz	r5, 8006fd4 <__d2b+0x7c>
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	d028      	beq.n	8006fde <__d2b+0x86>
 8006f8c:	4668      	mov	r0, sp
 8006f8e:	9600      	str	r6, [sp, #0]
 8006f90:	f7ff fd8c 	bl	8006aac <__lo0bits>
 8006f94:	9900      	ldr	r1, [sp, #0]
 8006f96:	b300      	cbz	r0, 8006fda <__d2b+0x82>
 8006f98:	9a01      	ldr	r2, [sp, #4]
 8006f9a:	f1c0 0320 	rsb	r3, r0, #32
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	40c2      	lsrs	r2, r0
 8006fa6:	6163      	str	r3, [r4, #20]
 8006fa8:	9201      	str	r2, [sp, #4]
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	61a3      	str	r3, [r4, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf14      	ite	ne
 8006fb2:	2202      	movne	r2, #2
 8006fb4:	2201      	moveq	r2, #1
 8006fb6:	6122      	str	r2, [r4, #16]
 8006fb8:	b1d5      	cbz	r5, 8006ff0 <__d2b+0x98>
 8006fba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fbe:	4405      	add	r5, r0
 8006fc0:	f8c9 5000 	str.w	r5, [r9]
 8006fc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fc8:	f8c8 0000 	str.w	r0, [r8]
 8006fcc:	4620      	mov	r0, r4
 8006fce:	b003      	add	sp, #12
 8006fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fd8:	e7d5      	b.n	8006f86 <__d2b+0x2e>
 8006fda:	6161      	str	r1, [r4, #20]
 8006fdc:	e7e5      	b.n	8006faa <__d2b+0x52>
 8006fde:	a801      	add	r0, sp, #4
 8006fe0:	f7ff fd64 	bl	8006aac <__lo0bits>
 8006fe4:	9b01      	ldr	r3, [sp, #4]
 8006fe6:	6163      	str	r3, [r4, #20]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	6122      	str	r2, [r4, #16]
 8006fec:	3020      	adds	r0, #32
 8006fee:	e7e3      	b.n	8006fb8 <__d2b+0x60>
 8006ff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ff8:	f8c9 0000 	str.w	r0, [r9]
 8006ffc:	6918      	ldr	r0, [r3, #16]
 8006ffe:	f7ff fd35 	bl	8006a6c <__hi0bits>
 8007002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007006:	e7df      	b.n	8006fc8 <__d2b+0x70>
 8007008:	0800aa43 	.word	0x0800aa43
 800700c:	0800aa54 	.word	0x0800aa54

08007010 <_calloc_r>:
 8007010:	b513      	push	{r0, r1, r4, lr}
 8007012:	434a      	muls	r2, r1
 8007014:	4611      	mov	r1, r2
 8007016:	9201      	str	r2, [sp, #4]
 8007018:	f000 f85a 	bl	80070d0 <_malloc_r>
 800701c:	4604      	mov	r4, r0
 800701e:	b118      	cbz	r0, 8007028 <_calloc_r+0x18>
 8007020:	9a01      	ldr	r2, [sp, #4]
 8007022:	2100      	movs	r1, #0
 8007024:	f7fe f952 	bl	80052cc <memset>
 8007028:	4620      	mov	r0, r4
 800702a:	b002      	add	sp, #8
 800702c:	bd10      	pop	{r4, pc}
	...

08007030 <_free_r>:
 8007030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007032:	2900      	cmp	r1, #0
 8007034:	d048      	beq.n	80070c8 <_free_r+0x98>
 8007036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800703a:	9001      	str	r0, [sp, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f1a1 0404 	sub.w	r4, r1, #4
 8007042:	bfb8      	it	lt
 8007044:	18e4      	addlt	r4, r4, r3
 8007046:	f000 fa65 	bl	8007514 <__malloc_lock>
 800704a:	4a20      	ldr	r2, [pc, #128]	; (80070cc <_free_r+0x9c>)
 800704c:	9801      	ldr	r0, [sp, #4]
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	4615      	mov	r5, r2
 8007052:	b933      	cbnz	r3, 8007062 <_free_r+0x32>
 8007054:	6063      	str	r3, [r4, #4]
 8007056:	6014      	str	r4, [r2, #0]
 8007058:	b003      	add	sp, #12
 800705a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800705e:	f000 ba5f 	b.w	8007520 <__malloc_unlock>
 8007062:	42a3      	cmp	r3, r4
 8007064:	d90b      	bls.n	800707e <_free_r+0x4e>
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	1862      	adds	r2, r4, r1
 800706a:	4293      	cmp	r3, r2
 800706c:	bf04      	itt	eq
 800706e:	681a      	ldreq	r2, [r3, #0]
 8007070:	685b      	ldreq	r3, [r3, #4]
 8007072:	6063      	str	r3, [r4, #4]
 8007074:	bf04      	itt	eq
 8007076:	1852      	addeq	r2, r2, r1
 8007078:	6022      	streq	r2, [r4, #0]
 800707a:	602c      	str	r4, [r5, #0]
 800707c:	e7ec      	b.n	8007058 <_free_r+0x28>
 800707e:	461a      	mov	r2, r3
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	b10b      	cbz	r3, 8007088 <_free_r+0x58>
 8007084:	42a3      	cmp	r3, r4
 8007086:	d9fa      	bls.n	800707e <_free_r+0x4e>
 8007088:	6811      	ldr	r1, [r2, #0]
 800708a:	1855      	adds	r5, r2, r1
 800708c:	42a5      	cmp	r5, r4
 800708e:	d10b      	bne.n	80070a8 <_free_r+0x78>
 8007090:	6824      	ldr	r4, [r4, #0]
 8007092:	4421      	add	r1, r4
 8007094:	1854      	adds	r4, r2, r1
 8007096:	42a3      	cmp	r3, r4
 8007098:	6011      	str	r1, [r2, #0]
 800709a:	d1dd      	bne.n	8007058 <_free_r+0x28>
 800709c:	681c      	ldr	r4, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	6053      	str	r3, [r2, #4]
 80070a2:	4421      	add	r1, r4
 80070a4:	6011      	str	r1, [r2, #0]
 80070a6:	e7d7      	b.n	8007058 <_free_r+0x28>
 80070a8:	d902      	bls.n	80070b0 <_free_r+0x80>
 80070aa:	230c      	movs	r3, #12
 80070ac:	6003      	str	r3, [r0, #0]
 80070ae:	e7d3      	b.n	8007058 <_free_r+0x28>
 80070b0:	6825      	ldr	r5, [r4, #0]
 80070b2:	1961      	adds	r1, r4, r5
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf04      	itt	eq
 80070b8:	6819      	ldreq	r1, [r3, #0]
 80070ba:	685b      	ldreq	r3, [r3, #4]
 80070bc:	6063      	str	r3, [r4, #4]
 80070be:	bf04      	itt	eq
 80070c0:	1949      	addeq	r1, r1, r5
 80070c2:	6021      	streq	r1, [r4, #0]
 80070c4:	6054      	str	r4, [r2, #4]
 80070c6:	e7c7      	b.n	8007058 <_free_r+0x28>
 80070c8:	b003      	add	sp, #12
 80070ca:	bd30      	pop	{r4, r5, pc}
 80070cc:	2000023c 	.word	0x2000023c

080070d0 <_malloc_r>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	1ccd      	adds	r5, r1, #3
 80070d4:	f025 0503 	bic.w	r5, r5, #3
 80070d8:	3508      	adds	r5, #8
 80070da:	2d0c      	cmp	r5, #12
 80070dc:	bf38      	it	cc
 80070de:	250c      	movcc	r5, #12
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	4606      	mov	r6, r0
 80070e4:	db01      	blt.n	80070ea <_malloc_r+0x1a>
 80070e6:	42a9      	cmp	r1, r5
 80070e8:	d903      	bls.n	80070f2 <_malloc_r+0x22>
 80070ea:	230c      	movs	r3, #12
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	2000      	movs	r0, #0
 80070f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f2:	f000 fa0f 	bl	8007514 <__malloc_lock>
 80070f6:	4921      	ldr	r1, [pc, #132]	; (800717c <_malloc_r+0xac>)
 80070f8:	680a      	ldr	r2, [r1, #0]
 80070fa:	4614      	mov	r4, r2
 80070fc:	b99c      	cbnz	r4, 8007126 <_malloc_r+0x56>
 80070fe:	4f20      	ldr	r7, [pc, #128]	; (8007180 <_malloc_r+0xb0>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	b923      	cbnz	r3, 800710e <_malloc_r+0x3e>
 8007104:	4621      	mov	r1, r4
 8007106:	4630      	mov	r0, r6
 8007108:	f000 f998 	bl	800743c <_sbrk_r>
 800710c:	6038      	str	r0, [r7, #0]
 800710e:	4629      	mov	r1, r5
 8007110:	4630      	mov	r0, r6
 8007112:	f000 f993 	bl	800743c <_sbrk_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	d123      	bne.n	8007162 <_malloc_r+0x92>
 800711a:	230c      	movs	r3, #12
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	4630      	mov	r0, r6
 8007120:	f000 f9fe 	bl	8007520 <__malloc_unlock>
 8007124:	e7e3      	b.n	80070ee <_malloc_r+0x1e>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	1b5b      	subs	r3, r3, r5
 800712a:	d417      	bmi.n	800715c <_malloc_r+0x8c>
 800712c:	2b0b      	cmp	r3, #11
 800712e:	d903      	bls.n	8007138 <_malloc_r+0x68>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	441c      	add	r4, r3
 8007134:	6025      	str	r5, [r4, #0]
 8007136:	e004      	b.n	8007142 <_malloc_r+0x72>
 8007138:	6863      	ldr	r3, [r4, #4]
 800713a:	42a2      	cmp	r2, r4
 800713c:	bf0c      	ite	eq
 800713e:	600b      	streq	r3, [r1, #0]
 8007140:	6053      	strne	r3, [r2, #4]
 8007142:	4630      	mov	r0, r6
 8007144:	f000 f9ec 	bl	8007520 <__malloc_unlock>
 8007148:	f104 000b 	add.w	r0, r4, #11
 800714c:	1d23      	adds	r3, r4, #4
 800714e:	f020 0007 	bic.w	r0, r0, #7
 8007152:	1ac2      	subs	r2, r0, r3
 8007154:	d0cc      	beq.n	80070f0 <_malloc_r+0x20>
 8007156:	1a1b      	subs	r3, r3, r0
 8007158:	50a3      	str	r3, [r4, r2]
 800715a:	e7c9      	b.n	80070f0 <_malloc_r+0x20>
 800715c:	4622      	mov	r2, r4
 800715e:	6864      	ldr	r4, [r4, #4]
 8007160:	e7cc      	b.n	80070fc <_malloc_r+0x2c>
 8007162:	1cc4      	adds	r4, r0, #3
 8007164:	f024 0403 	bic.w	r4, r4, #3
 8007168:	42a0      	cmp	r0, r4
 800716a:	d0e3      	beq.n	8007134 <_malloc_r+0x64>
 800716c:	1a21      	subs	r1, r4, r0
 800716e:	4630      	mov	r0, r6
 8007170:	f000 f964 	bl	800743c <_sbrk_r>
 8007174:	3001      	adds	r0, #1
 8007176:	d1dd      	bne.n	8007134 <_malloc_r+0x64>
 8007178:	e7cf      	b.n	800711a <_malloc_r+0x4a>
 800717a:	bf00      	nop
 800717c:	2000023c 	.word	0x2000023c
 8007180:	20000240 	.word	0x20000240

08007184 <__ssputs_r>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	688e      	ldr	r6, [r1, #8]
 800718a:	429e      	cmp	r6, r3
 800718c:	4682      	mov	sl, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4690      	mov	r8, r2
 8007192:	461f      	mov	r7, r3
 8007194:	d838      	bhi.n	8007208 <__ssputs_r+0x84>
 8007196:	898a      	ldrh	r2, [r1, #12]
 8007198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800719c:	d032      	beq.n	8007204 <__ssputs_r+0x80>
 800719e:	6825      	ldr	r5, [r4, #0]
 80071a0:	6909      	ldr	r1, [r1, #16]
 80071a2:	eba5 0901 	sub.w	r9, r5, r1
 80071a6:	6965      	ldr	r5, [r4, #20]
 80071a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b0:	3301      	adds	r3, #1
 80071b2:	444b      	add	r3, r9
 80071b4:	106d      	asrs	r5, r5, #1
 80071b6:	429d      	cmp	r5, r3
 80071b8:	bf38      	it	cc
 80071ba:	461d      	movcc	r5, r3
 80071bc:	0553      	lsls	r3, r2, #21
 80071be:	d531      	bpl.n	8007224 <__ssputs_r+0xa0>
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7ff ff85 	bl	80070d0 <_malloc_r>
 80071c6:	4606      	mov	r6, r0
 80071c8:	b950      	cbnz	r0, 80071e0 <__ssputs_r+0x5c>
 80071ca:	230c      	movs	r3, #12
 80071cc:	f8ca 3000 	str.w	r3, [sl]
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e0:	6921      	ldr	r1, [r4, #16]
 80071e2:	464a      	mov	r2, r9
 80071e4:	f7ff fb88 	bl	80068f8 <memcpy>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	6126      	str	r6, [r4, #16]
 80071f6:	6165      	str	r5, [r4, #20]
 80071f8:	444e      	add	r6, r9
 80071fa:	eba5 0509 	sub.w	r5, r5, r9
 80071fe:	6026      	str	r6, [r4, #0]
 8007200:	60a5      	str	r5, [r4, #8]
 8007202:	463e      	mov	r6, r7
 8007204:	42be      	cmp	r6, r7
 8007206:	d900      	bls.n	800720a <__ssputs_r+0x86>
 8007208:	463e      	mov	r6, r7
 800720a:	4632      	mov	r2, r6
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	4641      	mov	r1, r8
 8007210:	f000 f966 	bl	80074e0 <memmove>
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	1b9b      	subs	r3, r3, r6
 800721a:	4432      	add	r2, r6
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	6022      	str	r2, [r4, #0]
 8007220:	2000      	movs	r0, #0
 8007222:	e7db      	b.n	80071dc <__ssputs_r+0x58>
 8007224:	462a      	mov	r2, r5
 8007226:	f000 f981 	bl	800752c <_realloc_r>
 800722a:	4606      	mov	r6, r0
 800722c:	2800      	cmp	r0, #0
 800722e:	d1e1      	bne.n	80071f4 <__ssputs_r+0x70>
 8007230:	6921      	ldr	r1, [r4, #16]
 8007232:	4650      	mov	r0, sl
 8007234:	f7ff fefc 	bl	8007030 <_free_r>
 8007238:	e7c7      	b.n	80071ca <__ssputs_r+0x46>
	...

0800723c <_svfiprintf_r>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	4698      	mov	r8, r3
 8007242:	898b      	ldrh	r3, [r1, #12]
 8007244:	061b      	lsls	r3, r3, #24
 8007246:	b09d      	sub	sp, #116	; 0x74
 8007248:	4607      	mov	r7, r0
 800724a:	460d      	mov	r5, r1
 800724c:	4614      	mov	r4, r2
 800724e:	d50e      	bpl.n	800726e <_svfiprintf_r+0x32>
 8007250:	690b      	ldr	r3, [r1, #16]
 8007252:	b963      	cbnz	r3, 800726e <_svfiprintf_r+0x32>
 8007254:	2140      	movs	r1, #64	; 0x40
 8007256:	f7ff ff3b 	bl	80070d0 <_malloc_r>
 800725a:	6028      	str	r0, [r5, #0]
 800725c:	6128      	str	r0, [r5, #16]
 800725e:	b920      	cbnz	r0, 800726a <_svfiprintf_r+0x2e>
 8007260:	230c      	movs	r3, #12
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	f04f 30ff 	mov.w	r0, #4294967295
 8007268:	e0d1      	b.n	800740e <_svfiprintf_r+0x1d2>
 800726a:	2340      	movs	r3, #64	; 0x40
 800726c:	616b      	str	r3, [r5, #20]
 800726e:	2300      	movs	r3, #0
 8007270:	9309      	str	r3, [sp, #36]	; 0x24
 8007272:	2320      	movs	r3, #32
 8007274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007278:	f8cd 800c 	str.w	r8, [sp, #12]
 800727c:	2330      	movs	r3, #48	; 0x30
 800727e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007428 <_svfiprintf_r+0x1ec>
 8007282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007286:	f04f 0901 	mov.w	r9, #1
 800728a:	4623      	mov	r3, r4
 800728c:	469a      	mov	sl, r3
 800728e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007292:	b10a      	cbz	r2, 8007298 <_svfiprintf_r+0x5c>
 8007294:	2a25      	cmp	r2, #37	; 0x25
 8007296:	d1f9      	bne.n	800728c <_svfiprintf_r+0x50>
 8007298:	ebba 0b04 	subs.w	fp, sl, r4
 800729c:	d00b      	beq.n	80072b6 <_svfiprintf_r+0x7a>
 800729e:	465b      	mov	r3, fp
 80072a0:	4622      	mov	r2, r4
 80072a2:	4629      	mov	r1, r5
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff ff6d 	bl	8007184 <__ssputs_r>
 80072aa:	3001      	adds	r0, #1
 80072ac:	f000 80aa 	beq.w	8007404 <_svfiprintf_r+0x1c8>
 80072b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b2:	445a      	add	r2, fp
 80072b4:	9209      	str	r2, [sp, #36]	; 0x24
 80072b6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80a2 	beq.w	8007404 <_svfiprintf_r+0x1c8>
 80072c0:	2300      	movs	r3, #0
 80072c2:	f04f 32ff 	mov.w	r2, #4294967295
 80072c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ca:	f10a 0a01 	add.w	sl, sl, #1
 80072ce:	9304      	str	r3, [sp, #16]
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072d6:	931a      	str	r3, [sp, #104]	; 0x68
 80072d8:	4654      	mov	r4, sl
 80072da:	2205      	movs	r2, #5
 80072dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e0:	4851      	ldr	r0, [pc, #324]	; (8007428 <_svfiprintf_r+0x1ec>)
 80072e2:	f7f8 ff85 	bl	80001f0 <memchr>
 80072e6:	9a04      	ldr	r2, [sp, #16]
 80072e8:	b9d8      	cbnz	r0, 8007322 <_svfiprintf_r+0xe6>
 80072ea:	06d0      	lsls	r0, r2, #27
 80072ec:	bf44      	itt	mi
 80072ee:	2320      	movmi	r3, #32
 80072f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f4:	0711      	lsls	r1, r2, #28
 80072f6:	bf44      	itt	mi
 80072f8:	232b      	movmi	r3, #43	; 0x2b
 80072fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007302:	2b2a      	cmp	r3, #42	; 0x2a
 8007304:	d015      	beq.n	8007332 <_svfiprintf_r+0xf6>
 8007306:	9a07      	ldr	r2, [sp, #28]
 8007308:	4654      	mov	r4, sl
 800730a:	2000      	movs	r0, #0
 800730c:	f04f 0c0a 	mov.w	ip, #10
 8007310:	4621      	mov	r1, r4
 8007312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007316:	3b30      	subs	r3, #48	; 0x30
 8007318:	2b09      	cmp	r3, #9
 800731a:	d94e      	bls.n	80073ba <_svfiprintf_r+0x17e>
 800731c:	b1b0      	cbz	r0, 800734c <_svfiprintf_r+0x110>
 800731e:	9207      	str	r2, [sp, #28]
 8007320:	e014      	b.n	800734c <_svfiprintf_r+0x110>
 8007322:	eba0 0308 	sub.w	r3, r0, r8
 8007326:	fa09 f303 	lsl.w	r3, r9, r3
 800732a:	4313      	orrs	r3, r2
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	46a2      	mov	sl, r4
 8007330:	e7d2      	b.n	80072d8 <_svfiprintf_r+0x9c>
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	1d19      	adds	r1, r3, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	9103      	str	r1, [sp, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	bfbb      	ittet	lt
 800733e:	425b      	neglt	r3, r3
 8007340:	f042 0202 	orrlt.w	r2, r2, #2
 8007344:	9307      	strge	r3, [sp, #28]
 8007346:	9307      	strlt	r3, [sp, #28]
 8007348:	bfb8      	it	lt
 800734a:	9204      	strlt	r2, [sp, #16]
 800734c:	7823      	ldrb	r3, [r4, #0]
 800734e:	2b2e      	cmp	r3, #46	; 0x2e
 8007350:	d10c      	bne.n	800736c <_svfiprintf_r+0x130>
 8007352:	7863      	ldrb	r3, [r4, #1]
 8007354:	2b2a      	cmp	r3, #42	; 0x2a
 8007356:	d135      	bne.n	80073c4 <_svfiprintf_r+0x188>
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	1d1a      	adds	r2, r3, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	9203      	str	r2, [sp, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	bfb8      	it	lt
 8007364:	f04f 33ff 	movlt.w	r3, #4294967295
 8007368:	3402      	adds	r4, #2
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007438 <_svfiprintf_r+0x1fc>
 8007370:	7821      	ldrb	r1, [r4, #0]
 8007372:	2203      	movs	r2, #3
 8007374:	4650      	mov	r0, sl
 8007376:	f7f8 ff3b 	bl	80001f0 <memchr>
 800737a:	b140      	cbz	r0, 800738e <_svfiprintf_r+0x152>
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	eba0 000a 	sub.w	r0, r0, sl
 8007382:	fa03 f000 	lsl.w	r0, r3, r0
 8007386:	9b04      	ldr	r3, [sp, #16]
 8007388:	4303      	orrs	r3, r0
 800738a:	3401      	adds	r4, #1
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007392:	4826      	ldr	r0, [pc, #152]	; (800742c <_svfiprintf_r+0x1f0>)
 8007394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007398:	2206      	movs	r2, #6
 800739a:	f7f8 ff29 	bl	80001f0 <memchr>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d038      	beq.n	8007414 <_svfiprintf_r+0x1d8>
 80073a2:	4b23      	ldr	r3, [pc, #140]	; (8007430 <_svfiprintf_r+0x1f4>)
 80073a4:	bb1b      	cbnz	r3, 80073ee <_svfiprintf_r+0x1b2>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	3307      	adds	r3, #7
 80073aa:	f023 0307 	bic.w	r3, r3, #7
 80073ae:	3308      	adds	r3, #8
 80073b0:	9303      	str	r3, [sp, #12]
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	4433      	add	r3, r6
 80073b6:	9309      	str	r3, [sp, #36]	; 0x24
 80073b8:	e767      	b.n	800728a <_svfiprintf_r+0x4e>
 80073ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80073be:	460c      	mov	r4, r1
 80073c0:	2001      	movs	r0, #1
 80073c2:	e7a5      	b.n	8007310 <_svfiprintf_r+0xd4>
 80073c4:	2300      	movs	r3, #0
 80073c6:	3401      	adds	r4, #1
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	4619      	mov	r1, r3
 80073cc:	f04f 0c0a 	mov.w	ip, #10
 80073d0:	4620      	mov	r0, r4
 80073d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d6:	3a30      	subs	r2, #48	; 0x30
 80073d8:	2a09      	cmp	r2, #9
 80073da:	d903      	bls.n	80073e4 <_svfiprintf_r+0x1a8>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0c5      	beq.n	800736c <_svfiprintf_r+0x130>
 80073e0:	9105      	str	r1, [sp, #20]
 80073e2:	e7c3      	b.n	800736c <_svfiprintf_r+0x130>
 80073e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073e8:	4604      	mov	r4, r0
 80073ea:	2301      	movs	r3, #1
 80073ec:	e7f0      	b.n	80073d0 <_svfiprintf_r+0x194>
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <_svfiprintf_r+0x1f8>)
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	4638      	mov	r0, r7
 80073fa:	f7fe f80f 	bl	800541c <_printf_float>
 80073fe:	1c42      	adds	r2, r0, #1
 8007400:	4606      	mov	r6, r0
 8007402:	d1d6      	bne.n	80073b2 <_svfiprintf_r+0x176>
 8007404:	89ab      	ldrh	r3, [r5, #12]
 8007406:	065b      	lsls	r3, r3, #25
 8007408:	f53f af2c 	bmi.w	8007264 <_svfiprintf_r+0x28>
 800740c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800740e:	b01d      	add	sp, #116	; 0x74
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	ab03      	add	r3, sp, #12
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	462a      	mov	r2, r5
 800741a:	4b06      	ldr	r3, [pc, #24]	; (8007434 <_svfiprintf_r+0x1f8>)
 800741c:	a904      	add	r1, sp, #16
 800741e:	4638      	mov	r0, r7
 8007420:	f7fe faa0 	bl	8005964 <_printf_i>
 8007424:	e7eb      	b.n	80073fe <_svfiprintf_r+0x1c2>
 8007426:	bf00      	nop
 8007428:	0800abb4 	.word	0x0800abb4
 800742c:	0800abbe 	.word	0x0800abbe
 8007430:	0800541d 	.word	0x0800541d
 8007434:	08007185 	.word	0x08007185
 8007438:	0800abba 	.word	0x0800abba

0800743c <_sbrk_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_sbrk_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fb fcda 	bl	8002e00 <_sbrk>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_sbrk_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_sbrk_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20000368 	.word	0x20000368

0800745c <__assert_func>:
 800745c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800745e:	4614      	mov	r4, r2
 8007460:	461a      	mov	r2, r3
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <__assert_func+0x2c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4605      	mov	r5, r0
 8007468:	68d8      	ldr	r0, [r3, #12]
 800746a:	b14c      	cbz	r4, 8007480 <__assert_func+0x24>
 800746c:	4b07      	ldr	r3, [pc, #28]	; (800748c <__assert_func+0x30>)
 800746e:	9100      	str	r1, [sp, #0]
 8007470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007474:	4906      	ldr	r1, [pc, #24]	; (8007490 <__assert_func+0x34>)
 8007476:	462b      	mov	r3, r5
 8007478:	f000 f80e 	bl	8007498 <fiprintf>
 800747c:	f000 faa4 	bl	80079c8 <abort>
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <__assert_func+0x38>)
 8007482:	461c      	mov	r4, r3
 8007484:	e7f3      	b.n	800746e <__assert_func+0x12>
 8007486:	bf00      	nop
 8007488:	20000024 	.word	0x20000024
 800748c:	0800abc5 	.word	0x0800abc5
 8007490:	0800abd2 	.word	0x0800abd2
 8007494:	0800ac00 	.word	0x0800ac00

08007498 <fiprintf>:
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	b503      	push	{r0, r1, lr}
 800749c:	4601      	mov	r1, r0
 800749e:	ab03      	add	r3, sp, #12
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <fiprintf+0x20>)
 80074a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a6:	6800      	ldr	r0, [r0, #0]
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	f000 f88f 	bl	80075cc <_vfiprintf_r>
 80074ae:	b002      	add	sp, #8
 80074b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074b4:	b003      	add	sp, #12
 80074b6:	4770      	bx	lr
 80074b8:	20000024 	.word	0x20000024

080074bc <__ascii_mbtowc>:
 80074bc:	b082      	sub	sp, #8
 80074be:	b901      	cbnz	r1, 80074c2 <__ascii_mbtowc+0x6>
 80074c0:	a901      	add	r1, sp, #4
 80074c2:	b142      	cbz	r2, 80074d6 <__ascii_mbtowc+0x1a>
 80074c4:	b14b      	cbz	r3, 80074da <__ascii_mbtowc+0x1e>
 80074c6:	7813      	ldrb	r3, [r2, #0]
 80074c8:	600b      	str	r3, [r1, #0]
 80074ca:	7812      	ldrb	r2, [r2, #0]
 80074cc:	1e10      	subs	r0, r2, #0
 80074ce:	bf18      	it	ne
 80074d0:	2001      	movne	r0, #1
 80074d2:	b002      	add	sp, #8
 80074d4:	4770      	bx	lr
 80074d6:	4610      	mov	r0, r2
 80074d8:	e7fb      	b.n	80074d2 <__ascii_mbtowc+0x16>
 80074da:	f06f 0001 	mvn.w	r0, #1
 80074de:	e7f8      	b.n	80074d2 <__ascii_mbtowc+0x16>

080074e0 <memmove>:
 80074e0:	4288      	cmp	r0, r1
 80074e2:	b510      	push	{r4, lr}
 80074e4:	eb01 0402 	add.w	r4, r1, r2
 80074e8:	d902      	bls.n	80074f0 <memmove+0x10>
 80074ea:	4284      	cmp	r4, r0
 80074ec:	4623      	mov	r3, r4
 80074ee:	d807      	bhi.n	8007500 <memmove+0x20>
 80074f0:	1e43      	subs	r3, r0, #1
 80074f2:	42a1      	cmp	r1, r4
 80074f4:	d008      	beq.n	8007508 <memmove+0x28>
 80074f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074fe:	e7f8      	b.n	80074f2 <memmove+0x12>
 8007500:	4402      	add	r2, r0
 8007502:	4601      	mov	r1, r0
 8007504:	428a      	cmp	r2, r1
 8007506:	d100      	bne.n	800750a <memmove+0x2a>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800750e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007512:	e7f7      	b.n	8007504 <memmove+0x24>

08007514 <__malloc_lock>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__malloc_lock+0x8>)
 8007516:	f000 bc17 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 800751a:	bf00      	nop
 800751c:	20000370 	.word	0x20000370

08007520 <__malloc_unlock>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__malloc_unlock+0x8>)
 8007522:	f000 bc12 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007526:	bf00      	nop
 8007528:	20000370 	.word	0x20000370

0800752c <_realloc_r>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	4607      	mov	r7, r0
 8007530:	4614      	mov	r4, r2
 8007532:	460e      	mov	r6, r1
 8007534:	b921      	cbnz	r1, 8007540 <_realloc_r+0x14>
 8007536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800753a:	4611      	mov	r1, r2
 800753c:	f7ff bdc8 	b.w	80070d0 <_malloc_r>
 8007540:	b922      	cbnz	r2, 800754c <_realloc_r+0x20>
 8007542:	f7ff fd75 	bl	8007030 <_free_r>
 8007546:	4625      	mov	r5, r4
 8007548:	4628      	mov	r0, r5
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	f000 fc62 	bl	8007e14 <_malloc_usable_size_r>
 8007550:	42a0      	cmp	r0, r4
 8007552:	d20f      	bcs.n	8007574 <_realloc_r+0x48>
 8007554:	4621      	mov	r1, r4
 8007556:	4638      	mov	r0, r7
 8007558:	f7ff fdba 	bl	80070d0 <_malloc_r>
 800755c:	4605      	mov	r5, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d0f2      	beq.n	8007548 <_realloc_r+0x1c>
 8007562:	4631      	mov	r1, r6
 8007564:	4622      	mov	r2, r4
 8007566:	f7ff f9c7 	bl	80068f8 <memcpy>
 800756a:	4631      	mov	r1, r6
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff fd5f 	bl	8007030 <_free_r>
 8007572:	e7e9      	b.n	8007548 <_realloc_r+0x1c>
 8007574:	4635      	mov	r5, r6
 8007576:	e7e7      	b.n	8007548 <_realloc_r+0x1c>

08007578 <__sfputc_r>:
 8007578:	6893      	ldr	r3, [r2, #8]
 800757a:	3b01      	subs	r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	b410      	push	{r4}
 8007580:	6093      	str	r3, [r2, #8]
 8007582:	da08      	bge.n	8007596 <__sfputc_r+0x1e>
 8007584:	6994      	ldr	r4, [r2, #24]
 8007586:	42a3      	cmp	r3, r4
 8007588:	db01      	blt.n	800758e <__sfputc_r+0x16>
 800758a:	290a      	cmp	r1, #10
 800758c:	d103      	bne.n	8007596 <__sfputc_r+0x1e>
 800758e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007592:	f000 b94b 	b.w	800782c <__swbuf_r>
 8007596:	6813      	ldr	r3, [r2, #0]
 8007598:	1c58      	adds	r0, r3, #1
 800759a:	6010      	str	r0, [r2, #0]
 800759c:	7019      	strb	r1, [r3, #0]
 800759e:	4608      	mov	r0, r1
 80075a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <__sfputs_r>:
 80075a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	4614      	mov	r4, r2
 80075ae:	18d5      	adds	r5, r2, r3
 80075b0:	42ac      	cmp	r4, r5
 80075b2:	d101      	bne.n	80075b8 <__sfputs_r+0x12>
 80075b4:	2000      	movs	r0, #0
 80075b6:	e007      	b.n	80075c8 <__sfputs_r+0x22>
 80075b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075bc:	463a      	mov	r2, r7
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ffda 	bl	8007578 <__sfputc_r>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d1f3      	bne.n	80075b0 <__sfputs_r+0xa>
 80075c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075cc <_vfiprintf_r>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460d      	mov	r5, r1
 80075d2:	b09d      	sub	sp, #116	; 0x74
 80075d4:	4614      	mov	r4, r2
 80075d6:	4698      	mov	r8, r3
 80075d8:	4606      	mov	r6, r0
 80075da:	b118      	cbz	r0, 80075e4 <_vfiprintf_r+0x18>
 80075dc:	6983      	ldr	r3, [r0, #24]
 80075de:	b90b      	cbnz	r3, 80075e4 <_vfiprintf_r+0x18>
 80075e0:	f000 fb14 	bl	8007c0c <__sinit>
 80075e4:	4b89      	ldr	r3, [pc, #548]	; (800780c <_vfiprintf_r+0x240>)
 80075e6:	429d      	cmp	r5, r3
 80075e8:	d11b      	bne.n	8007622 <_vfiprintf_r+0x56>
 80075ea:	6875      	ldr	r5, [r6, #4]
 80075ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x32>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x32>
 80075f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075fa:	f000 fba5 	bl	8007d48 <__retarget_lock_acquire_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	071b      	lsls	r3, r3, #28
 8007602:	d501      	bpl.n	8007608 <_vfiprintf_r+0x3c>
 8007604:	692b      	ldr	r3, [r5, #16]
 8007606:	b9eb      	cbnz	r3, 8007644 <_vfiprintf_r+0x78>
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f96e 	bl	80078ec <__swsetup_r>
 8007610:	b1c0      	cbz	r0, 8007644 <_vfiprintf_r+0x78>
 8007612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007614:	07dc      	lsls	r4, r3, #31
 8007616:	d50e      	bpl.n	8007636 <_vfiprintf_r+0x6a>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b01d      	add	sp, #116	; 0x74
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	4b7b      	ldr	r3, [pc, #492]	; (8007810 <_vfiprintf_r+0x244>)
 8007624:	429d      	cmp	r5, r3
 8007626:	d101      	bne.n	800762c <_vfiprintf_r+0x60>
 8007628:	68b5      	ldr	r5, [r6, #8]
 800762a:	e7df      	b.n	80075ec <_vfiprintf_r+0x20>
 800762c:	4b79      	ldr	r3, [pc, #484]	; (8007814 <_vfiprintf_r+0x248>)
 800762e:	429d      	cmp	r5, r3
 8007630:	bf08      	it	eq
 8007632:	68f5      	ldreq	r5, [r6, #12]
 8007634:	e7da      	b.n	80075ec <_vfiprintf_r+0x20>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	0598      	lsls	r0, r3, #22
 800763a:	d4ed      	bmi.n	8007618 <_vfiprintf_r+0x4c>
 800763c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800763e:	f000 fb84 	bl	8007d4a <__retarget_lock_release_recursive>
 8007642:	e7e9      	b.n	8007618 <_vfiprintf_r+0x4c>
 8007644:	2300      	movs	r3, #0
 8007646:	9309      	str	r3, [sp, #36]	; 0x24
 8007648:	2320      	movs	r3, #32
 800764a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007652:	2330      	movs	r3, #48	; 0x30
 8007654:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007818 <_vfiprintf_r+0x24c>
 8007658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800765c:	f04f 0901 	mov.w	r9, #1
 8007660:	4623      	mov	r3, r4
 8007662:	469a      	mov	sl, r3
 8007664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007668:	b10a      	cbz	r2, 800766e <_vfiprintf_r+0xa2>
 800766a:	2a25      	cmp	r2, #37	; 0x25
 800766c:	d1f9      	bne.n	8007662 <_vfiprintf_r+0x96>
 800766e:	ebba 0b04 	subs.w	fp, sl, r4
 8007672:	d00b      	beq.n	800768c <_vfiprintf_r+0xc0>
 8007674:	465b      	mov	r3, fp
 8007676:	4622      	mov	r2, r4
 8007678:	4629      	mov	r1, r5
 800767a:	4630      	mov	r0, r6
 800767c:	f7ff ff93 	bl	80075a6 <__sfputs_r>
 8007680:	3001      	adds	r0, #1
 8007682:	f000 80aa 	beq.w	80077da <_vfiprintf_r+0x20e>
 8007686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007688:	445a      	add	r2, fp
 800768a:	9209      	str	r2, [sp, #36]	; 0x24
 800768c:	f89a 3000 	ldrb.w	r3, [sl]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80a2 	beq.w	80077da <_vfiprintf_r+0x20e>
 8007696:	2300      	movs	r3, #0
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a0:	f10a 0a01 	add.w	sl, sl, #1
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	9307      	str	r3, [sp, #28]
 80076a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ac:	931a      	str	r3, [sp, #104]	; 0x68
 80076ae:	4654      	mov	r4, sl
 80076b0:	2205      	movs	r2, #5
 80076b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b6:	4858      	ldr	r0, [pc, #352]	; (8007818 <_vfiprintf_r+0x24c>)
 80076b8:	f7f8 fd9a 	bl	80001f0 <memchr>
 80076bc:	9a04      	ldr	r2, [sp, #16]
 80076be:	b9d8      	cbnz	r0, 80076f8 <_vfiprintf_r+0x12c>
 80076c0:	06d1      	lsls	r1, r2, #27
 80076c2:	bf44      	itt	mi
 80076c4:	2320      	movmi	r3, #32
 80076c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ca:	0713      	lsls	r3, r2, #28
 80076cc:	bf44      	itt	mi
 80076ce:	232b      	movmi	r3, #43	; 0x2b
 80076d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d4:	f89a 3000 	ldrb.w	r3, [sl]
 80076d8:	2b2a      	cmp	r3, #42	; 0x2a
 80076da:	d015      	beq.n	8007708 <_vfiprintf_r+0x13c>
 80076dc:	9a07      	ldr	r2, [sp, #28]
 80076de:	4654      	mov	r4, sl
 80076e0:	2000      	movs	r0, #0
 80076e2:	f04f 0c0a 	mov.w	ip, #10
 80076e6:	4621      	mov	r1, r4
 80076e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ec:	3b30      	subs	r3, #48	; 0x30
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d94e      	bls.n	8007790 <_vfiprintf_r+0x1c4>
 80076f2:	b1b0      	cbz	r0, 8007722 <_vfiprintf_r+0x156>
 80076f4:	9207      	str	r2, [sp, #28]
 80076f6:	e014      	b.n	8007722 <_vfiprintf_r+0x156>
 80076f8:	eba0 0308 	sub.w	r3, r0, r8
 80076fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	9304      	str	r3, [sp, #16]
 8007704:	46a2      	mov	sl, r4
 8007706:	e7d2      	b.n	80076ae <_vfiprintf_r+0xe2>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	1d19      	adds	r1, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	9103      	str	r1, [sp, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	bfbb      	ittet	lt
 8007714:	425b      	neglt	r3, r3
 8007716:	f042 0202 	orrlt.w	r2, r2, #2
 800771a:	9307      	strge	r3, [sp, #28]
 800771c:	9307      	strlt	r3, [sp, #28]
 800771e:	bfb8      	it	lt
 8007720:	9204      	strlt	r2, [sp, #16]
 8007722:	7823      	ldrb	r3, [r4, #0]
 8007724:	2b2e      	cmp	r3, #46	; 0x2e
 8007726:	d10c      	bne.n	8007742 <_vfiprintf_r+0x176>
 8007728:	7863      	ldrb	r3, [r4, #1]
 800772a:	2b2a      	cmp	r3, #42	; 0x2a
 800772c:	d135      	bne.n	800779a <_vfiprintf_r+0x1ce>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	1d1a      	adds	r2, r3, #4
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	9203      	str	r2, [sp, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bfb8      	it	lt
 800773a:	f04f 33ff 	movlt.w	r3, #4294967295
 800773e:	3402      	adds	r4, #2
 8007740:	9305      	str	r3, [sp, #20]
 8007742:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007828 <_vfiprintf_r+0x25c>
 8007746:	7821      	ldrb	r1, [r4, #0]
 8007748:	2203      	movs	r2, #3
 800774a:	4650      	mov	r0, sl
 800774c:	f7f8 fd50 	bl	80001f0 <memchr>
 8007750:	b140      	cbz	r0, 8007764 <_vfiprintf_r+0x198>
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	eba0 000a 	sub.w	r0, r0, sl
 8007758:	fa03 f000 	lsl.w	r0, r3, r0
 800775c:	9b04      	ldr	r3, [sp, #16]
 800775e:	4303      	orrs	r3, r0
 8007760:	3401      	adds	r4, #1
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	482c      	ldr	r0, [pc, #176]	; (800781c <_vfiprintf_r+0x250>)
 800776a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800776e:	2206      	movs	r2, #6
 8007770:	f7f8 fd3e 	bl	80001f0 <memchr>
 8007774:	2800      	cmp	r0, #0
 8007776:	d03f      	beq.n	80077f8 <_vfiprintf_r+0x22c>
 8007778:	4b29      	ldr	r3, [pc, #164]	; (8007820 <_vfiprintf_r+0x254>)
 800777a:	bb1b      	cbnz	r3, 80077c4 <_vfiprintf_r+0x1f8>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	3307      	adds	r3, #7
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778a:	443b      	add	r3, r7
 800778c:	9309      	str	r3, [sp, #36]	; 0x24
 800778e:	e767      	b.n	8007660 <_vfiprintf_r+0x94>
 8007790:	fb0c 3202 	mla	r2, ip, r2, r3
 8007794:	460c      	mov	r4, r1
 8007796:	2001      	movs	r0, #1
 8007798:	e7a5      	b.n	80076e6 <_vfiprintf_r+0x11a>
 800779a:	2300      	movs	r3, #0
 800779c:	3401      	adds	r4, #1
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	4619      	mov	r1, r3
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	4620      	mov	r0, r4
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	3a30      	subs	r2, #48	; 0x30
 80077ae:	2a09      	cmp	r2, #9
 80077b0:	d903      	bls.n	80077ba <_vfiprintf_r+0x1ee>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c5      	beq.n	8007742 <_vfiprintf_r+0x176>
 80077b6:	9105      	str	r1, [sp, #20]
 80077b8:	e7c3      	b.n	8007742 <_vfiprintf_r+0x176>
 80077ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80077be:	4604      	mov	r4, r0
 80077c0:	2301      	movs	r3, #1
 80077c2:	e7f0      	b.n	80077a6 <_vfiprintf_r+0x1da>
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4b16      	ldr	r3, [pc, #88]	; (8007824 <_vfiprintf_r+0x258>)
 80077cc:	a904      	add	r1, sp, #16
 80077ce:	4630      	mov	r0, r6
 80077d0:	f7fd fe24 	bl	800541c <_printf_float>
 80077d4:	4607      	mov	r7, r0
 80077d6:	1c78      	adds	r0, r7, #1
 80077d8:	d1d6      	bne.n	8007788 <_vfiprintf_r+0x1bc>
 80077da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077dc:	07d9      	lsls	r1, r3, #31
 80077de:	d405      	bmi.n	80077ec <_vfiprintf_r+0x220>
 80077e0:	89ab      	ldrh	r3, [r5, #12]
 80077e2:	059a      	lsls	r2, r3, #22
 80077e4:	d402      	bmi.n	80077ec <_vfiprintf_r+0x220>
 80077e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e8:	f000 faaf 	bl	8007d4a <__retarget_lock_release_recursive>
 80077ec:	89ab      	ldrh	r3, [r5, #12]
 80077ee:	065b      	lsls	r3, r3, #25
 80077f0:	f53f af12 	bmi.w	8007618 <_vfiprintf_r+0x4c>
 80077f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077f6:	e711      	b.n	800761c <_vfiprintf_r+0x50>
 80077f8:	ab03      	add	r3, sp, #12
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	462a      	mov	r2, r5
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <_vfiprintf_r+0x258>)
 8007800:	a904      	add	r1, sp, #16
 8007802:	4630      	mov	r0, r6
 8007804:	f7fe f8ae 	bl	8005964 <_printf_i>
 8007808:	e7e4      	b.n	80077d4 <_vfiprintf_r+0x208>
 800780a:	bf00      	nop
 800780c:	0800ad2c 	.word	0x0800ad2c
 8007810:	0800ad4c 	.word	0x0800ad4c
 8007814:	0800ad0c 	.word	0x0800ad0c
 8007818:	0800abb4 	.word	0x0800abb4
 800781c:	0800abbe 	.word	0x0800abbe
 8007820:	0800541d 	.word	0x0800541d
 8007824:	080075a7 	.word	0x080075a7
 8007828:	0800abba 	.word	0x0800abba

0800782c <__swbuf_r>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	460e      	mov	r6, r1
 8007830:	4614      	mov	r4, r2
 8007832:	4605      	mov	r5, r0
 8007834:	b118      	cbz	r0, 800783e <__swbuf_r+0x12>
 8007836:	6983      	ldr	r3, [r0, #24]
 8007838:	b90b      	cbnz	r3, 800783e <__swbuf_r+0x12>
 800783a:	f000 f9e7 	bl	8007c0c <__sinit>
 800783e:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <__swbuf_r+0x98>)
 8007840:	429c      	cmp	r4, r3
 8007842:	d12b      	bne.n	800789c <__swbuf_r+0x70>
 8007844:	686c      	ldr	r4, [r5, #4]
 8007846:	69a3      	ldr	r3, [r4, #24]
 8007848:	60a3      	str	r3, [r4, #8]
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	071a      	lsls	r2, r3, #28
 800784e:	d52f      	bpl.n	80078b0 <__swbuf_r+0x84>
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	b36b      	cbz	r3, 80078b0 <__swbuf_r+0x84>
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	6820      	ldr	r0, [r4, #0]
 8007858:	1ac0      	subs	r0, r0, r3
 800785a:	6963      	ldr	r3, [r4, #20]
 800785c:	b2f6      	uxtb	r6, r6
 800785e:	4283      	cmp	r3, r0
 8007860:	4637      	mov	r7, r6
 8007862:	dc04      	bgt.n	800786e <__swbuf_r+0x42>
 8007864:	4621      	mov	r1, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f000 f93c 	bl	8007ae4 <_fflush_r>
 800786c:	bb30      	cbnz	r0, 80078bc <__swbuf_r+0x90>
 800786e:	68a3      	ldr	r3, [r4, #8]
 8007870:	3b01      	subs	r3, #1
 8007872:	60a3      	str	r3, [r4, #8]
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	6022      	str	r2, [r4, #0]
 800787a:	701e      	strb	r6, [r3, #0]
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	3001      	adds	r0, #1
 8007880:	4283      	cmp	r3, r0
 8007882:	d004      	beq.n	800788e <__swbuf_r+0x62>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	07db      	lsls	r3, r3, #31
 8007888:	d506      	bpl.n	8007898 <__swbuf_r+0x6c>
 800788a:	2e0a      	cmp	r6, #10
 800788c:	d104      	bne.n	8007898 <__swbuf_r+0x6c>
 800788e:	4621      	mov	r1, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f000 f927 	bl	8007ae4 <_fflush_r>
 8007896:	b988      	cbnz	r0, 80078bc <__swbuf_r+0x90>
 8007898:	4638      	mov	r0, r7
 800789a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <__swbuf_r+0x9c>)
 800789e:	429c      	cmp	r4, r3
 80078a0:	d101      	bne.n	80078a6 <__swbuf_r+0x7a>
 80078a2:	68ac      	ldr	r4, [r5, #8]
 80078a4:	e7cf      	b.n	8007846 <__swbuf_r+0x1a>
 80078a6:	4b09      	ldr	r3, [pc, #36]	; (80078cc <__swbuf_r+0xa0>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	bf08      	it	eq
 80078ac:	68ec      	ldreq	r4, [r5, #12]
 80078ae:	e7ca      	b.n	8007846 <__swbuf_r+0x1a>
 80078b0:	4621      	mov	r1, r4
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 f81a 	bl	80078ec <__swsetup_r>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d0cb      	beq.n	8007854 <__swbuf_r+0x28>
 80078bc:	f04f 37ff 	mov.w	r7, #4294967295
 80078c0:	e7ea      	b.n	8007898 <__swbuf_r+0x6c>
 80078c2:	bf00      	nop
 80078c4:	0800ad2c 	.word	0x0800ad2c
 80078c8:	0800ad4c 	.word	0x0800ad4c
 80078cc:	0800ad0c 	.word	0x0800ad0c

080078d0 <__ascii_wctomb>:
 80078d0:	b149      	cbz	r1, 80078e6 <__ascii_wctomb+0x16>
 80078d2:	2aff      	cmp	r2, #255	; 0xff
 80078d4:	bf85      	ittet	hi
 80078d6:	238a      	movhi	r3, #138	; 0x8a
 80078d8:	6003      	strhi	r3, [r0, #0]
 80078da:	700a      	strbls	r2, [r1, #0]
 80078dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80078e0:	bf98      	it	ls
 80078e2:	2001      	movls	r0, #1
 80078e4:	4770      	bx	lr
 80078e6:	4608      	mov	r0, r1
 80078e8:	4770      	bx	lr
	...

080078ec <__swsetup_r>:
 80078ec:	4b32      	ldr	r3, [pc, #200]	; (80079b8 <__swsetup_r+0xcc>)
 80078ee:	b570      	push	{r4, r5, r6, lr}
 80078f0:	681d      	ldr	r5, [r3, #0]
 80078f2:	4606      	mov	r6, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	b125      	cbz	r5, 8007902 <__swsetup_r+0x16>
 80078f8:	69ab      	ldr	r3, [r5, #24]
 80078fa:	b913      	cbnz	r3, 8007902 <__swsetup_r+0x16>
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f985 	bl	8007c0c <__sinit>
 8007902:	4b2e      	ldr	r3, [pc, #184]	; (80079bc <__swsetup_r+0xd0>)
 8007904:	429c      	cmp	r4, r3
 8007906:	d10f      	bne.n	8007928 <__swsetup_r+0x3c>
 8007908:	686c      	ldr	r4, [r5, #4]
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007910:	0719      	lsls	r1, r3, #28
 8007912:	d42c      	bmi.n	800796e <__swsetup_r+0x82>
 8007914:	06dd      	lsls	r5, r3, #27
 8007916:	d411      	bmi.n	800793c <__swsetup_r+0x50>
 8007918:	2309      	movs	r3, #9
 800791a:	6033      	str	r3, [r6, #0]
 800791c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	e03e      	b.n	80079a6 <__swsetup_r+0xba>
 8007928:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <__swsetup_r+0xd4>)
 800792a:	429c      	cmp	r4, r3
 800792c:	d101      	bne.n	8007932 <__swsetup_r+0x46>
 800792e:	68ac      	ldr	r4, [r5, #8]
 8007930:	e7eb      	b.n	800790a <__swsetup_r+0x1e>
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <__swsetup_r+0xd8>)
 8007934:	429c      	cmp	r4, r3
 8007936:	bf08      	it	eq
 8007938:	68ec      	ldreq	r4, [r5, #12]
 800793a:	e7e6      	b.n	800790a <__swsetup_r+0x1e>
 800793c:	0758      	lsls	r0, r3, #29
 800793e:	d512      	bpl.n	8007966 <__swsetup_r+0x7a>
 8007940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007942:	b141      	cbz	r1, 8007956 <__swsetup_r+0x6a>
 8007944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007948:	4299      	cmp	r1, r3
 800794a:	d002      	beq.n	8007952 <__swsetup_r+0x66>
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff fb6f 	bl	8007030 <_free_r>
 8007952:	2300      	movs	r3, #0
 8007954:	6363      	str	r3, [r4, #52]	; 0x34
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	2300      	movs	r3, #0
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f043 0308 	orr.w	r3, r3, #8
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	b94b      	cbnz	r3, 8007986 <__swsetup_r+0x9a>
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800797c:	d003      	beq.n	8007986 <__swsetup_r+0x9a>
 800797e:	4621      	mov	r1, r4
 8007980:	4630      	mov	r0, r6
 8007982:	f000 fa07 	bl	8007d94 <__smakebuf_r>
 8007986:	89a0      	ldrh	r0, [r4, #12]
 8007988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800798c:	f010 0301 	ands.w	r3, r0, #1
 8007990:	d00a      	beq.n	80079a8 <__swsetup_r+0xbc>
 8007992:	2300      	movs	r3, #0
 8007994:	60a3      	str	r3, [r4, #8]
 8007996:	6963      	ldr	r3, [r4, #20]
 8007998:	425b      	negs	r3, r3
 800799a:	61a3      	str	r3, [r4, #24]
 800799c:	6923      	ldr	r3, [r4, #16]
 800799e:	b943      	cbnz	r3, 80079b2 <__swsetup_r+0xc6>
 80079a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079a4:	d1ba      	bne.n	800791c <__swsetup_r+0x30>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	0781      	lsls	r1, r0, #30
 80079aa:	bf58      	it	pl
 80079ac:	6963      	ldrpl	r3, [r4, #20]
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	e7f4      	b.n	800799c <__swsetup_r+0xb0>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e7f7      	b.n	80079a6 <__swsetup_r+0xba>
 80079b6:	bf00      	nop
 80079b8:	20000024 	.word	0x20000024
 80079bc:	0800ad2c 	.word	0x0800ad2c
 80079c0:	0800ad4c 	.word	0x0800ad4c
 80079c4:	0800ad0c 	.word	0x0800ad0c

080079c8 <abort>:
 80079c8:	b508      	push	{r3, lr}
 80079ca:	2006      	movs	r0, #6
 80079cc:	f000 fa52 	bl	8007e74 <raise>
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7fb f99d 	bl	8002d10 <_exit>
	...

080079d8 <__sflush_r>:
 80079d8:	898a      	ldrh	r2, [r1, #12]
 80079da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	4605      	mov	r5, r0
 80079e0:	0710      	lsls	r0, r2, #28
 80079e2:	460c      	mov	r4, r1
 80079e4:	d458      	bmi.n	8007a98 <__sflush_r+0xc0>
 80079e6:	684b      	ldr	r3, [r1, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc05      	bgt.n	80079f8 <__sflush_r+0x20>
 80079ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dc02      	bgt.n	80079f8 <__sflush_r+0x20>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d0f9      	beq.n	80079f2 <__sflush_r+0x1a>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a04:	682f      	ldr	r7, [r5, #0]
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	d032      	beq.n	8007a70 <__sflush_r+0x98>
 8007a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	075a      	lsls	r2, r3, #29
 8007a10:	d505      	bpl.n	8007a1e <__sflush_r+0x46>
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	1ac0      	subs	r0, r0, r3
 8007a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a18:	b10b      	cbz	r3, 8007a1e <__sflush_r+0x46>
 8007a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a1c:	1ac0      	subs	r0, r0, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4602      	mov	r2, r0
 8007a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b0      	blx	r6
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	d106      	bne.n	8007a3e <__sflush_r+0x66>
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	291d      	cmp	r1, #29
 8007a34:	d82c      	bhi.n	8007a90 <__sflush_r+0xb8>
 8007a36:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <__sflush_r+0x108>)
 8007a38:	40ca      	lsrs	r2, r1
 8007a3a:	07d6      	lsls	r6, r2, #31
 8007a3c:	d528      	bpl.n	8007a90 <__sflush_r+0xb8>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	6062      	str	r2, [r4, #4]
 8007a42:	04d9      	lsls	r1, r3, #19
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	d504      	bpl.n	8007a54 <__sflush_r+0x7c>
 8007a4a:	1c42      	adds	r2, r0, #1
 8007a4c:	d101      	bne.n	8007a52 <__sflush_r+0x7a>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b903      	cbnz	r3, 8007a54 <__sflush_r+0x7c>
 8007a52:	6560      	str	r0, [r4, #84]	; 0x54
 8007a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a56:	602f      	str	r7, [r5, #0]
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d0ca      	beq.n	80079f2 <__sflush_r+0x1a>
 8007a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a60:	4299      	cmp	r1, r3
 8007a62:	d002      	beq.n	8007a6a <__sflush_r+0x92>
 8007a64:	4628      	mov	r0, r5
 8007a66:	f7ff fae3 	bl	8007030 <_free_r>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a6e:	e7c1      	b.n	80079f4 <__sflush_r+0x1c>
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	2301      	movs	r3, #1
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b0      	blx	r6
 8007a78:	1c41      	adds	r1, r0, #1
 8007a7a:	d1c7      	bne.n	8007a0c <__sflush_r+0x34>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0c4      	beq.n	8007a0c <__sflush_r+0x34>
 8007a82:	2b1d      	cmp	r3, #29
 8007a84:	d001      	beq.n	8007a8a <__sflush_r+0xb2>
 8007a86:	2b16      	cmp	r3, #22
 8007a88:	d101      	bne.n	8007a8e <__sflush_r+0xb6>
 8007a8a:	602f      	str	r7, [r5, #0]
 8007a8c:	e7b1      	b.n	80079f2 <__sflush_r+0x1a>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	e7ad      	b.n	80079f4 <__sflush_r+0x1c>
 8007a98:	690f      	ldr	r7, [r1, #16]
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	d0a9      	beq.n	80079f2 <__sflush_r+0x1a>
 8007a9e:	0793      	lsls	r3, r2, #30
 8007aa0:	680e      	ldr	r6, [r1, #0]
 8007aa2:	bf08      	it	eq
 8007aa4:	694b      	ldreq	r3, [r1, #20]
 8007aa6:	600f      	str	r7, [r1, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	2300      	movne	r3, #0
 8007aac:	eba6 0807 	sub.w	r8, r6, r7
 8007ab0:	608b      	str	r3, [r1, #8]
 8007ab2:	f1b8 0f00 	cmp.w	r8, #0
 8007ab6:	dd9c      	ble.n	80079f2 <__sflush_r+0x1a>
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007abc:	4643      	mov	r3, r8
 8007abe:	463a      	mov	r2, r7
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b0      	blx	r6
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	dc06      	bgt.n	8007ad6 <__sflush_r+0xfe>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e78e      	b.n	80079f4 <__sflush_r+0x1c>
 8007ad6:	4407      	add	r7, r0
 8007ad8:	eba8 0800 	sub.w	r8, r8, r0
 8007adc:	e7e9      	b.n	8007ab2 <__sflush_r+0xda>
 8007ade:	bf00      	nop
 8007ae0:	20400001 	.word	0x20400001

08007ae4 <_fflush_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	690b      	ldr	r3, [r1, #16]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b913      	cbnz	r3, 8007af4 <_fflush_r+0x10>
 8007aee:	2500      	movs	r5, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	b118      	cbz	r0, 8007afe <_fflush_r+0x1a>
 8007af6:	6983      	ldr	r3, [r0, #24]
 8007af8:	b90b      	cbnz	r3, 8007afe <_fflush_r+0x1a>
 8007afa:	f000 f887 	bl	8007c0c <__sinit>
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <_fflush_r+0x6c>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d11b      	bne.n	8007b3c <_fflush_r+0x58>
 8007b04:	686c      	ldr	r4, [r5, #4]
 8007b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0ef      	beq.n	8007aee <_fflush_r+0xa>
 8007b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b10:	07d0      	lsls	r0, r2, #31
 8007b12:	d404      	bmi.n	8007b1e <_fflush_r+0x3a>
 8007b14:	0599      	lsls	r1, r3, #22
 8007b16:	d402      	bmi.n	8007b1e <_fflush_r+0x3a>
 8007b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1a:	f000 f915 	bl	8007d48 <__retarget_lock_acquire_recursive>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	4621      	mov	r1, r4
 8007b22:	f7ff ff59 	bl	80079d8 <__sflush_r>
 8007b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b28:	07da      	lsls	r2, r3, #31
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	d4e0      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	059b      	lsls	r3, r3, #22
 8007b32:	d4dd      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b36:	f000 f908 	bl	8007d4a <__retarget_lock_release_recursive>
 8007b3a:	e7d9      	b.n	8007af0 <_fflush_r+0xc>
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <_fflush_r+0x70>)
 8007b3e:	429c      	cmp	r4, r3
 8007b40:	d101      	bne.n	8007b46 <_fflush_r+0x62>
 8007b42:	68ac      	ldr	r4, [r5, #8]
 8007b44:	e7df      	b.n	8007b06 <_fflush_r+0x22>
 8007b46:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <_fflush_r+0x74>)
 8007b48:	429c      	cmp	r4, r3
 8007b4a:	bf08      	it	eq
 8007b4c:	68ec      	ldreq	r4, [r5, #12]
 8007b4e:	e7da      	b.n	8007b06 <_fflush_r+0x22>
 8007b50:	0800ad2c 	.word	0x0800ad2c
 8007b54:	0800ad4c 	.word	0x0800ad4c
 8007b58:	0800ad0c 	.word	0x0800ad0c

08007b5c <std>:
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
 8007b62:	e9c0 3300 	strd	r3, r3, [r0]
 8007b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6a:	6083      	str	r3, [r0, #8]
 8007b6c:	8181      	strh	r1, [r0, #12]
 8007b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b70:	81c2      	strh	r2, [r0, #14]
 8007b72:	6183      	str	r3, [r0, #24]
 8007b74:	4619      	mov	r1, r3
 8007b76:	2208      	movs	r2, #8
 8007b78:	305c      	adds	r0, #92	; 0x5c
 8007b7a:	f7fd fba7 	bl	80052cc <memset>
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x38>)
 8007b80:	6263      	str	r3, [r4, #36]	; 0x24
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x3c>)
 8007b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x40>)
 8007b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x44>)
 8007b8c:	6224      	str	r4, [r4, #32]
 8007b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08007ead 	.word	0x08007ead
 8007b98:	08007ecf 	.word	0x08007ecf
 8007b9c:	08007f07 	.word	0x08007f07
 8007ba0:	08007f2b 	.word	0x08007f2b

08007ba4 <_cleanup_r>:
 8007ba4:	4901      	ldr	r1, [pc, #4]	; (8007bac <_cleanup_r+0x8>)
 8007ba6:	f000 b8af 	b.w	8007d08 <_fwalk_reent>
 8007baa:	bf00      	nop
 8007bac:	08007ae5 	.word	0x08007ae5

08007bb0 <__sfmoreglue>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	1e4a      	subs	r2, r1, #1
 8007bb4:	2568      	movs	r5, #104	; 0x68
 8007bb6:	4355      	muls	r5, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bbe:	f7ff fa87 	bl	80070d0 <_malloc_r>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b140      	cbz	r0, 8007bd8 <__sfmoreglue+0x28>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bcc:	300c      	adds	r0, #12
 8007bce:	60a0      	str	r0, [r4, #8]
 8007bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd4:	f7fd fb7a 	bl	80052cc <memset>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <__sfp_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sfp_lock_acquire+0x8>)
 8007bde:	f000 b8b3 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	20000374 	.word	0x20000374

08007be8 <__sfp_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sfp_lock_release+0x8>)
 8007bea:	f000 b8ae 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20000374 	.word	0x20000374

08007bf4 <__sinit_lock_acquire>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sinit_lock_acquire+0x8>)
 8007bf6:	f000 b8a7 	b.w	8007d48 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	2000036f 	.word	0x2000036f

08007c00 <__sinit_lock_release>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__sinit_lock_release+0x8>)
 8007c02:	f000 b8a2 	b.w	8007d4a <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	2000036f 	.word	0x2000036f

08007c0c <__sinit>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7ff fff0 	bl	8007bf4 <__sinit_lock_acquire>
 8007c14:	69a3      	ldr	r3, [r4, #24]
 8007c16:	b11b      	cbz	r3, 8007c20 <__sinit+0x14>
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bff0 	b.w	8007c00 <__sinit_lock_release>
 8007c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c24:	6523      	str	r3, [r4, #80]	; 0x50
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <__sinit+0x68>)
 8007c28:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <__sinit+0x6c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	bf04      	itt	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	61a3      	streq	r3, [r4, #24]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f820 	bl	8007c7c <__sfp>
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f81c 	bl	8007c7c <__sfp>
 8007c44:	60a0      	str	r0, [r4, #8]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f818 	bl	8007c7c <__sfp>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	60e0      	str	r0, [r4, #12]
 8007c50:	2104      	movs	r1, #4
 8007c52:	6860      	ldr	r0, [r4, #4]
 8007c54:	f7ff ff82 	bl	8007b5c <std>
 8007c58:	68a0      	ldr	r0, [r4, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2109      	movs	r1, #9
 8007c5e:	f7ff ff7d 	bl	8007b5c <std>
 8007c62:	68e0      	ldr	r0, [r4, #12]
 8007c64:	2202      	movs	r2, #2
 8007c66:	2112      	movs	r1, #18
 8007c68:	f7ff ff78 	bl	8007b5c <std>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	61a3      	str	r3, [r4, #24]
 8007c70:	e7d2      	b.n	8007c18 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	0800a988 	.word	0x0800a988
 8007c78:	08007ba5 	.word	0x08007ba5

08007c7c <__sfp>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7ff ffac 	bl	8007bdc <__sfp_lock_acquire>
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <__sfp+0x84>)
 8007c86:	681e      	ldr	r6, [r3, #0]
 8007c88:	69b3      	ldr	r3, [r6, #24]
 8007c8a:	b913      	cbnz	r3, 8007c92 <__sfp+0x16>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffbd 	bl	8007c0c <__sinit>
 8007c92:	3648      	adds	r6, #72	; 0x48
 8007c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	d503      	bpl.n	8007ca4 <__sfp+0x28>
 8007c9c:	6833      	ldr	r3, [r6, #0]
 8007c9e:	b30b      	cbz	r3, 8007ce4 <__sfp+0x68>
 8007ca0:	6836      	ldr	r6, [r6, #0]
 8007ca2:	e7f7      	b.n	8007c94 <__sfp+0x18>
 8007ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ca8:	b9d5      	cbnz	r5, 8007ce0 <__sfp+0x64>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <__sfp+0x88>)
 8007cac:	60e3      	str	r3, [r4, #12]
 8007cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb4:	f000 f847 	bl	8007d46 <__retarget_lock_init_recursive>
 8007cb8:	f7ff ff96 	bl	8007be8 <__sfp_lock_release>
 8007cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	61a5      	str	r5, [r4, #24]
 8007cc8:	2208      	movs	r2, #8
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd0:	f7fd fafc 	bl	80052cc <memset>
 8007cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	3468      	adds	r4, #104	; 0x68
 8007ce2:	e7d9      	b.n	8007c98 <__sfp+0x1c>
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff62 	bl	8007bb0 <__sfmoreglue>
 8007cec:	4604      	mov	r4, r0
 8007cee:	6030      	str	r0, [r6, #0]
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1d5      	bne.n	8007ca0 <__sfp+0x24>
 8007cf4:	f7ff ff78 	bl	8007be8 <__sfp_lock_release>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	e7ee      	b.n	8007cdc <__sfp+0x60>
 8007cfe:	bf00      	nop
 8007d00:	0800a988 	.word	0x0800a988
 8007d04:	ffff0001 	.word	0xffff0001

08007d08 <_fwalk_reent>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	4688      	mov	r8, r1
 8007d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d14:	2700      	movs	r7, #0
 8007d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d1e:	d505      	bpl.n	8007d2c <_fwalk_reent+0x24>
 8007d20:	6824      	ldr	r4, [r4, #0]
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1f7      	bne.n	8007d16 <_fwalk_reent+0xe>
 8007d26:	4638      	mov	r0, r7
 8007d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2c:	89ab      	ldrh	r3, [r5, #12]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d907      	bls.n	8007d42 <_fwalk_reent+0x3a>
 8007d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d36:	3301      	adds	r3, #1
 8007d38:	d003      	beq.n	8007d42 <_fwalk_reent+0x3a>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	47c0      	blx	r8
 8007d40:	4307      	orrs	r7, r0
 8007d42:	3568      	adds	r5, #104	; 0x68
 8007d44:	e7e9      	b.n	8007d1a <_fwalk_reent+0x12>

08007d46 <__retarget_lock_init_recursive>:
 8007d46:	4770      	bx	lr

08007d48 <__retarget_lock_acquire_recursive>:
 8007d48:	4770      	bx	lr

08007d4a <__retarget_lock_release_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <__swhatbuf_r>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	460e      	mov	r6, r1
 8007d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d54:	2900      	cmp	r1, #0
 8007d56:	b096      	sub	sp, #88	; 0x58
 8007d58:	4614      	mov	r4, r2
 8007d5a:	461d      	mov	r5, r3
 8007d5c:	da07      	bge.n	8007d6e <__swhatbuf_r+0x22>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	89b3      	ldrh	r3, [r6, #12]
 8007d64:	061a      	lsls	r2, r3, #24
 8007d66:	d410      	bmi.n	8007d8a <__swhatbuf_r+0x3e>
 8007d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d6c:	e00e      	b.n	8007d8c <__swhatbuf_r+0x40>
 8007d6e:	466a      	mov	r2, sp
 8007d70:	f000 f902 	bl	8007f78 <_fstat_r>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	dbf2      	blt.n	8007d5e <__swhatbuf_r+0x12>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d82:	425a      	negs	r2, r3
 8007d84:	415a      	adcs	r2, r3
 8007d86:	602a      	str	r2, [r5, #0]
 8007d88:	e7ee      	b.n	8007d68 <__swhatbuf_r+0x1c>
 8007d8a:	2340      	movs	r3, #64	; 0x40
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	b016      	add	sp, #88	; 0x58
 8007d92:	bd70      	pop	{r4, r5, r6, pc}

08007d94 <__smakebuf_r>:
 8007d94:	898b      	ldrh	r3, [r1, #12]
 8007d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d98:	079d      	lsls	r5, r3, #30
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	d507      	bpl.n	8007db0 <__smakebuf_r+0x1c>
 8007da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	6123      	str	r3, [r4, #16]
 8007da8:	2301      	movs	r3, #1
 8007daa:	6163      	str	r3, [r4, #20]
 8007dac:	b002      	add	sp, #8
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	ab01      	add	r3, sp, #4
 8007db2:	466a      	mov	r2, sp
 8007db4:	f7ff ffca 	bl	8007d4c <__swhatbuf_r>
 8007db8:	9900      	ldr	r1, [sp, #0]
 8007dba:	4605      	mov	r5, r0
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff f987 	bl	80070d0 <_malloc_r>
 8007dc2:	b948      	cbnz	r0, 8007dd8 <__smakebuf_r+0x44>
 8007dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc8:	059a      	lsls	r2, r3, #22
 8007dca:	d4ef      	bmi.n	8007dac <__smakebuf_r+0x18>
 8007dcc:	f023 0303 	bic.w	r3, r3, #3
 8007dd0:	f043 0302 	orr.w	r3, r3, #2
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	e7e3      	b.n	8007da0 <__smakebuf_r+0xc>
 8007dd8:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <__smakebuf_r+0x7c>)
 8007dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	6020      	str	r0, [r4, #0]
 8007de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	9b00      	ldr	r3, [sp, #0]
 8007de8:	6163      	str	r3, [r4, #20]
 8007dea:	9b01      	ldr	r3, [sp, #4]
 8007dec:	6120      	str	r0, [r4, #16]
 8007dee:	b15b      	cbz	r3, 8007e08 <__smakebuf_r+0x74>
 8007df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 f8d1 	bl	8007f9c <_isatty_r>
 8007dfa:	b128      	cbz	r0, 8007e08 <__smakebuf_r+0x74>
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	81a3      	strh	r3, [r4, #12]
 8007e08:	89a0      	ldrh	r0, [r4, #12]
 8007e0a:	4305      	orrs	r5, r0
 8007e0c:	81a5      	strh	r5, [r4, #12]
 8007e0e:	e7cd      	b.n	8007dac <__smakebuf_r+0x18>
 8007e10:	08007ba5 	.word	0x08007ba5

08007e14 <_malloc_usable_size_r>:
 8007e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e18:	1f18      	subs	r0, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bfbc      	itt	lt
 8007e1e:	580b      	ldrlt	r3, [r1, r0]
 8007e20:	18c0      	addlt	r0, r0, r3
 8007e22:	4770      	bx	lr

08007e24 <_raise_r>:
 8007e24:	291f      	cmp	r1, #31
 8007e26:	b538      	push	{r3, r4, r5, lr}
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	d904      	bls.n	8007e38 <_raise_r+0x14>
 8007e2e:	2316      	movs	r3, #22
 8007e30:	6003      	str	r3, [r0, #0]
 8007e32:	f04f 30ff 	mov.w	r0, #4294967295
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e3a:	b112      	cbz	r2, 8007e42 <_raise_r+0x1e>
 8007e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e40:	b94b      	cbnz	r3, 8007e56 <_raise_r+0x32>
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f830 	bl	8007ea8 <_getpid_r>
 8007e48:	462a      	mov	r2, r5
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e52:	f000 b817 	b.w	8007e84 <_kill_r>
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d00a      	beq.n	8007e70 <_raise_r+0x4c>
 8007e5a:	1c59      	adds	r1, r3, #1
 8007e5c:	d103      	bne.n	8007e66 <_raise_r+0x42>
 8007e5e:	2316      	movs	r3, #22
 8007e60:	6003      	str	r3, [r0, #0]
 8007e62:	2001      	movs	r0, #1
 8007e64:	e7e7      	b.n	8007e36 <_raise_r+0x12>
 8007e66:	2400      	movs	r4, #0
 8007e68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	4798      	blx	r3
 8007e70:	2000      	movs	r0, #0
 8007e72:	e7e0      	b.n	8007e36 <_raise_r+0x12>

08007e74 <raise>:
 8007e74:	4b02      	ldr	r3, [pc, #8]	; (8007e80 <raise+0xc>)
 8007e76:	4601      	mov	r1, r0
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	f7ff bfd3 	b.w	8007e24 <_raise_r>
 8007e7e:	bf00      	nop
 8007e80:	20000024 	.word	0x20000024

08007e84 <_kill_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d07      	ldr	r5, [pc, #28]	; (8007ea4 <_kill_r+0x20>)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	f7fa ff2d 	bl	8002cf0 <_kill>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	d102      	bne.n	8007ea0 <_kill_r+0x1c>
 8007e9a:	682b      	ldr	r3, [r5, #0]
 8007e9c:	b103      	cbz	r3, 8007ea0 <_kill_r+0x1c>
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	bd38      	pop	{r3, r4, r5, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000368 	.word	0x20000368

08007ea8 <_getpid_r>:
 8007ea8:	f7fa bf1a 	b.w	8002ce0 <_getpid>

08007eac <__sread>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	460c      	mov	r4, r1
 8007eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb4:	f000 f894 	bl	8007fe0 <_read_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	bfab      	itete	ge
 8007ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8007ec0:	181b      	addge	r3, r3, r0
 8007ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ec6:	bfac      	ite	ge
 8007ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eca:	81a3      	strhlt	r3, [r4, #12]
 8007ecc:	bd10      	pop	{r4, pc}

08007ece <__swrite>:
 8007ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed2:	461f      	mov	r7, r3
 8007ed4:	898b      	ldrh	r3, [r1, #12]
 8007ed6:	05db      	lsls	r3, r3, #23
 8007ed8:	4605      	mov	r5, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	4616      	mov	r6, r2
 8007ede:	d505      	bpl.n	8007eec <__swrite+0x1e>
 8007ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f000 f868 	bl	8007fbc <_lseek_r>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	4628      	mov	r0, r5
 8007efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f02:	f000 b817 	b.w	8007f34 <_write_r>

08007f06 <__sseek>:
 8007f06:	b510      	push	{r4, lr}
 8007f08:	460c      	mov	r4, r1
 8007f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0e:	f000 f855 	bl	8007fbc <_lseek_r>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	bf15      	itete	ne
 8007f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strheq	r3, [r4, #12]
 8007f24:	bf18      	it	ne
 8007f26:	81a3      	strhne	r3, [r4, #12]
 8007f28:	bd10      	pop	{r4, pc}

08007f2a <__sclose>:
 8007f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2e:	f000 b813 	b.w	8007f58 <_close_r>
	...

08007f34 <_write_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	4d07      	ldr	r5, [pc, #28]	; (8007f54 <_write_r+0x20>)
 8007f38:	4604      	mov	r4, r0
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	602a      	str	r2, [r5, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f7fa ff0b 	bl	8002d5e <_write>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d102      	bne.n	8007f52 <_write_r+0x1e>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	b103      	cbz	r3, 8007f52 <_write_r+0x1e>
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	20000368 	.word	0x20000368

08007f58 <_close_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_close_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7fa ff17 	bl	8002d96 <_close>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_close_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_close_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	20000368 	.word	0x20000368

08007f78 <_fstat_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d07      	ldr	r5, [pc, #28]	; (8007f98 <_fstat_r+0x20>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	602b      	str	r3, [r5, #0]
 8007f86:	f7fa ff12 	bl	8002dae <_fstat>
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	d102      	bne.n	8007f94 <_fstat_r+0x1c>
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	b103      	cbz	r3, 8007f94 <_fstat_r+0x1c>
 8007f92:	6023      	str	r3, [r4, #0]
 8007f94:	bd38      	pop	{r3, r4, r5, pc}
 8007f96:	bf00      	nop
 8007f98:	20000368 	.word	0x20000368

08007f9c <_isatty_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4d06      	ldr	r5, [pc, #24]	; (8007fb8 <_isatty_r+0x1c>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	f7fa ff11 	bl	8002dce <_isatty>
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	d102      	bne.n	8007fb6 <_isatty_r+0x1a>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	b103      	cbz	r3, 8007fb6 <_isatty_r+0x1a>
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	20000368 	.word	0x20000368

08007fbc <_lseek_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d07      	ldr	r5, [pc, #28]	; (8007fdc <_lseek_r+0x20>)
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	602a      	str	r2, [r5, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f7fa ff0a 	bl	8002de4 <_lseek>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_lseek_r+0x1e>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_lseek_r+0x1e>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	20000368 	.word	0x20000368

08007fe0 <_read_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d07      	ldr	r5, [pc, #28]	; (8008000 <_read_r+0x20>)
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	4611      	mov	r1, r2
 8007fea:	2200      	movs	r2, #0
 8007fec:	602a      	str	r2, [r5, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f7fa fe98 	bl	8002d24 <_read>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d102      	bne.n	8007ffe <_read_r+0x1e>
 8007ff8:	682b      	ldr	r3, [r5, #0]
 8007ffa:	b103      	cbz	r3, 8007ffe <_read_r+0x1e>
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	20000368 	.word	0x20000368

08008004 <_init>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr

08008010 <_fini>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr
